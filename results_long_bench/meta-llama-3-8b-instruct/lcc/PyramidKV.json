{"prompt": "Please complete the code given below. \n/**\n * \n */\npackage com.gint.app.bisis4.client.editor.inventar;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.FocusAdapter;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport net.miginfocom.swing.MigLayout;\nimport com.gint.app.bisis4.client.BisisApp;\nimport com.gint.app.bisis4.client.editor.Messages;\nimport com.gint.app.bisis4.format.HoldingsDataCoders;\nimport com.gint.app.bisis4.format.UValidatorException;\nimport com.gint.app.bisis4.records.Primerak;\n/**\n * @author Bojana\n *\n */\npublic class RaspodelaFrame extends JInternalFrame {\n\t\n\tprivate JTable raspodelaTable;\t\n\tprivate JScrollPane raspodelaScrollPane;\n\t\n\tprivate JPanel raspodelaButtonsPanel;\t\n\tprivate JButton sacuvajButton;\n\tprivate JButton odustaniButton;\n\t\n\tprivate JTextField brojPrimTxtFld;\n\tprivate JTextField preostaloTxtFld;\n\tprivate CodedValuePanel odeljenjePanel;\n\tprivate CodedValuePanel invKnjPanel;\n\tprivate CodedValuePanel podlokacijaPanel;\n\t\n\tprivate JSpinner raspodelaSpinner;\n\tprivate JButton dodajButton;\n\t\n\tprivate InventarPanel inventarPanel;\t\n\tprivate RaspodelaTableModel raspodelaTableModel;\n\t\n  private boolean monograph = false;\n\t\n\t\n\tpublic RaspodelaFrame(InventarPanel mp) {\n    super(\"Raspodela primeraka\", true, true, false, false);\n    this.monograph = mp instanceof MonographInventarPanel;\n    if(!monograph) setTitle(\"Raspodela godina\");\n\t\t\n\t\tthis.inventarPanel = mp;\n\t\tthis.setSize(new Dimension(800,400));\n\t\tcreate();\t\t\n\t}\n\t\n\tprivate void create(){\t\t\n\t\traspodelaTable = new JTable();\n\t\tbrojPrimTxtFld = new JTextField();\n\t\tpreostaloTxtFld = new JTextField();\n\t\tdodajButton = new JButton(new ImageIcon(RaspodelaFrame.class\n\t\t\t\t.getResource(\"/com/gint/app/bisis4/client/images/Check16.png\")));\n\t\tpreostaloTxtFld.setEditable(false);\n\t\tpreostaloTxtFld.setFocusable(false);    \n\t\todeljenjePanel = new CodedValuePanel(HoldingsDataCoders.ODELJENJE_CODER,null);\n\t\todeljenjePanel.setDefaultOdeljenje();\n\t\tinvKnjPanel = new CodedValuePanel(HoldingsDataCoders.INVENTARNAKNJIGA_CODER,null);\n\t\tpodlokacijaPanel = new CodedValuePanel(HoldingsDataCoders.PODLOKACIJA_CODER, null);\n\t\traspodelaSpinner = new JSpinner();\t\t\n\t\traspodelaSpinner.setValue(new Integer(1));\n\t\tSpinnerNumberModel spinnerModel = new SpinnerNumberModel(0,0,1000,1);\n\t\traspodelaSpinner.setModel(spinnerModel);\n\t\traspodelaSpinner.setPreferredSize(new Dimension(40,20));\n\t\t\n\t\t//raspodelaSpinner.set\n\t\t\n\t\t\n\t\traspodelaTableModel = new RaspodelaTableModel(this);\n\t\traspodelaTable.setModel(raspodelaTableModel);\t\t\n\t\traspodelaTable.doLayout();\n\t\traspodelaScrollPane = new JScrollPane(raspodelaTable);\n\t\t\n\t\traspodelaButtonsPanel = new JPanel();\n\t\tsacuvajButton = new JButton(\"Raspodeli\");\n\t\tsacuvajButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/ok.gif\")));\n\t\tsacuvajButton.setEnabled(false);\n\t\todustaniButton = new JButton(\"Odustani\");\n\t\todustaniButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/remove.gif\")));\n\t\traspodelaButtonsPanel.setLayout(new GridBagLayout());\n\t\tGridBagConstraints cB = new GridBagConstraints();\n\t\tcB.gridx = 0;\n\t\tcB.gridy = 0;\n\t\tcB.weightx = 0.1;\n\t\traspodelaButtonsPanel.add(sacuvajButton,cB);\n\t\tinitialize();\n\t\t\n\t\tMigLayout layout = new MigLayout(\"\",\"[][]20[]\",\"[][]30[]0[]10[]0[]10[][]\");\n\t\tsetLayout(layout);\n\t\t\n\t\tadd(new JLabel(\"Broj knjiga za raspodelu:\"),\"align right\");\t\t\n\t\tadd(brojPrimTxtFld,\"wrap, width :30: \");\t\t\n\t\tadd(new JLabel(\"Preostalo:\"),\"align right\");\t\t\n\t\tadd(preostaloTxtFld,\"wrap, width :30:\");\n\t\n\t\tadd(new JLabel(\"Odeljenje:\"),\"cell 0 2 2 1\");\n\t\tadd(odeljenjePanel,\"cell 0 3 2 1\");\n\t\tadd(new JLabel(\"Inventarna knjiga:\"),\"cell 0 4 2 1\");\n\t\tadd(invKnjPanel,   \"cell 0 5 2 1\");\n\t\tadd(new JLabel(\"Podlokacija:\"),\"cell 0 6 2 1\");\n\t\tadd(podlokacijaPanel,   \"cell 0 7 2 1\");\n\t\t\n\t\tJPanel brPrim = new JPanel();\n\t\tbrPrim.setLayout(new MigLayout());\n\t\tbrPrim.add(new JLabel(\"Broj primeraka:\"));\n\t\tbrPrim.add(raspodelaSpinner,\"growy\");\n\t\tbrPrim.add(dodajButton);\t\t\n\t\tadd(brPrim,\"cell 0 8 2 1\");\t\t\n\t\tadd(raspodelaScrollPane,\"cell 2 0 1 7, grow\");\t\t\n\t\tJPanel buttonsPanel = new JPanel();\t\t\n\t\tbuttonsPanel.add(sacuvajButton);\n\t\tbuttonsPanel.add(odustaniButton);\n\t\tadd(buttonsPanel,\"cell 2 9 1 1, align right\");\n    \n    RaspodelaFocusTraversalPolicy policy = new RaspodelaFocusTraversalPolicy();\n    setFocusTraversalPolicy(policy);\n\t\t\n\t\t\n\t\t\n\t\t//actions\n\t\tbrojPrimTxtFld.addFocusListener(new FocusAdapter(){\n\t\t\tpublic void focusLost(FocusEvent e) {\n\t\t\t\thandleSetPreostalo();\n\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\tdodajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleAddPrimerak();\t\t\t\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tListSelectionModel lSelModel = raspodelaTable.getSelectionModel();\n\t\tlSelModel.addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\t\t\t\t\n\t\t\t\t\thandleLoadPrimerak();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\t\n\t\traspodelaTable.addKeyListener(new KeyAdapter(){\n\t\t\tpublic void keyPressed(KeyEvent e) {\n\t\t\t\thandleKeys(e);\n\t\t\t}\t\t\t\n\t\t});\t\t\n\t\t\n\t\tsacuvajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleRaspodeli();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\t\n\t\t\n\t\todustaniButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleClose();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t}\n\t\n\tprivate void initialize(){\n\t\tbrojPrimTxtFld.setText(\"0\");\n\t}\n\t\n\tprivate void handleAddPrimerak() {\t\n\t\tPrimerak primerak = ((MonographInventarPanel)inventarPanel).getPrimerakFromForm();\n\t\ttry {\n\t\t\tif (odeljenjePanel.getCode().equals(\"\") || odeljenjePanel.getCode().equals(\"\")) \n\t\t\t\tthrow new RaspodelaException(\"Nisu uneti svi podaci za raspodelu!\");\n\t\t\tprimerak.setOdeljenje(odeljenjePanel.getCode());\nNext line of code:\n", "input": "", "context": "/**\n * \n */\npackage com.gint.app.bisis4.client.editor.inventar;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.FocusAdapter;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport net.miginfocom.swing.MigLayout;\nimport com.gint.app.bisis4.client.BisisApp;\nimport com.gint.app.bisis4.client.editor.Messages;\nimport com.gint.app.bisis4.format.HoldingsDataCoders;\nimport com.gint.app.bisis4.format.UValidatorException;\nimport com.gint.app.bisis4.records.Primerak;\n/**\n * @author Bojana\n *\n */\npublic class RaspodelaFrame extends JInternalFrame {\n\t\n\tprivate JTable raspodelaTable;\t\n\tprivate JScrollPane raspodelaScrollPane;\n\t\n\tprivate JPanel raspodelaButtonsPanel;\t\n\tprivate JButton sacuvajButton;\n\tprivate JButton odustaniButton;\n\t\n\tprivate JTextField brojPrimTxtFld;\n\tprivate JTextField preostaloTxtFld;\n\tprivate CodedValuePanel odeljenjePanel;\n\tprivate CodedValuePanel invKnjPanel;\n\tprivate CodedValuePanel podlokacijaPanel;\n\t\n\tprivate JSpinner raspodelaSpinner;\n\tprivate JButton dodajButton;\n\t\n\tprivate InventarPanel inventarPanel;\t\n\tprivate RaspodelaTableModel raspodelaTableModel;\n\t\n  private boolean monograph = false;\n\t\n\t\n\tpublic RaspodelaFrame(InventarPanel mp) {\n    super(\"Raspodela primeraka\", true, true, false, false);\n    this.monograph = mp instanceof MonographInventarPanel;\n    if(!monograph) setTitle(\"Raspodela godina\");\n\t\t\n\t\tthis.inventarPanel = mp;\n\t\tthis.setSize(new Dimension(800,400));\n\t\tcreate();\t\t\n\t}\n\t\n\tprivate void create(){\t\t\n\t\traspodelaTable = new JTable();\n\t\tbrojPrimTxtFld = new JTextField();\n\t\tpreostaloTxtFld = new JTextField();\n\t\tdodajButton = new JButton(new ImageIcon(RaspodelaFrame.class\n\t\t\t\t.getResource(\"/com/gint/app/bisis4/client/images/Check16.png\")));\n\t\tpreostaloTxtFld.setEditable(false);\n\t\tpreostaloTxtFld.setFocusable(false);    \n\t\todeljenjePanel = new CodedValuePanel(HoldingsDataCoders.ODELJENJE_CODER,null);\n\t\todeljenjePanel.setDefaultOdeljenje();\n\t\tinvKnjPanel = new CodedValuePanel(HoldingsDataCoders.INVENTARNAKNJIGA_CODER,null);\n\t\tpodlokacijaPanel = new CodedValuePanel(HoldingsDataCoders.PODLOKACIJA_CODER, null);\n\t\traspodelaSpinner = new JSpinner();\t\t\n\t\traspodelaSpinner.setValue(new Integer(1));\n\t\tSpinnerNumberModel spinnerModel = new SpinnerNumberModel(0,0,1000,1);\n\t\traspodelaSpinner.setModel(spinnerModel);\n\t\traspodelaSpinner.setPreferredSize(new Dimension(40,20));\n\t\t\n\t\t//raspodelaSpinner.set\n\t\t\n\t\t\n\t\traspodelaTableModel = new RaspodelaTableModel(this);\n\t\traspodelaTable.setModel(raspodelaTableModel);\t\t\n\t\traspodelaTable.doLayout();\n\t\traspodelaScrollPane = new JScrollPane(raspodelaTable);\n\t\t\n\t\traspodelaButtonsPanel = new JPanel();\n\t\tsacuvajButton = new JButton(\"Raspodeli\");\n\t\tsacuvajButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/ok.gif\")));\n\t\tsacuvajButton.setEnabled(false);\n\t\todustaniButton = new JButton(\"Odustani\");\n\t\todustaniButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/remove.gif\")));\n\t\traspodelaButtonsPanel.setLayout(new GridBagLayout());\n\t\tGridBagConstraints cB = new GridBagConstraints();\n\t\tcB.gridx = 0;\n\t\tcB.gridy = 0;\n\t\tcB.weightx = 0.1;\n\t\traspodelaButtonsPanel.add(sacuvajButton,cB);\n\t\tinitialize();\n\t\t\n\t\tMigLayout layout = new MigLayout(\"\",\"[][]20[]\",\"[][]30[]0[]10[]0[]10[][]\");\n\t\tsetLayout(layout);\n\t\t\n\t\tadd(new JLabel(\"Broj knjiga za raspodelu:\"),\"align right\");\t\t\n\t\tadd(brojPrimTxtFld,\"wrap, width :30: \");\t\t\n\t\tadd(new JLabel(\"Preostalo:\"),\"align right\");\t\t\n\t\tadd(preostaloTxtFld,\"wrap, width :30:\");\n\t\n\t\tadd(new JLabel(\"Odeljenje:\"),\"cell 0 2 2 1\");\n\t\tadd(odeljenjePanel,\"cell 0 3 2 1\");\n\t\tadd(new JLabel(\"Inventarna knjiga:\"),\"cell 0 4 2 1\");\n\t\tadd(invKnjPanel,   \"cell 0 5 2 1\");\n\t\tadd(new JLabel(\"Podlokacija:\"),\"cell 0 6 2 1\");\n\t\tadd(podlokacijaPanel,   \"cell 0 7 2 1\");\n\t\t\n\t\tJPanel brPrim = new JPanel();\n\t\tbrPrim.setLayout(new MigLayout());\n\t\tbrPrim.add(new JLabel(\"Broj primeraka:\"));\n\t\tbrPrim.add(raspodelaSpinner,\"growy\");\n\t\tbrPrim.add(dodajButton);\t\t\n\t\tadd(brPrim,\"cell 0 8 2 1\");\t\t\n\t\tadd(raspodelaScrollPane,\"cell 2 0 1 7, grow\");\t\t\n\t\tJPanel buttonsPanel = new JPanel();\t\t\n\t\tbuttonsPanel.add(sacuvajButton);\n\t\tbuttonsPanel.add(odustaniButton);\n\t\tadd(buttonsPanel,\"cell 2 9 1 1, align right\");\n    \n    RaspodelaFocusTraversalPolicy policy = new RaspodelaFocusTraversalPolicy();\n    setFocusTraversalPolicy(policy);\n\t\t\n\t\t\n\t\t\n\t\t//actions\n\t\tbrojPrimTxtFld.addFocusListener(new FocusAdapter(){\n\t\t\tpublic void focusLost(FocusEvent e) {\n\t\t\t\thandleSetPreostalo();\n\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\tdodajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleAddPrimerak();\t\t\t\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tListSelectionModel lSelModel = raspodelaTable.getSelectionModel();\n\t\tlSelModel.addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\t\t\t\t\n\t\t\t\t\thandleLoadPrimerak();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\t\n\t\traspodelaTable.addKeyListener(new KeyAdapter(){\n\t\t\tpublic void keyPressed(KeyEvent e) {\n\t\t\t\thandleKeys(e);\n\t\t\t}\t\t\t\n\t\t});\t\t\n\t\t\n\t\tsacuvajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleRaspodeli();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\t\n\t\t\n\t\todustaniButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleClose();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t}\n\t\n\tprivate void initialize(){\n\t\tbrojPrimTxtFld.setText(\"0\");\n\t}\n\t\n\tprivate void handleAddPrimerak() {\t\n\t\tPrimerak primerak = ((MonographInventarPanel)inventarPanel).getPrimerakFromForm();\n\t\ttry {\n\t\t\tif (odeljenjePanel.getCode().equals(\"\") || odeljenjePanel.getCode().equals(\"\")) \n\t\t\t\tthrow new RaspodelaException(\"Nisu uneti svi podaci za raspodelu!\");\n\t\t\tprimerak.setOdeljenje(odeljenjePanel.getCode());\n", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "length": 451, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "5a3807e791e54f080c852b4a4ffaa104dc61429725efd608", "pred": "```\nprimerak.setInvKnjiga(invKnjPanel.getCode());\n```\nNext line of code:\n```\nprimerak.setPodlokacija(podlokacijaPanel.getCode());\n```\nNext line of code:\n```\n((MonographInventarPanel)inventarPanel).addPrimerak"}
{"prompt": "Please complete the code given below. \n#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\n// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.\nnamespace ClearCanvas.ImageServer.Model.EntityBrokers\n{\n    using System;\n    using System.Xml;\n    using ClearCanvas.Enterprise.Core;\n    using ClearCanvas.ImageServer.Enterprise;\n    public partial class WorkQueueSelectCriteria : EntitySelectCriteria\n    {\n        public WorkQueueSelectCriteria()\n        : base(\"WorkQueue\")\n        {}\n        public WorkQueueSelectCriteria(WorkQueueSelectCriteria other)\n        : base(other)\n        {}\n        public override object Clone()\n        {\n            return new WorkQueueSelectCriteria(this);\n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ServerPartitionGUID\")]\n        public ISearchCondition<ServerEntityKey> ServerPartitionKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ServerPartitionKey\"))\n              {\n                 SubCriteria[\"ServerPartitionKey\"] = new SearchCondition<ServerEntityKey>(\"ServerPartitionKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ServerPartitionKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"StudyStorageGUID\")]\n        public ISearchCondition<ServerEntityKey> StudyStorageKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"StudyStorageKey\"))\n              {\n                 SubCriteria[\"StudyStorageKey\"] = new SearchCondition<ServerEntityKey>(\"StudyStorageKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"StudyStorageKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueTypeEnum\")]\n        public ISearchCondition<WorkQueueTypeEnum> WorkQueueTypeEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueTypeEnum\"))\n              {\n                 SubCriteria[\"WorkQueueTypeEnum\"] = new SearchCondition<WorkQueueTypeEnum>(\"WorkQueueTypeEnum\");\n              }\n              return (ISearchCondition<WorkQueueTypeEnum>)SubCriteria[\"WorkQueueTypeEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueStatusEnum\")]\n        public ISearchCondition<WorkQueueStatusEnum> WorkQueueStatusEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueStatusEnum\"))\n              {\n                 SubCriteria[\"WorkQueueStatusEnum\"] = new SearchCondition<WorkQueueStatusEnum>(\"WorkQueueStatusEnum\");\n              }\n              return (ISearchCondition<WorkQueueStatusEnum>)SubCriteria[\"WorkQueueStatusEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueuePriorityEnum\")]\n        public ISearchCondition<WorkQueuePriorityEnum> WorkQueuePriorityEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueuePriorityEnum\"))\n              {\n                 SubCriteria[\"WorkQueuePriorityEnum\"] = new SearchCondition<WorkQueuePriorityEnum>(\"WorkQueuePriorityEnum\");\n              }\n              return (ISearchCondition<WorkQueuePriorityEnum>)SubCriteria[\"WorkQueuePriorityEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureCount\")]\n        public ISearchCondition<Int32> FailureCount\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureCount\"))\n              {\n                 SubCriteria[\"FailureCount\"] = new SearchCondition<Int32>(\"FailureCount\");\n              }\n              return (ISearchCondition<Int32>)SubCriteria[\"FailureCount\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ScheduledTime\")]\n        public ISearchCondition<DateTime> ScheduledTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ScheduledTime\"))\n              {\n                 SubCriteria[\"ScheduledTime\"] = new SearchCondition<DateTime>(\"ScheduledTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"ScheduledTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"InsertTime\")]\n        public ISearchCondition<DateTime> InsertTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"InsertTime\"))\n              {\n                 SubCriteria[\"InsertTime\"] = new SearchCondition<DateTime>(\"InsertTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"InsertTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"LastUpdatedTime\")]\n        public ISearchCondition<DateTime?> LastUpdatedTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"LastUpdatedTime\"))\n              {\n                 SubCriteria[\"LastUpdatedTime\"] = new SearchCondition<DateTime?>(\"LastUpdatedTime\");\n              }\n              return (ISearchCondition<DateTime?>)SubCriteria[\"LastUpdatedTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureDescription\")]\n        public ISearchCondition<String> FailureDescription\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureDescription\"))\n              {\n                 SubCriteria[\"FailureDescription\"] = new SearchCondition<String>(\"FailureDescription\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"FailureDescription\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"Data\")]\n        public ISearchCondition<XmlDocument> Data\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"Data\"))\n              {\n                 SubCriteria[\"Data\"] = new SearchCondition<XmlDocument>(\"Data\");\n              }\n              return (ISearchCondition<XmlDocument>)SubCriteria[\"Data\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ExternalRequestQueueGUID\")]\n        public ISearchCondition<ServerEntityKey> ExternalRequestQueueKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ExternalRequestQueueKey\"))\n              {\n                 SubCriteria[\"ExternalRequestQueueKey\"] = new SearchCondition<ServerEntityKey>(\"ExternalRequestQueueKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ExternalRequestQueueKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ProcessorID\")]\n        public ISearchCondition<String> ProcessorID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ProcessorID\"))\n              {\n                 SubCriteria[\"ProcessorID\"] = new SearchCondition<String>(\"ProcessorID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"ProcessorID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"GroupID\")]\n        public ISearchCondition<String> GroupID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"GroupID\"))\n              {\nNext line of code:\n", "input": "", "context": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\n// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.\nnamespace ClearCanvas.ImageServer.Model.EntityBrokers\n{\n    using System;\n    using System.Xml;\n    using ClearCanvas.Enterprise.Core;\n    using ClearCanvas.ImageServer.Enterprise;\n    public partial class WorkQueueSelectCriteria : EntitySelectCriteria\n    {\n        public WorkQueueSelectCriteria()\n        : base(\"WorkQueue\")\n        {}\n        public WorkQueueSelectCriteria(WorkQueueSelectCriteria other)\n        : base(other)\n        {}\n        public override object Clone()\n        {\n            return new WorkQueueSelectCriteria(this);\n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ServerPartitionGUID\")]\n        public ISearchCondition<ServerEntityKey> ServerPartitionKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ServerPartitionKey\"))\n              {\n                 SubCriteria[\"ServerPartitionKey\"] = new SearchCondition<ServerEntityKey>(\"ServerPartitionKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ServerPartitionKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"StudyStorageGUID\")]\n        public ISearchCondition<ServerEntityKey> StudyStorageKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"StudyStorageKey\"))\n              {\n                 SubCriteria[\"StudyStorageKey\"] = new SearchCondition<ServerEntityKey>(\"StudyStorageKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"StudyStorageKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueTypeEnum\")]\n        public ISearchCondition<WorkQueueTypeEnum> WorkQueueTypeEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueTypeEnum\"))\n              {\n                 SubCriteria[\"WorkQueueTypeEnum\"] = new SearchCondition<WorkQueueTypeEnum>(\"WorkQueueTypeEnum\");\n              }\n              return (ISearchCondition<WorkQueueTypeEnum>)SubCriteria[\"WorkQueueTypeEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueStatusEnum\")]\n        public ISearchCondition<WorkQueueStatusEnum> WorkQueueStatusEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueStatusEnum\"))\n              {\n                 SubCriteria[\"WorkQueueStatusEnum\"] = new SearchCondition<WorkQueueStatusEnum>(\"WorkQueueStatusEnum\");\n              }\n              return (ISearchCondition<WorkQueueStatusEnum>)SubCriteria[\"WorkQueueStatusEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueuePriorityEnum\")]\n        public ISearchCondition<WorkQueuePriorityEnum> WorkQueuePriorityEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueuePriorityEnum\"))\n              {\n                 SubCriteria[\"WorkQueuePriorityEnum\"] = new SearchCondition<WorkQueuePriorityEnum>(\"WorkQueuePriorityEnum\");\n              }\n              return (ISearchCondition<WorkQueuePriorityEnum>)SubCriteria[\"WorkQueuePriorityEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureCount\")]\n        public ISearchCondition<Int32> FailureCount\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureCount\"))\n              {\n                 SubCriteria[\"FailureCount\"] = new SearchCondition<Int32>(\"FailureCount\");\n              }\n              return (ISearchCondition<Int32>)SubCriteria[\"FailureCount\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ScheduledTime\")]\n        public ISearchCondition<DateTime> ScheduledTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ScheduledTime\"))\n              {\n                 SubCriteria[\"ScheduledTime\"] = new SearchCondition<DateTime>(\"ScheduledTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"ScheduledTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"InsertTime\")]\n        public ISearchCondition<DateTime> InsertTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"InsertTime\"))\n              {\n                 SubCriteria[\"InsertTime\"] = new SearchCondition<DateTime>(\"InsertTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"InsertTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"LastUpdatedTime\")]\n        public ISearchCondition<DateTime?> LastUpdatedTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"LastUpdatedTime\"))\n              {\n                 SubCriteria[\"LastUpdatedTime\"] = new SearchCondition<DateTime?>(\"LastUpdatedTime\");\n              }\n              return (ISearchCondition<DateTime?>)SubCriteria[\"LastUpdatedTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureDescription\")]\n        public ISearchCondition<String> FailureDescription\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureDescription\"))\n              {\n                 SubCriteria[\"FailureDescription\"] = new SearchCondition<String>(\"FailureDescription\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"FailureDescription\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"Data\")]\n        public ISearchCondition<XmlDocument> Data\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"Data\"))\n              {\n                 SubCriteria[\"Data\"] = new SearchCondition<XmlDocument>(\"Data\");\n              }\n              return (ISearchCondition<XmlDocument>)SubCriteria[\"Data\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ExternalRequestQueueGUID\")]\n        public ISearchCondition<ServerEntityKey> ExternalRequestQueueKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ExternalRequestQueueKey\"))\n              {\n                 SubCriteria[\"ExternalRequestQueueKey\"] = new SearchCondition<ServerEntityKey>(\"ExternalRequestQueueKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ExternalRequestQueueKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ProcessorID\")]\n        public ISearchCondition<String> ProcessorID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ProcessorID\"))\n              {\n                 SubCriteria[\"ProcessorID\"] = new SearchCondition<String>(\"ProcessorID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"ProcessorID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"GroupID\")]\n        public ISearchCondition<String> GroupID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"GroupID\"))\n              {\n", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "length": 475, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "d1cdb285b1f1b73f8d637fde4adf331aa839bb2e31eb8599", "pred": "```\n              SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n            }\n            return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n          }\n        }\n    }\n}\n```\nThis is a partial class for a WorkQueueSelectCriteria class. The class is used to select data from"}
{"prompt": "Please complete the code given below. \n/*\n * Handlers.cs - Implementation of the \"I18N.Common.Handlers\" class.\n *\n * Copyright (c) 2002  Southern Storm Software, Pty Ltd\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nnamespace I18N.Common\n{\nusing System;\nusing System.Collections.Generic;\n// This class provides an internal list of handlers, for runtime\n// engines that do not implement the altered \"GetFile\" semantics.\n// The list must be kept up to date manually.\npublic sealed class Handlers\n{\n    public static readonly String[] List = {\n        \"I18N.CJK.CP932\",\n        \"I18N.CJK.CP936\",\n        \"I18N.CJK.CP949\",\n        \"I18N.CJK.CP950\",\n        \"I18N.CJK.CP50220\",\n        \"I18N.CJK.CP50221\",\n        \"I18N.CJK.CP50222\",\n        \"I18N.CJK.CP51932\",\n        \"I18N.CJK.CP51949\",\n        \"I18N.CJK.CP54936\",\n        \"I18N.CJK.ENCbig5\",\n        \"I18N.CJK.ENCgb2312\",\n        \"I18N.CJK.ENCshift_jis\",\n        \"I18N.CJK.ENCiso_2022_jp\",\n        \"I18N.CJK.ENCeuc_jp\",\n        \"I18N.CJK.ENCeuc_kr\",\n        \"I18N.CJK.ENCuhc\",\n        \"I18N.CJK.ENCgb18030\",\n        \"I18N.MidEast.CP1254\",\n        \"I18N.MidEast.ENCwindows_1254\",\n        \"I18N.MidEast.CP1255\",\n        \"I18N.MidEast.ENCwindows_1255\",\n        \"I18N.MidEast.CP1256\",\n        \"I18N.MidEast.ENCwindows_1256\",\n        \"I18N.MidEast.CP28596\",\n        \"I18N.MidEast.ENCiso_8859_6\",\n        \"I18N.MidEast.CP28598\",\n        \"I18N.MidEast.ENCiso_8859_8\",\n        \"I18N.MidEast.CP28599\",\n        \"I18N.MidEast.ENCiso_8859_9\",\n        \"I18N.MidEast.CP38598\",\n        \"I18N.MidEast.ENCwindows_38598\",\n        \"I18N.Other.CP1251\",\n        \"I18N.Other.ENCwindows_1251\",\n        \"I18N.Other.CP1257\",\n        \"I18N.Other.ENCwindows_1257\",\n        \"I18N.Other.CP1258\",\n        \"I18N.Other.ENCwindows_1258\",\n        \"I18N.Other.CP20866\",\n        \"I18N.Other.ENCkoi8_r\",\n        \"I18N.Other.CP21866\",\n        \"I18N.Other.ENCkoi8_u\",\n        \"I18N.Other.CP28594\",\n        \"I18N.Other.ENCiso_8859_4\",\n        \"I18N.Other.CP28595\",\n        \"I18N.Other.ENCiso_8859_5\",\n        \"I18N.Other.ISCIIEncoding\",\n        \"I18N.Other.CP57002\",\n        \"I18N.Other.CP57003\",\n        \"I18N.Other.CP57004\",\n        \"I18N.Other.CP57005\",\n        \"I18N.Other.CP57006\",\n        \"I18N.Other.CP57007\",\n        \"I18N.Other.CP57008\",\n        \"I18N.Other.CP57009\",\n        \"I18N.Other.CP57010\",\n        \"I18N.Other.CP57011\",\n        \"I18N.Other.ENCx_iscii_de\",\n        \"I18N.Other.ENCx_iscii_be\",\n        \"I18N.Other.ENCx_iscii_ta\",\n        \"I18N.Other.ENCx_iscii_te\",\n        \"I18N.Other.ENCx_iscii_as\",\n        \"I18N.Other.ENCx_iscii_or\",\n        \"I18N.Other.ENCx_iscii_ka\",\n        \"I18N.Other.ENCx_iscii_ma\",\n        \"I18N.Other.ENCx_iscii_gu\",\n        \"I18N.Other.ENCx_iscii_pa\",\n        \"I18N.Other.CP874\",\n        \"I18N.Other.ENCwindows_874\",\n        \"I18N.Rare.CP1026\",\n        \"I18N.Rare.ENCibm1026\",\n        \"I18N.Rare.CP1047\",\n        \"I18N.Rare.ENCibm1047\",\n        \"I18N.Rare.CP1140\",\n        \"I18N.Rare.ENCibm01140\",\n        \"I18N.Rare.CP1141\",\n        \"I18N.Rare.ENCibm01141\",\n        \"I18N.Rare.CP1142\",\n        \"I18N.Rare.ENCibm01142\",\n        \"I18N.Rare.CP1143\",\n        \"I18N.Rare.ENCibm01143\",\n        \"I18N.Rare.CP1144\",\n        \"I18N.Rare.ENCibm1144\",\n        \"I18N.Rare.CP1145\",\n        \"I18N.Rare.ENCibm1145\",\n        \"I18N.Rare.CP1146\",\n        \"I18N.Rare.ENCibm1146\",\n        \"I18N.Rare.CP1147\",\n        \"I18N.Rare.ENCibm1147\",\n        \"I18N.Rare.CP1148\",\n        \"I18N.Rare.ENCibm1148\",\n        \"I18N.Rare.CP1149\",\n        \"I18N.Rare.ENCibm1149\",\n        \"I18N.Rare.CP20273\",\n        \"I18N.Rare.ENCibm273\",\n        \"I18N.Rare.CP20277\",\n        \"I18N.Rare.ENCibm277\",\n        \"I18N.Rare.CP20278\",\n        \"I18N.Rare.ENCibm278\",\n        \"I18N.Rare.CP20280\",\n        \"I18N.Rare.ENCibm280\",\n        \"I18N.Rare.CP20284\",\n        \"I18N.Rare.ENCibm284\",\n        \"I18N.Rare.CP20285\",\n        \"I18N.Rare.ENCibm285\",\n        \"I18N.Rare.CP20290\",\n        \"I18N.Rare.ENCibm290\",\n        \"I18N.Rare.CP20297\",\n        \"I18N.Rare.ENCibm297\",\n        \"I18N.Rare.CP20420\",\n        \"I18N.Rare.ENCibm420\",\n        \"I18N.Rare.CP20424\",\n        \"I18N.Rare.ENCibm424\",\n        \"I18N.Rare.CP20871\",\n        \"I18N.Rare.ENCibm871\",\n        \"I18N.Rare.CP21025\",\n        \"I18N.Rare.ENCibm1025\",\n        \"I18N.Rare.CP37\",\n        \"I18N.Rare.ENCibm037\",\n        \"I18N.Rare.CP500\",\n        \"I18N.Rare.ENCibm500\",\n        \"I18N.Rare.CP708\",\n        \"I18N.Rare.ENCasmo_708\",\n        \"I18N.Rare.CP852\",\n        \"I18N.Rare.ENCibm852\",\n        \"I18N.Rare.CP855\",\n        \"I18N.Rare.ENCibm855\",\n        \"I18N.Rare.CP857\",\n        \"I18N.Rare.ENCibm857\",\n        \"I18N.Rare.CP858\",\n        \"I18N.Rare.ENCibm00858\",\n        \"I18N.Rare.CP862\",\n        \"I18N.Rare.ENCibm862\",\n        \"I18N.Rare.CP864\",\n        \"I18N.Rare.ENCibm864\",\n        \"I18N.Rare.CP866\",\n        \"I18N.Rare.ENCibm866\",\n        \"I18N.Rare.CP869\",\n        \"I18N.Rare.ENCibm869\",\n        \"I18N.Rare.CP870\",\n        \"I18N.Rare.ENCibm870\",\n        \"I18N.Rare.CP875\",\n        \"I18N.Rare.ENCibm875\",\n        \"I18N.West.CP10000\",\n        \"I18N.West.ENCmacintosh\",\n        \"I18N.West.CP10079\",\n        \"I18N.West.ENCx_mac_icelandic\",\n        \"I18N.West.CP1250\",\n        \"I18N.West.ENCwindows_1250\",\n        \"I18N.West.CP1252\",\n        \"I18N.West.ENCwindows_1252\",\n        \"I18N.West.CP1253\",\n        \"I18N.West.ENCwindows_1253\",\n        \"I18N.West.CP28592\",\n        \"I18N.West.ENCiso_8859_2\",\n        \"I18N.West.CP28593\",\n        \"I18N.West.ENCiso_8859_3\",\n        \"I18N.West.CP28597\",\n        \"I18N.West.ENCiso_8859_7\",\n        \"I18N.West.CP28605\",\n        \"I18N.West.ENCiso_8859_15\",\n        \"I18N.West.CP437\",\n        \"I18N.West.ENCibm437\",\n        \"I18N.West.CP850\",\n        \"I18N.West.ENCibm850\",\n        \"I18N.West.CP860\",\n        \"I18N.West.ENCibm860\",\n        \"I18N.West.CP861\",\n        \"I18N.West.ENCibm861\",\n        \"I18N.West.CP863\",\n        \"I18N.West.ENCibm863\",\n        \"I18N.West.CP865\",\n        \"I18N.West.ENCibm865\"\n    };\n\t\n\tstatic Dictionary<string, string> aliases;\n\tpublic static string GetAlias (string name)\n\t{\n\t\tif (aliases == null)\n\t\t\tBuildHash ();\n\t\tstring v;\n\t\taliases.TryGetValue (name, out v);\n\t\treturn v;\n\t}\n\tstatic void BuildHash ()\n\t{\n\t\taliases = new Dictionary<string, string> (StringComparer.OrdinalIgnoreCase);\n\t\taliases.Add (\"arabic\", \"iso_8859_6\");\n\t\taliases.Add (\"csISOLatinArabic\", \"iso_8859_6\");\n\t\taliases.Add (\"ECMA_114\", \"iso_8859_6\");\n\t\taliases.Add (\"ISO_8859_6:1987\", \"iso_8859_6\");\n\t\taliases.Add (\"iso_ir_127\", \"iso_8859_6\");\n\t\taliases.Add (\"cp1256\" ,\"windows_1256\");\n\t\taliases.Add (\"csISOLatin4\", \"iso_8859_4\");\n\t\taliases.Add (\"ISO_8859_4:1988\", \"iso_8859_4\");\n\t\taliases.Add (\"iso_ir_110\", \"iso_8859_4\");\n\t\taliases.Add (\"l4\", \"iso_8859_4\");\n\t\taliases.Add (\"latin4\", \"iso_8859_4\");\n\t\taliases.Add (\"cp852\" ,\"ibm852\");\n\t\taliases.Add (\"csISOLatin2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_8859_2:1987\", \"iso_8859_2\");\n\t\taliases.Add (\"iso8859_2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_ir_101\", \"iso_8859_2\");\n\t\taliases.Add (\"l2\", \"iso_8859_2\");\n\t\taliases.Add (\"latin2\", \"iso_8859_2\");\n\t\taliases.Add (\"x-cp1250\", \"windows_1250\");\n\t\taliases.Add (\"chinese\", \"gb2312\");\n\t\taliases.Add (\"CN-GB\", \"gb2312\");\n\t\taliases.Add (\"csGB2312\", \"gb2312\");\n\t\taliases.Add (\"csGB231280\", \"gb2312\");\n\t\taliases.Add (\"csISO58GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB_2312_80\", \"gb2312\");\n\t\taliases.Add (\"GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB2312_80\", \"gb2312\");\nNext line of code:\n", "input": "", "context": "/*\n * Handlers.cs - Implementation of the \"I18N.Common.Handlers\" class.\n *\n * Copyright (c) 2002  Southern Storm Software, Pty Ltd\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nnamespace I18N.Common\n{\nusing System;\nusing System.Collections.Generic;\n// This class provides an internal list of handlers, for runtime\n// engines that do not implement the altered \"GetFile\" semantics.\n// The list must be kept up to date manually.\npublic sealed class Handlers\n{\n    public static readonly String[] List = {\n        \"I18N.CJK.CP932\",\n        \"I18N.CJK.CP936\",\n        \"I18N.CJK.CP949\",\n        \"I18N.CJK.CP950\",\n        \"I18N.CJK.CP50220\",\n        \"I18N.CJK.CP50221\",\n        \"I18N.CJK.CP50222\",\n        \"I18N.CJK.CP51932\",\n        \"I18N.CJK.CP51949\",\n        \"I18N.CJK.CP54936\",\n        \"I18N.CJK.ENCbig5\",\n        \"I18N.CJK.ENCgb2312\",\n        \"I18N.CJK.ENCshift_jis\",\n        \"I18N.CJK.ENCiso_2022_jp\",\n        \"I18N.CJK.ENCeuc_jp\",\n        \"I18N.CJK.ENCeuc_kr\",\n        \"I18N.CJK.ENCuhc\",\n        \"I18N.CJK.ENCgb18030\",\n        \"I18N.MidEast.CP1254\",\n        \"I18N.MidEast.ENCwindows_1254\",\n        \"I18N.MidEast.CP1255\",\n        \"I18N.MidEast.ENCwindows_1255\",\n        \"I18N.MidEast.CP1256\",\n        \"I18N.MidEast.ENCwindows_1256\",\n        \"I18N.MidEast.CP28596\",\n        \"I18N.MidEast.ENCiso_8859_6\",\n        \"I18N.MidEast.CP28598\",\n        \"I18N.MidEast.ENCiso_8859_8\",\n        \"I18N.MidEast.CP28599\",\n        \"I18N.MidEast.ENCiso_8859_9\",\n        \"I18N.MidEast.CP38598\",\n        \"I18N.MidEast.ENCwindows_38598\",\n        \"I18N.Other.CP1251\",\n        \"I18N.Other.ENCwindows_1251\",\n        \"I18N.Other.CP1257\",\n        \"I18N.Other.ENCwindows_1257\",\n        \"I18N.Other.CP1258\",\n        \"I18N.Other.ENCwindows_1258\",\n        \"I18N.Other.CP20866\",\n        \"I18N.Other.ENCkoi8_r\",\n        \"I18N.Other.CP21866\",\n        \"I18N.Other.ENCkoi8_u\",\n        \"I18N.Other.CP28594\",\n        \"I18N.Other.ENCiso_8859_4\",\n        \"I18N.Other.CP28595\",\n        \"I18N.Other.ENCiso_8859_5\",\n        \"I18N.Other.ISCIIEncoding\",\n        \"I18N.Other.CP57002\",\n        \"I18N.Other.CP57003\",\n        \"I18N.Other.CP57004\",\n        \"I18N.Other.CP57005\",\n        \"I18N.Other.CP57006\",\n        \"I18N.Other.CP57007\",\n        \"I18N.Other.CP57008\",\n        \"I18N.Other.CP57009\",\n        \"I18N.Other.CP57010\",\n        \"I18N.Other.CP57011\",\n        \"I18N.Other.ENCx_iscii_de\",\n        \"I18N.Other.ENCx_iscii_be\",\n        \"I18N.Other.ENCx_iscii_ta\",\n        \"I18N.Other.ENCx_iscii_te\",\n        \"I18N.Other.ENCx_iscii_as\",\n        \"I18N.Other.ENCx_iscii_or\",\n        \"I18N.Other.ENCx_iscii_ka\",\n        \"I18N.Other.ENCx_iscii_ma\",\n        \"I18N.Other.ENCx_iscii_gu\",\n        \"I18N.Other.ENCx_iscii_pa\",\n        \"I18N.Other.CP874\",\n        \"I18N.Other.ENCwindows_874\",\n        \"I18N.Rare.CP1026\",\n        \"I18N.Rare.ENCibm1026\",\n        \"I18N.Rare.CP1047\",\n        \"I18N.Rare.ENCibm1047\",\n        \"I18N.Rare.CP1140\",\n        \"I18N.Rare.ENCibm01140\",\n        \"I18N.Rare.CP1141\",\n        \"I18N.Rare.ENCibm01141\",\n        \"I18N.Rare.CP1142\",\n        \"I18N.Rare.ENCibm01142\",\n        \"I18N.Rare.CP1143\",\n        \"I18N.Rare.ENCibm01143\",\n        \"I18N.Rare.CP1144\",\n        \"I18N.Rare.ENCibm1144\",\n        \"I18N.Rare.CP1145\",\n        \"I18N.Rare.ENCibm1145\",\n        \"I18N.Rare.CP1146\",\n        \"I18N.Rare.ENCibm1146\",\n        \"I18N.Rare.CP1147\",\n        \"I18N.Rare.ENCibm1147\",\n        \"I18N.Rare.CP1148\",\n        \"I18N.Rare.ENCibm1148\",\n        \"I18N.Rare.CP1149\",\n        \"I18N.Rare.ENCibm1149\",\n        \"I18N.Rare.CP20273\",\n        \"I18N.Rare.ENCibm273\",\n        \"I18N.Rare.CP20277\",\n        \"I18N.Rare.ENCibm277\",\n        \"I18N.Rare.CP20278\",\n        \"I18N.Rare.ENCibm278\",\n        \"I18N.Rare.CP20280\",\n        \"I18N.Rare.ENCibm280\",\n        \"I18N.Rare.CP20284\",\n        \"I18N.Rare.ENCibm284\",\n        \"I18N.Rare.CP20285\",\n        \"I18N.Rare.ENCibm285\",\n        \"I18N.Rare.CP20290\",\n        \"I18N.Rare.ENCibm290\",\n        \"I18N.Rare.CP20297\",\n        \"I18N.Rare.ENCibm297\",\n        \"I18N.Rare.CP20420\",\n        \"I18N.Rare.ENCibm420\",\n        \"I18N.Rare.CP20424\",\n        \"I18N.Rare.ENCibm424\",\n        \"I18N.Rare.CP20871\",\n        \"I18N.Rare.ENCibm871\",\n        \"I18N.Rare.CP21025\",\n        \"I18N.Rare.ENCibm1025\",\n        \"I18N.Rare.CP37\",\n        \"I18N.Rare.ENCibm037\",\n        \"I18N.Rare.CP500\",\n        \"I18N.Rare.ENCibm500\",\n        \"I18N.Rare.CP708\",\n        \"I18N.Rare.ENCasmo_708\",\n        \"I18N.Rare.CP852\",\n        \"I18N.Rare.ENCibm852\",\n        \"I18N.Rare.CP855\",\n        \"I18N.Rare.ENCibm855\",\n        \"I18N.Rare.CP857\",\n        \"I18N.Rare.ENCibm857\",\n        \"I18N.Rare.CP858\",\n        \"I18N.Rare.ENCibm00858\",\n        \"I18N.Rare.CP862\",\n        \"I18N.Rare.ENCibm862\",\n        \"I18N.Rare.CP864\",\n        \"I18N.Rare.ENCibm864\",\n        \"I18N.Rare.CP866\",\n        \"I18N.Rare.ENCibm866\",\n        \"I18N.Rare.CP869\",\n        \"I18N.Rare.ENCibm869\",\n        \"I18N.Rare.CP870\",\n        \"I18N.Rare.ENCibm870\",\n        \"I18N.Rare.CP875\",\n        \"I18N.Rare.ENCibm875\",\n        \"I18N.West.CP10000\",\n        \"I18N.West.ENCmacintosh\",\n        \"I18N.West.CP10079\",\n        \"I18N.West.ENCx_mac_icelandic\",\n        \"I18N.West.CP1250\",\n        \"I18N.West.ENCwindows_1250\",\n        \"I18N.West.CP1252\",\n        \"I18N.West.ENCwindows_1252\",\n        \"I18N.West.CP1253\",\n        \"I18N.West.ENCwindows_1253\",\n        \"I18N.West.CP28592\",\n        \"I18N.West.ENCiso_8859_2\",\n        \"I18N.West.CP28593\",\n        \"I18N.West.ENCiso_8859_3\",\n        \"I18N.West.CP28597\",\n        \"I18N.West.ENCiso_8859_7\",\n        \"I18N.West.CP28605\",\n        \"I18N.West.ENCiso_8859_15\",\n        \"I18N.West.CP437\",\n        \"I18N.West.ENCibm437\",\n        \"I18N.West.CP850\",\n        \"I18N.West.ENCibm850\",\n        \"I18N.West.CP860\",\n        \"I18N.West.ENCibm860\",\n        \"I18N.West.CP861\",\n        \"I18N.West.ENCibm861\",\n        \"I18N.West.CP863\",\n        \"I18N.West.ENCibm863\",\n        \"I18N.West.CP865\",\n        \"I18N.West.ENCibm865\"\n    };\n\t\n\tstatic Dictionary<string, string> aliases;\n\tpublic static string GetAlias (string name)\n\t{\n\t\tif (aliases == null)\n\t\t\tBuildHash ();\n\t\tstring v;\n\t\taliases.TryGetValue (name, out v);\n\t\treturn v;\n\t}\n\tstatic void BuildHash ()\n\t{\n\t\taliases = new Dictionary<string, string> (StringComparer.OrdinalIgnoreCase);\n\t\taliases.Add (\"arabic\", \"iso_8859_6\");\n\t\taliases.Add (\"csISOLatinArabic\", \"iso_8859_6\");\n\t\taliases.Add (\"ECMA_114\", \"iso_8859_6\");\n\t\taliases.Add (\"ISO_8859_6:1987\", \"iso_8859_6\");\n\t\taliases.Add (\"iso_ir_127\", \"iso_8859_6\");\n\t\taliases.Add (\"cp1256\" ,\"windows_1256\");\n\t\taliases.Add (\"csISOLatin4\", \"iso_8859_4\");\n\t\taliases.Add (\"ISO_8859_4:1988\", \"iso_8859_4\");\n\t\taliases.Add (\"iso_ir_110\", \"iso_8859_4\");\n\t\taliases.Add (\"l4\", \"iso_8859_4\");\n\t\taliases.Add (\"latin4\", \"iso_8859_4\");\n\t\taliases.Add (\"cp852\" ,\"ibm852\");\n\t\taliases.Add (\"csISOLatin2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_8859_2:1987\", \"iso_8859_2\");\n\t\taliases.Add (\"iso8859_2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_ir_101\", \"iso_8859_2\");\n\t\taliases.Add (\"l2\", \"iso_8859_2\");\n\t\taliases.Add (\"latin2\", \"iso_8859_2\");\n\t\taliases.Add (\"x-cp1250\", \"windows_1250\");\n\t\taliases.Add (\"chinese\", \"gb2312\");\n\t\taliases.Add (\"CN-GB\", \"gb2312\");\n\t\taliases.Add (\"csGB2312\", \"gb2312\");\n\t\taliases.Add (\"csGB231280\", \"gb2312\");\n\t\taliases.Add (\"csISO58GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB_2312_80\", \"gb2312\");\n\t\taliases.Add (\"GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB2312_80\", \"gb2312\");\n", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "length": 545, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "2332b1a0569df7051e4f8442139c2dbbdf7b27bf1ef7cd16", "pred": "```\n        aliases.Add (\"cp936\",\"gbk\");\n        aliases.Add (\"csGBK\", \"gbk\");\n        aliases.Add (\"csISO58GBK\", \"gbk\");\n        aliases.Add (\"GBK\", \"gbk\");\n        aliases.Add (\"cp950\",\"big5\");\n        aliases.Add"}
{"prompt": "Please complete the code given below. \n\"\"\"Tools for parsing a regular expression into a Pattern.\"\"\"\nimport collections\nimport string\nimport charsource\nimport pattern as p\n# Characters that represent themselves in a regular expression.\n# TODO(jasonpr): Handle $ and ^ specially at edges of regex.\n_CHAR_LITERALS = string.ascii_letters + string.digits + '!\"#$%&\\',-/:;<=>@^_`~]} \\t\\n\\r'\n# Characters that represent themselves inside a square-bracket expression.\n_GROUP_CHARS = string.ascii_letters + string.digits + '!\"#$%&\\'()*+,-./:;<=>?@[^_`{|}~'\n# Characters that represent themselves when escaped with a backslash.\n_IDENTIY_ESCAPES = r'.[\\()*+?{|'\n# Characters that represent a character class when escaped with a backslash.\n_CHARACTER_CLASSES = {\n    'd': string.digits,\n    'w': string.ascii_letters + string.digits + '_',\n    'h': string.hexdigits,\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    's': string.whitespace,\n    }\n_BRACKET_CHARACTER_CLASSES = {\n    'alnum': set(string.ascii_letters + string.digits),\n    'alpha': set(string.ascii_letters),\n    'digit': set(string.digits),\n    'lower': set(string.ascii_lowercase),\n    'print': set(string.printable),\n    'punct': set(string.punctuation),\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    'space': set(string.whitespace),\n    'upper': set(string.ascii_uppercase),\n    'xdigit': set(string.hexdigits),\n    }\ndef parse_regex(regex_string):\n    \"\"\"Convert a regular expression string into a Pattern.\"\"\"\n    return _parse_regex(charsource.GetPutSource(regex_string))\n# The following _parse_* methods form a recursive descent parser\n# that respect the order of operations in a regular expression.\ndef _parse_regex(source):\n    \"\"\"Parse any regex into a Pattern.\"\"\"\n    return _parse_alternation(source)\ndef _parse_alternation(source):\n    \"\"\"Parse an alternation expression, like 'ab|cd|ef'.\"\"\"\n    parts = []\n    # Act as though the last character was a '|', so we get the\n    # initial element of the alternation.\n    last_char = '|'\n    while last_char == '|':\n        parts.append(_parse_concatenation(source))\n        last_char = source.get()\n    # Put back the non-alternation character.\n    source.put(last_char)\n    return p.Or(*parts)\ndef _parse_concatenation(source):\n    \"\"\"Parse a concatenation expression, like 'abc' or 'a(b|c)d*'.\"\"\"\n    parts = []\n    duplication = _parse_duplication(source)\n    # If we're expecting a concatenation, there MUST be at least\n    # one (first) element!\n    assert duplication\n    while duplication:\n        parts.append(duplication)\n        duplication = _parse_duplication(source)\n    return p.Sequence(*parts)\ndef _parse_duplication(source):\n    \"\"\"Parse a duplication expression, like 'a*' or '(a|b){3,5}'.\"\"\"\n    duplicated = _parse_parenthesization(source)\n    if not duplicated:\n        return None\n    duplicator = source.get()\n    if duplicator == '?':\n        return p.Maybe(duplicated)\n    elif duplicator == '*':\n        return p.Star(duplicated)\n    elif duplicator == '+':\n        return p.Plus(duplicated)\n    elif duplicator == '{':\n        min_repeats = _parse_positive_int(source)\n        range_continuation = source.get()\n        # We will ultimately expect a closing curly brace, but\n        # we might see a comma and a max repeats value, first.\n        if range_continuation == ',':\n            max_repeats = _parse_positive_int(source)\n            range_continuation = source.get()\n        else:\n            max_repeats = min_repeats\n        if range_continuation != '}':\n            raise ValueError('Expected \"}\", but got \"%s\".' %\n                             range_continuation)\n        return p.Repeat(duplicated, min_repeats, max_repeats)\n    else:\n        source.put(duplicator)\n        return duplicated\ndef _parse_parenthesization(source):\n    \"\"\"Parse a parenthesization pattern, like '(a|b)' or '[ab]' or 'a'.\n    Note that '[ab]' is a parenthesization, since it is equivalent\n    to '([ab])'.  Similarly, 'a' is equivalent to '(a)'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '(':\n        enclosed_regex = _parse_regex(source)\n        close_paren = source.get()\n        assert close_paren == ')'\n        return enclosed_regex\n    # Otherwise, this must just be a group.  (Groups have just as\n    # tight of binding as a parenthesization.)\n    source.put(first_char)\n    return _parse_group(source)\ndef _parse_group(source):\n    \"\"\"Parse a group pattern, like '[abc]' or 'a'.\n    Note that 'a' is a group, since 'a' is equivalent to '[a]'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '[':\n        second_char = source.get()\n        if second_char == '^':\n            negating = True\n        else:\n            source.put(second_char)\n            negating = False\n        group_chars = _parse_group_chars(source)\n        result = p.Selection(group_chars, negating)\n        close_brace = source.get()\n        assert close_brace == ']'\n        return result\n    # Otherwise, it's a single normal character.\n    source.put(first_char)\n    return _parse_atom(source)\ndef _parse_group_chars(source):\n    \"\"\"Parse the characters from a group specification.\n    This is just a string of characters allowable in a group specification.\n    For example, a valid parse is 'aA1.?', since '[aA1.?]' is a valid group.\n    \"\"\"\n    chars = set()\n    while True:\n        range_chars = _parse_group_range(source)\n        if range_chars:\n            for char in range_chars:\n                chars.add(char)\n            continue\n        char_class = _parse_char_class(source)\n        if char_class:\n            chars |= char_class\n            continue\n        char = source.get()\n        if not char:\n            raise ValueError('Unexpected end of stream.')\n        if char not in _GROUP_CHARS:\n            source.put(char)\n            break\n        chars.add(char)\n    return ''.join(chars)\ndef _parse_atom(source):\n    \"\"\"Parse a single regex atom.\n    An atom is a period ('.'), a character literal, or an escape sequence.\n    \"\"\"\n    char = source.get()\n    if not char:\n        # For good measure, put the EOF back on!\n        # This doesn't really do anything, since the source will\n        # generate EOFs forever.\n        source.put(char)\n        return None\n    elif char == '.':\n        return p.Anything()\n    elif char in _CHAR_LITERALS:\n        return p.String(char)\n    elif char == '\\\\':\n        escaped = source.get()\n        if escaped in _IDENTIY_ESCAPES:\n            return p.String(escaped)\n        elif escaped in _CHARACTER_CLASSES:\n            return p.Selection(_CHARACTER_CLASSES[escaped])\n        else:\n            raise ValueError('Unexpected escape sequence, \\\\%s.', escaped)\n    else:\n        source.put(char)\n        return None\ndef _parse_positive_int(source):\n    \"\"\"Parse a positive integer.\n    That is, parse a sequence of one or more digits.\n    \"\"\"\n    digits = []\n    next_char = source.get()\n    assert next_char and next_char in string.digits\n    while next_char and next_char in string.digits:\n        digits.append(next_char)\n        next_char = source.get()\n    source.put(next_char)\n    return int(''.join(digits))\ndef _parse_group_range(source):\n    \"\"\"Parse a three-character group range expression.\n    Return the set of characters represented by the range.\n    For example, parsing the expression 'c-e' from the source returns\n    set(['c', 'd', 'e']).\n    \"\"\"\n    start = source.get()\n    if start not in _GROUP_CHARS:\n        source.put(start)\n        return None\n    middle = source.get()\n    if middle != '-':\n        source.put(middle)\n        source.put(start)\n        return None\n    end = source.get()\n    if end not in _GROUP_CHARS:\n        source.put(end)\n        source.put(middle)\n        source.put(start)\n        return None\n    range_chars = set()\n    for ascii_value in range(ord(start), ord(end) + 1):\n        range_chars.add(chr(ascii_value))\n    return range_chars\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\nNext line of code:\n", "input": "", "context": "\"\"\"Tools for parsing a regular expression into a Pattern.\"\"\"\nimport collections\nimport string\nimport charsource\nimport pattern as p\n# Characters that represent themselves in a regular expression.\n# TODO(jasonpr): Handle $ and ^ specially at edges of regex.\n_CHAR_LITERALS = string.ascii_letters + string.digits + '!\"#$%&\\',-/:;<=>@^_`~]} \\t\\n\\r'\n# Characters that represent themselves inside a square-bracket expression.\n_GROUP_CHARS = string.ascii_letters + string.digits + '!\"#$%&\\'()*+,-./:;<=>?@[^_`{|}~'\n# Characters that represent themselves when escaped with a backslash.\n_IDENTIY_ESCAPES = r'.[\\()*+?{|'\n# Characters that represent a character class when escaped with a backslash.\n_CHARACTER_CLASSES = {\n    'd': string.digits,\n    'w': string.ascii_letters + string.digits + '_',\n    'h': string.hexdigits,\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    's': string.whitespace,\n    }\n_BRACKET_CHARACTER_CLASSES = {\n    'alnum': set(string.ascii_letters + string.digits),\n    'alpha': set(string.ascii_letters),\n    'digit': set(string.digits),\n    'lower': set(string.ascii_lowercase),\n    'print': set(string.printable),\n    'punct': set(string.punctuation),\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    'space': set(string.whitespace),\n    'upper': set(string.ascii_uppercase),\n    'xdigit': set(string.hexdigits),\n    }\ndef parse_regex(regex_string):\n    \"\"\"Convert a regular expression string into a Pattern.\"\"\"\n    return _parse_regex(charsource.GetPutSource(regex_string))\n# The following _parse_* methods form a recursive descent parser\n# that respect the order of operations in a regular expression.\ndef _parse_regex(source):\n    \"\"\"Parse any regex into a Pattern.\"\"\"\n    return _parse_alternation(source)\ndef _parse_alternation(source):\n    \"\"\"Parse an alternation expression, like 'ab|cd|ef'.\"\"\"\n    parts = []\n    # Act as though the last character was a '|', so we get the\n    # initial element of the alternation.\n    last_char = '|'\n    while last_char == '|':\n        parts.append(_parse_concatenation(source))\n        last_char = source.get()\n    # Put back the non-alternation character.\n    source.put(last_char)\n    return p.Or(*parts)\ndef _parse_concatenation(source):\n    \"\"\"Parse a concatenation expression, like 'abc' or 'a(b|c)d*'.\"\"\"\n    parts = []\n    duplication = _parse_duplication(source)\n    # If we're expecting a concatenation, there MUST be at least\n    # one (first) element!\n    assert duplication\n    while duplication:\n        parts.append(duplication)\n        duplication = _parse_duplication(source)\n    return p.Sequence(*parts)\ndef _parse_duplication(source):\n    \"\"\"Parse a duplication expression, like 'a*' or '(a|b){3,5}'.\"\"\"\n    duplicated = _parse_parenthesization(source)\n    if not duplicated:\n        return None\n    duplicator = source.get()\n    if duplicator == '?':\n        return p.Maybe(duplicated)\n    elif duplicator == '*':\n        return p.Star(duplicated)\n    elif duplicator == '+':\n        return p.Plus(duplicated)\n    elif duplicator == '{':\n        min_repeats = _parse_positive_int(source)\n        range_continuation = source.get()\n        # We will ultimately expect a closing curly brace, but\n        # we might see a comma and a max repeats value, first.\n        if range_continuation == ',':\n            max_repeats = _parse_positive_int(source)\n            range_continuation = source.get()\n        else:\n            max_repeats = min_repeats\n        if range_continuation != '}':\n            raise ValueError('Expected \"}\", but got \"%s\".' %\n                             range_continuation)\n        return p.Repeat(duplicated, min_repeats, max_repeats)\n    else:\n        source.put(duplicator)\n        return duplicated\ndef _parse_parenthesization(source):\n    \"\"\"Parse a parenthesization pattern, like '(a|b)' or '[ab]' or 'a'.\n    Note that '[ab]' is a parenthesization, since it is equivalent\n    to '([ab])'.  Similarly, 'a' is equivalent to '(a)'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '(':\n        enclosed_regex = _parse_regex(source)\n        close_paren = source.get()\n        assert close_paren == ')'\n        return enclosed_regex\n    # Otherwise, this must just be a group.  (Groups have just as\n    # tight of binding as a parenthesization.)\n    source.put(first_char)\n    return _parse_group(source)\ndef _parse_group(source):\n    \"\"\"Parse a group pattern, like '[abc]' or 'a'.\n    Note that 'a' is a group, since 'a' is equivalent to '[a]'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '[':\n        second_char = source.get()\n        if second_char == '^':\n            negating = True\n        else:\n            source.put(second_char)\n            negating = False\n        group_chars = _parse_group_chars(source)\n        result = p.Selection(group_chars, negating)\n        close_brace = source.get()\n        assert close_brace == ']'\n        return result\n    # Otherwise, it's a single normal character.\n    source.put(first_char)\n    return _parse_atom(source)\ndef _parse_group_chars(source):\n    \"\"\"Parse the characters from a group specification.\n    This is just a string of characters allowable in a group specification.\n    For example, a valid parse is 'aA1.?', since '[aA1.?]' is a valid group.\n    \"\"\"\n    chars = set()\n    while True:\n        range_chars = _parse_group_range(source)\n        if range_chars:\n            for char in range_chars:\n                chars.add(char)\n            continue\n        char_class = _parse_char_class(source)\n        if char_class:\n            chars |= char_class\n            continue\n        char = source.get()\n        if not char:\n            raise ValueError('Unexpected end of stream.')\n        if char not in _GROUP_CHARS:\n            source.put(char)\n            break\n        chars.add(char)\n    return ''.join(chars)\ndef _parse_atom(source):\n    \"\"\"Parse a single regex atom.\n    An atom is a period ('.'), a character literal, or an escape sequence.\n    \"\"\"\n    char = source.get()\n    if not char:\n        # For good measure, put the EOF back on!\n        # This doesn't really do anything, since the source will\n        # generate EOFs forever.\n        source.put(char)\n        return None\n    elif char == '.':\n        return p.Anything()\n    elif char in _CHAR_LITERALS:\n        return p.String(char)\n    elif char == '\\\\':\n        escaped = source.get()\n        if escaped in _IDENTIY_ESCAPES:\n            return p.String(escaped)\n        elif escaped in _CHARACTER_CLASSES:\n            return p.Selection(_CHARACTER_CLASSES[escaped])\n        else:\n            raise ValueError('Unexpected escape sequence, \\\\%s.', escaped)\n    else:\n        source.put(char)\n        return None\ndef _parse_positive_int(source):\n    \"\"\"Parse a positive integer.\n    That is, parse a sequence of one or more digits.\n    \"\"\"\n    digits = []\n    next_char = source.get()\n    assert next_char and next_char in string.digits\n    while next_char and next_char in string.digits:\n        digits.append(next_char)\n        next_char = source.get()\n    source.put(next_char)\n    return int(''.join(digits))\ndef _parse_group_range(source):\n    \"\"\"Parse a three-character group range expression.\n    Return the set of characters represented by the range.\n    For example, parsing the expression 'c-e' from the source returns\n    set(['c', 'd', 'e']).\n    \"\"\"\n    start = source.get()\n    if start not in _GROUP_CHARS:\n        source.put(start)\n        return None\n    middle = source.get()\n    if middle != '-':\n        source.put(middle)\n        source.put(start)\n        return None\n    end = source.get()\n    if end not in _GROUP_CHARS:\n        source.put(end)\n        source.put(middle)\n        source.put(start)\n        return None\n    range_chars = set()\n    for ascii_value in range(ord(start), ord(end) + 1):\n        range_chars.add(chr(ascii_value))\n    return range_chars\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\n", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "length": 850, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "da4a2050450c0e6dbb46728a24c2681051dcf60db99aed6b", "pred": "```\n        if source.get() == '[' + class_name:\n            return set(class_contents)\n```\nThis line of code checks if the next character in the source is the character '[' followed by the class name. If it is, it returns the set of characters represented by that class. If not, it continues to"}
{"prompt": "Please complete the code given below. \n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov  8 14:27:22 2016\n@author: Viktor\n\"\"\"\nimport numpy as np\nfrom sklearn.datasets import fetch_mldata\nfrom matplotlib import pyplot as plt\nfrom skimage.io import imread\nfrom skimage.io import imshow\nfrom skimage.morphology import opening, closing\nfrom scipy import ndimage\nfrom sklearn.neighbors import KNeighborsClassifier\n#ucitavanje MNIST dataseta\nmnist = fetch_mldata('MNIST original')\nprint(mnist.data.shape)\nprint(mnist.target.shape)\nprint(np.unique(mnist.target))\nimg = 255-mnist.data[12345]\nimg = img.reshape(28,28)\nplt.imshow(-img, cmap='Greys')\n#iscitavanje dataseta i smestanje u matricu radi lakseg pristupa\nnumbers = [0]*10\nnumbers[0] = mnist['data'][np.where(mnist['target'] == 0.)[0]]\nnumbers[1] = mnist['data'][np.where(mnist['target'] == 1.)[0]]\nnumbers[2] = mnist['data'][np.where(mnist['target'] == 2.)[0]]\nnumbers[3] = mnist['data'][np.where(mnist['target'] == 3.)[0]]\nnumbers[4] = mnist['data'][np.where(mnist['target'] == 4.)[0]]\nnumbers[5] = mnist['data'][np.where(mnist['target'] == 5.)[0]]\nnumbers[6] = mnist['data'][np.where(mnist['target'] == 6.)[0]]\nnumbers[7] = mnist['data'][np.where(mnist['target'] == 7.)[0]]\nnumbers[8] = mnist['data'][np.where(mnist['target'] == 8.)[0]]\nnumbers[9] = mnist['data'][np.where(mnist['target'] == 9.)[0]]\ntest = numbers[0][123]\nres = numbers[0][123] == numbers[0][124]\npercent_hit = np.count_nonzero(res) / 784.0\nrepresentative_number = [0]*10\nfor j in range(0,10):\n    representative_number[j] = np.zeros(np.shape(numbers[j][0]), dtype='float')\n    for i in range(0,len(numbers[j])):\n        representative_number[j] = representative_number[j] + numbers[j][i]\n    representative_number[j] = (representative_number[j])/len(numbers[j])\ndef processing(path):\n    img = imread(path)\n    gray = rgb2gray(img)\n    binary = 1 - (gray > 0.5)\n    binary = closing(binary)\n    binary = opening(binary)\n    labeled, nr_objects = ndimage.label(binary)\n    return nr_objects\ndef poklapanje(niz1, niz2):\n    mera_poklapanja = 0.0\n    for i in range(0,len(niz1)):\n        if(niz1[i]==niz2[i]):\n            mera_poklapanja = mera_poklapanja + 1\n            \n    return mera_poklapanja/len(niz1)\n    \ndef ucitavanje(path):\n    image_path = []\n    with open(path) as f:\n        data = f.read()\n        lines = data.split('\\n')\n        for i, line in enumerate(lines):\n            if(i>1):\n                cols = line.split('\\t')\n                if(cols[0]!=''):\n                    image_path.append(cols[0])\n                \n        f.close()\n        \n    return image_path\ndef upis(path,image_path,result):\n    with open(path,'w') as f:\n        f.write('RA 1/2013 Viktor Sanca\\n')\n        f.write('file\\tsum\\n')\n        for i in range(0,len(image_path)):\n            f.write(image_path[i]+'\\t'+str(result[i])+'\\n')\n        \n        f.close()\n    \ndef get_img(image_path):\n    img = imread(image_path)\n    gray = rgb2gray(img)\n    #gray = closing(gray)\n    #gray = opening(gray)\n    #binary = (gray < 0.5)\n    return gray\ndef binarize(img):\n    return img>1\n    \ndef rgb2gray(img_rgb):\n    img_gray = np.ndarray((img_rgb.shape[0], img_rgb.shape[1]))\n    img_gray = 0.8*img_rgb[:, :, 0] + 0.2*img_rgb[:, :, 1] + 1*img_rgb[:, :, 2]\n    img_gray = img_gray.astype('uint8')\n    return img_gray\ndef mark_indices(image):\n    starting_indices = []\n    img = image.reshape(640*480)\n    for i in range(0,(640)*(480-28)):\n        if(img[i]<10 and img[i+27]<10 and img[i+27*(640)]<10 and img[i+27*(640)+27]<10):\n            starting_indices.append(i)\n            \n    return starting_indices\ndef get_image_from_indice(image,start_indice):\n    image28_28 = np.empty((28*28),dtype='uint8')\n    img = image.reshape(640*480)\n    \n    for i in range(0,28):\n        for j in range(0,28):\n            image28_28[28*i+j]=img[start_indice+i*(640)+j]\n    return image28_28\n    \ndef find_number(image28_28):\n    mmx = [0]*10\n    for i in range(0,10):\n        for j in range(0,len(numbers[i])):\n            res = binarize(image28_28) == binarize(numbers[i][j])\n            if(np.count_nonzero(res)>mmx[i]):\n                mmx[i]=np.count_nonzero(res)\n    \n    return max_idx(mmx)\n    \ndef max_idx(lista):\n    mx = max(lista)\n    for i in range(0,len(lista)):\n        if(lista[i]==mx):\n            return i\n            \n    return -1\n    \nimage_path = []\nresult = []\n    \nin_path = 'level-1-mnist-train/level-1-mnist/out.txt'\nout_path = 'level-1-mnist-test/level-1-mnist-test/out.txt'\ntrain_path = 'level-1-mnist-train/level-1-mnist/'\ntest_path = 'level-1-mnist-test/level-1-mnist-test/'\nimage_paths = ucitavanje(out_path)\n#knn = KNeighborsClassifier()\nknn = KNeighborsClassifier(n_neighbors=2000,weights='distance',algorithm='auto',n_jobs=-1)\nknn.fit(mnist.data,mnist.target)\nsuma = [0]*len(image_paths)\nfor i in range(0,len(image_paths)):\n    print('Image'+str(i+1)+'/'+str(len(image_paths)))\n    img = get_img(test_path+image_paths[i])\n    start_indices = mark_indices(img.reshape(640*480))\n    \n    for start_indice in start_indices:\n        img_d = get_image_from_indice(img,start_indice)\n        #nr = find_number(img_d)\n        nr = knn.predict(img_d)\n        suma[i] = suma[i] + nr[0]\n        suma[i] = int(suma[i])\nfor i in range(0,len(suma)):\n    suma[i] = float(suma[i])\n        \nupis(out_path, image_paths, suma)\nimage28_28 = img_d\nmmx = [0]*10\nfor i in range(0,10):\n    for j in range(0,len(numbers[i])):\n        res = image28_28 == numbers[i][j]\n        if(np.count_nonzero(res)>mmx[i]):\n            mmx[i]=np.count_nonzero(res)\n    \ntotal = np.zeros(784, dtype='float')\nfor i in range(0,10):\n    total = total + representative_number[i]\n        \nimg = representative_number[4]\nimg = img.reshape(28,28)\nplt.imshow(img, cmap='Greys')\nNext line of code:\n", "input": "", "context": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov  8 14:27:22 2016\n@author: Viktor\n\"\"\"\nimport numpy as np\nfrom sklearn.datasets import fetch_mldata\nfrom matplotlib import pyplot as plt\nfrom skimage.io import imread\nfrom skimage.io import imshow\nfrom skimage.morphology import opening, closing\nfrom scipy import ndimage\nfrom sklearn.neighbors import KNeighborsClassifier\n#ucitavanje MNIST dataseta\nmnist = fetch_mldata('MNIST original')\nprint(mnist.data.shape)\nprint(mnist.target.shape)\nprint(np.unique(mnist.target))\nimg = 255-mnist.data[12345]\nimg = img.reshape(28,28)\nplt.imshow(-img, cmap='Greys')\n#iscitavanje dataseta i smestanje u matricu radi lakseg pristupa\nnumbers = [0]*10\nnumbers[0] = mnist['data'][np.where(mnist['target'] == 0.)[0]]\nnumbers[1] = mnist['data'][np.where(mnist['target'] == 1.)[0]]\nnumbers[2] = mnist['data'][np.where(mnist['target'] == 2.)[0]]\nnumbers[3] = mnist['data'][np.where(mnist['target'] == 3.)[0]]\nnumbers[4] = mnist['data'][np.where(mnist['target'] == 4.)[0]]\nnumbers[5] = mnist['data'][np.where(mnist['target'] == 5.)[0]]\nnumbers[6] = mnist['data'][np.where(mnist['target'] == 6.)[0]]\nnumbers[7] = mnist['data'][np.where(mnist['target'] == 7.)[0]]\nnumbers[8] = mnist['data'][np.where(mnist['target'] == 8.)[0]]\nnumbers[9] = mnist['data'][np.where(mnist['target'] == 9.)[0]]\ntest = numbers[0][123]\nres = numbers[0][123] == numbers[0][124]\npercent_hit = np.count_nonzero(res) / 784.0\nrepresentative_number = [0]*10\nfor j in range(0,10):\n    representative_number[j] = np.zeros(np.shape(numbers[j][0]), dtype='float')\n    for i in range(0,len(numbers[j])):\n        representative_number[j] = representative_number[j] + numbers[j][i]\n    representative_number[j] = (representative_number[j])/len(numbers[j])\ndef processing(path):\n    img = imread(path)\n    gray = rgb2gray(img)\n    binary = 1 - (gray > 0.5)\n    binary = closing(binary)\n    binary = opening(binary)\n    labeled, nr_objects = ndimage.label(binary)\n    return nr_objects\ndef poklapanje(niz1, niz2):\n    mera_poklapanja = 0.0\n    for i in range(0,len(niz1)):\n        if(niz1[i]==niz2[i]):\n            mera_poklapanja = mera_poklapanja + 1\n            \n    return mera_poklapanja/len(niz1)\n    \ndef ucitavanje(path):\n    image_path = []\n    with open(path) as f:\n        data = f.read()\n        lines = data.split('\\n')\n        for i, line in enumerate(lines):\n            if(i>1):\n                cols = line.split('\\t')\n                if(cols[0]!=''):\n                    image_path.append(cols[0])\n                \n        f.close()\n        \n    return image_path\ndef upis(path,image_path,result):\n    with open(path,'w') as f:\n        f.write('RA 1/2013 Viktor Sanca\\n')\n        f.write('file\\tsum\\n')\n        for i in range(0,len(image_path)):\n            f.write(image_path[i]+'\\t'+str(result[i])+'\\n')\n        \n        f.close()\n    \ndef get_img(image_path):\n    img = imread(image_path)\n    gray = rgb2gray(img)\n    #gray = closing(gray)\n    #gray = opening(gray)\n    #binary = (gray < 0.5)\n    return gray\ndef binarize(img):\n    return img>1\n    \ndef rgb2gray(img_rgb):\n    img_gray = np.ndarray((img_rgb.shape[0], img_rgb.shape[1]))\n    img_gray = 0.8*img_rgb[:, :, 0] + 0.2*img_rgb[:, :, 1] + 1*img_rgb[:, :, 2]\n    img_gray = img_gray.astype('uint8')\n    return img_gray\ndef mark_indices(image):\n    starting_indices = []\n    img = image.reshape(640*480)\n    for i in range(0,(640)*(480-28)):\n        if(img[i]<10 and img[i+27]<10 and img[i+27*(640)]<10 and img[i+27*(640)+27]<10):\n            starting_indices.append(i)\n            \n    return starting_indices\ndef get_image_from_indice(image,start_indice):\n    image28_28 = np.empty((28*28),dtype='uint8')\n    img = image.reshape(640*480)\n    \n    for i in range(0,28):\n        for j in range(0,28):\n            image28_28[28*i+j]=img[start_indice+i*(640)+j]\n    return image28_28\n    \ndef find_number(image28_28):\n    mmx = [0]*10\n    for i in range(0,10):\n        for j in range(0,len(numbers[i])):\n            res = binarize(image28_28) == binarize(numbers[i][j])\n            if(np.count_nonzero(res)>mmx[i]):\n                mmx[i]=np.count_nonzero(res)\n    \n    return max_idx(mmx)\n    \ndef max_idx(lista):\n    mx = max(lista)\n    for i in range(0,len(lista)):\n        if(lista[i]==mx):\n            return i\n            \n    return -1\n    \nimage_path = []\nresult = []\n    \nin_path = 'level-1-mnist-train/level-1-mnist/out.txt'\nout_path = 'level-1-mnist-test/level-1-mnist-test/out.txt'\ntrain_path = 'level-1-mnist-train/level-1-mnist/'\ntest_path = 'level-1-mnist-test/level-1-mnist-test/'\nimage_paths = ucitavanje(out_path)\n#knn = KNeighborsClassifier()\nknn = KNeighborsClassifier(n_neighbors=2000,weights='distance',algorithm='auto',n_jobs=-1)\nknn.fit(mnist.data,mnist.target)\nsuma = [0]*len(image_paths)\nfor i in range(0,len(image_paths)):\n    print('Image'+str(i+1)+'/'+str(len(image_paths)))\n    img = get_img(test_path+image_paths[i])\n    start_indices = mark_indices(img.reshape(640*480))\n    \n    for start_indice in start_indices:\n        img_d = get_image_from_indice(img,start_indice)\n        #nr = find_number(img_d)\n        nr = knn.predict(img_d)\n        suma[i] = suma[i] + nr[0]\n        suma[i] = int(suma[i])\nfor i in range(0,len(suma)):\n    suma[i] = float(suma[i])\n        \nupis(out_path, image_paths, suma)\nimage28_28 = img_d\nmmx = [0]*10\nfor i in range(0,10):\n    for j in range(0,len(numbers[i])):\n        res = image28_28 == numbers[i][j]\n        if(np.count_nonzero(res)>mmx[i]):\n            mmx[i]=np.count_nonzero(res)\n    \ntotal = np.zeros(784, dtype='float')\nfor i in range(0,10):\n    total = total + representative_number[i]\n        \nimg = representative_number[4]\nimg = img.reshape(28,28)\nplt.imshow(img, cmap='Greys')\n", "answers": ["check = numbers[5][123]"], "length": 502, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "3a9e8b1453db3c2f6454e9ee3926124b1bbca244e7f8e637", "pred": "```\n```\nPlease complete the code given below. \n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov  8 14:27:22 2016\n@author: Viktor\n\"\"\"\nimport numpy as np\nfrom sklearn.datasets import fetch_mldata\nfrom matplotlib import pyplot as plt\nfrom"}
{"prompt": "Please complete the code given below. \n/*\n * *************************************************************************************\n *  Copyright (C) 2008 EsperTech, Inc. All rights reserved.                            *\n *  http://esper.codehaus.org                                                          *\n *  http://www.espertech.com                                                           *\n *  ---------------------------------------------------------------------------------- *\n *  The software in this package is published under the terms of the GPL license       *\n *  a copy of which has been included with this distribution in the license.txt file.  *\n * *************************************************************************************\n */\npackage com.espertech.esper.regression.epl;\nimport com.espertech.esper.client.*;\nimport com.espertech.esper.client.soda.*;\nimport com.espertech.esper.support.bean.*;\nimport com.espertech.esper.support.client.SupportConfigFactory;\nimport com.espertech.esper.support.util.SupportUpdateListener;\nimport com.espertech.esper.util.SerializableObjectCopier;\nimport junit.framework.TestCase;\npublic class TestSubselectIn extends TestCase\n{\n    private EPServiceProvider epService;\n    private SupportUpdateListener listener;\n    public void setUp()\n    {\n        Configuration config = SupportConfigFactory.getConfiguration();\n        config.addEventType(\"S0\", SupportBean_S0.class);\n        config.addEventType(\"S1\", SupportBean_S1.class);\n        config.addEventType(\"S2\", SupportBean_S2.class);\n        epService = EPServiceProviderManager.getDefaultProvider(config);\n        epService.initialize();\n        listener = new SupportUpdateListener();\n    }\n    public void testInSelect()\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    public void testInSelectOM() throws Exception\n    {\n        EPStatementObjectModel subquery = new EPStatementObjectModel();\n        subquery.setSelectClause(SelectClause.create(\"id\"));\n        subquery.setFromClause(FromClause.create(FilterStream.create(\"S1\").addView(View.create(\"win\", \"length\", Expressions.constant(1000)))));\n        EPStatementObjectModel model = new EPStatementObjectModel();\n        model.setFromClause(FromClause.create(FilterStream.create(\"S0\")));\n        model.setSelectClause(SelectClause.create().add(Expressions.subqueryIn(\"id\", subquery), \"value\"));\n        model = (EPStatementObjectModel) SerializableObjectCopier.copy(model);\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        assertEquals(stmtText, model.toEPL());\n        EPStatement stmt = epService.getEPAdministrator().create(model);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    public void testInSelectCompile() throws Exception\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatementObjectModel model = epService.getEPAdministrator().compileEPL(stmtText);\n        model = (EPStatementObjectModel) SerializableObjectCopier.copy(model);\n        assertEquals(stmtText, model.toEPL());\n        EPStatement stmt = epService.getEPAdministrator().create(model);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    private void runTestInSelect()\n    {\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInSelectWhere()\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000) where id > 0) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInSelectWhereExpressions()\n    {\n        String stmtText = \"select 3*id in (select 2*id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(6));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInWildcard()\n    {\n        epService.getEPAdministrator().getConfiguration().addEventType(\"ArrayBean\", SupportBeanArrayCollMap.class);\n        String stmtText = \"select s0.anyObject in (select * from S1.win:length(1000)) as value from ArrayBean s0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        SupportBean_S1 s1 = new SupportBean_S1(100);\n        SupportBeanArrayCollMap arrayBean = new SupportBeanArrayCollMap(s1);\n        epService.getEPRuntime().sendEvent(s1);\n        epService.getEPRuntime().sendEvent(arrayBean);\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        SupportBean_S2 s2 = new SupportBean_S2(100);\n        arrayBean.setAnyObject(s2);\n        epService.getEPRuntime().sendEvent(s2);\n        epService.getEPRuntime().sendEvent(arrayBean);\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInNullable()\n    {\n        String stmtText = \"select id from S0 as s0 where p00 in (select p10 from S1.win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(1, \"a\"));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2, null));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1, \"A\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(3, null));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4, \"A\"));\n        assertEquals(4, listener.assertOneGetNewAndReset().get(\"id\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-2, null));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5, null));\n        assertFalse(listener.isInvoked());\n    }\n    public void testInNullableCoercion()\n    {\n        String stmtText = \"select longBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where longBoxed in \" +\n                          \"(select intBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"A\", 0, 0L);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", 0, 0L);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", 99, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, 99l);\n        assertEquals(99L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", 98, null);\n        sendBean(\"A\", null, 98l);\n        assertEquals(98L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testInNullRow()\n    {\n        String stmtText = \"select intBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where intBoxed in \" +\n                          \"(select longBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"B\", 1, 1l);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertEquals(1, listener.assertOneGetNewAndReset().get(\"intBoxed\"));\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertEquals(1, listener.assertOneGetNewAndReset().get(\"intBoxed\"));\n    }\n    public void testNotInNullRow()\n    {\n        String stmtText = \"select intBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where intBoxed not in \" +\n                          \"(select longBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"B\", 1, 1l);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertFalse(listener.isInvoked());\n    }\n    public void testNotInSelect()\n    {\n        String stmtText = \"select not id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testNotInNullableCoercion()\n    {\n        String stmtText = \"select longBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where longBoxed not in \" +\n                          \"(select intBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"A\", null, null);\n        assertEquals(null, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", 1, 1L);\n        assertFalse(listener.isInvoked());\nNext line of code:\n", "input": "", "context": "/*\n * *************************************************************************************\n *  Copyright (C) 2008 EsperTech, Inc. All rights reserved.                            *\n *  http://esper.codehaus.org                                                          *\n *  http://www.espertech.com                                                           *\n *  ---------------------------------------------------------------------------------- *\n *  The software in this package is published under the terms of the GPL license       *\n *  a copy of which has been included with this distribution in the license.txt file.  *\n * *************************************************************************************\n */\npackage com.espertech.esper.regression.epl;\nimport com.espertech.esper.client.*;\nimport com.espertech.esper.client.soda.*;\nimport com.espertech.esper.support.bean.*;\nimport com.espertech.esper.support.client.SupportConfigFactory;\nimport com.espertech.esper.support.util.SupportUpdateListener;\nimport com.espertech.esper.util.SerializableObjectCopier;\nimport junit.framework.TestCase;\npublic class TestSubselectIn extends TestCase\n{\n    private EPServiceProvider epService;\n    private SupportUpdateListener listener;\n    public void setUp()\n    {\n        Configuration config = SupportConfigFactory.getConfiguration();\n        config.addEventType(\"S0\", SupportBean_S0.class);\n        config.addEventType(\"S1\", SupportBean_S1.class);\n        config.addEventType(\"S2\", SupportBean_S2.class);\n        epService = EPServiceProviderManager.getDefaultProvider(config);\n        epService.initialize();\n        listener = new SupportUpdateListener();\n    }\n    public void testInSelect()\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    public void testInSelectOM() throws Exception\n    {\n        EPStatementObjectModel subquery = new EPStatementObjectModel();\n        subquery.setSelectClause(SelectClause.create(\"id\"));\n        subquery.setFromClause(FromClause.create(FilterStream.create(\"S1\").addView(View.create(\"win\", \"length\", Expressions.constant(1000)))));\n        EPStatementObjectModel model = new EPStatementObjectModel();\n        model.setFromClause(FromClause.create(FilterStream.create(\"S0\")));\n        model.setSelectClause(SelectClause.create().add(Expressions.subqueryIn(\"id\", subquery), \"value\"));\n        model = (EPStatementObjectModel) SerializableObjectCopier.copy(model);\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        assertEquals(stmtText, model.toEPL());\n        EPStatement stmt = epService.getEPAdministrator().create(model);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    public void testInSelectCompile() throws Exception\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatementObjectModel model = epService.getEPAdministrator().compileEPL(stmtText);\n        model = (EPStatementObjectModel) SerializableObjectCopier.copy(model);\n        assertEquals(stmtText, model.toEPL());\n        EPStatement stmt = epService.getEPAdministrator().create(model);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    private void runTestInSelect()\n    {\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInSelectWhere()\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000) where id > 0) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInSelectWhereExpressions()\n    {\n        String stmtText = \"select 3*id in (select 2*id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(6));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInWildcard()\n    {\n        epService.getEPAdministrator().getConfiguration().addEventType(\"ArrayBean\", SupportBeanArrayCollMap.class);\n        String stmtText = \"select s0.anyObject in (select * from S1.win:length(1000)) as value from ArrayBean s0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        SupportBean_S1 s1 = new SupportBean_S1(100);\n        SupportBeanArrayCollMap arrayBean = new SupportBeanArrayCollMap(s1);\n        epService.getEPRuntime().sendEvent(s1);\n        epService.getEPRuntime().sendEvent(arrayBean);\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        SupportBean_S2 s2 = new SupportBean_S2(100);\n        arrayBean.setAnyObject(s2);\n        epService.getEPRuntime().sendEvent(s2);\n        epService.getEPRuntime().sendEvent(arrayBean);\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInNullable()\n    {\n        String stmtText = \"select id from S0 as s0 where p00 in (select p10 from S1.win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(1, \"a\"));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2, null));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1, \"A\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(3, null));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4, \"A\"));\n        assertEquals(4, listener.assertOneGetNewAndReset().get(\"id\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-2, null));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5, null));\n        assertFalse(listener.isInvoked());\n    }\n    public void testInNullableCoercion()\n    {\n        String stmtText = \"select longBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where longBoxed in \" +\n                          \"(select intBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"A\", 0, 0L);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", 0, 0L);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", 99, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, 99l);\n        assertEquals(99L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", 98, null);\n        sendBean(\"A\", null, 98l);\n        assertEquals(98L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testInNullRow()\n    {\n        String stmtText = \"select intBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where intBoxed in \" +\n                          \"(select longBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"B\", 1, 1l);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertEquals(1, listener.assertOneGetNewAndReset().get(\"intBoxed\"));\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertEquals(1, listener.assertOneGetNewAndReset().get(\"intBoxed\"));\n    }\n    public void testNotInNullRow()\n    {\n        String stmtText = \"select intBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where intBoxed not in \" +\n                          \"(select longBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"B\", 1, 1l);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertFalse(listener.isInvoked());\n    }\n    public void testNotInSelect()\n    {\n        String stmtText = \"select not id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testNotInNullableCoercion()\n    {\n        String stmtText = \"select longBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where longBoxed not in \" +\n                          \"(select intBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"A\", null, null);\n        assertEquals(null, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", 1, 1L);\n        assertFalse(listener.isInvoked());\n", "answers": ["        sendBean(\"A\", null, null);"], "length": 756, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "aa15f3d4eeb6f0c28379f41721521940dfe5d3eb6bc898b9", "pred": "        sendBean(\"A\", null, null);\n        assertEquals(null, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", 99, null);\n        sendBean(\"A\", 1, 1L);\n        assertEquals(1L, listener.assertOneGetNewAnd"}
{"prompt": "Please complete the code given below. \npackage net.brokentrain.ftf.ui.gui.dialog;\nimport net.brokentrain.ftf.ui.gui.GUI;\nimport net.brokentrain.ftf.ui.gui.properties.BrowserTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.ConnectionProperties;\nimport net.brokentrain.ftf.ui.gui.properties.PropertyPage;\nimport net.brokentrain.ftf.ui.gui.properties.QueryTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.SystemTrayProperties;\nimport net.brokentrain.ftf.ui.gui.properties.TransferTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.ViewProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ArXivProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.DOIProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleDesktopSearchProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleScholarProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleWebSearchProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PlosJournalsProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PubMedCentralProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PubMedProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ScirusProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ServicesProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.TerrierProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.WebOfKnowledgeProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.YahooWebSearchProperties;\nimport net.brokentrain.ftf.ui.gui.settings.SettingsRegistry;\nimport net.brokentrain.ftf.ui.gui.settings.SettingsSaver;\nimport net.brokentrain.ftf.ui.gui.util.FontUtil;\nimport net.brokentrain.ftf.ui.gui.util.LayoutDataUtil;\nimport net.brokentrain.ftf.ui.gui.util.LayoutUtil;\nimport net.brokentrain.ftf.ui.gui.util.PaintUtil;\nimport net.brokentrain.ftf.ui.gui.util.StringUtil;\nimport net.brokentrain.ftf.ui.gui.util.WidgetUtil;\nimport org.eclipse.jface.dialogs.Dialog;\nimport org.eclipse.jface.dialogs.IDialogConstants;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.KeyAdapter;\nimport org.eclipse.swt.events.KeyEvent;\nimport org.eclipse.swt.events.PaintEvent;\nimport org.eclipse.swt.events.PaintListener;\nimport org.eclipse.swt.events.SelectionAdapter;\nimport org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.graphics.Point;\nimport org.eclipse.swt.graphics.Rectangle;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.Event;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Listener;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.swt.widgets.Tree;\nimport org.eclipse.swt.widgets.TreeItem;\n/* \n * TODO: This entire class could REALLY do with a re-think - since there were\n * few preference pages to think about they were just hard  coded, then it\n * started to grow and grow leading to this mess.  This should probably be made\n * dynamic and just build the *service* preference pages by seeing what is in\n * SettingsRegistry.services rather than hard coding them explicitly :(! This\n * kind of applies to the entire services package that is a sub-package of the\n * properties package, too.\n * NOTE: This is heavily based on RSSOwls code!\n * */\npublic class PreferencesDialog extends Dialog {\n    public static int lastOpenedPropertyPage = 0;\n    private static final int dialogMinWidth = 460;\n    private GUI fetcherGui;\n    private Composite buttonHolder;\n    private Composite contentHolder;\n    private Composite prefTitleHolder;\n    private Label labelImgHolder;\n    private Label labelPrefTitle;\n    private PropertyPage activePropertyPage;\n    private String lastSelectedItemText;\n    private String title;\n    private TreeItem arxiv;\n    private TreeItem browserTab;\n    private TreeItem connection;\n    private TreeItem crawler;\n    private TreeItem doi;\n    private TreeItem google;\n    private TreeItem googleDesktop;\n    private TreeItem googleScholar;\n    private TreeItem plosjournals;\n    private TreeItem pubmed;\n    private TreeItem pubmedCentral;\n    private TreeItem queryTab;\n    private TreeItem scirus;\n    private TreeItem services;\n    private TreeItem systemTray;\n    private TreeItem terrier;\n    private TreeItem transferTab;\n    private TreeItem view;\n    private TreeItem webofknowledge;\n    private TreeItem yahoo;\n    private Tree tree;\n    public PreferencesDialog(Shell parentShell, String dialogTitle,\n            GUI fetcherGui) {\n        super(parentShell);\n        this.title = dialogTitle;\n        this.fetcherGui = fetcherGui;\n        /* Init the PropertyChangeManager */\n        PropertyPage.initPropertyChangeManager(fetcherGui);\n    }\n    // private void createGeneralProps() {\n    // renewPropertyPage(\"General\");\n    // activePropertyPage = new GeneralProperties(contentHolder, fetcherGui);\n    // }\n    // private void createCrawlerProps() {\n    // renewPropertyPage(\"Crawler\");\n    // activePropertyPage = new CrawlerProperties(contentHolder, fetcherGui);\n    // }\n    // private void createBrowserProps() {\n    // renewPropertyPage(\"Browser\");\n    // }\n    @Override\n    protected void buttonPressed(int buttonId) {\n        if (buttonId == IDialogConstants.OK_ID) {\n            saveSettings();\n        }\n        if (activePropertyPage != null) {\n            activePropertyPage.dispose();\n        }\n        super.buttonPressed(buttonId);\n    }\n    @Override\n    protected void configureShell(Shell shell) {\n        shell.setLayout(LayoutUtil.createGridLayout(1, 0, 5));\n        shell.setText(title);\n        shell.setSize(0, 0);\n    }\n    private void createArxivProperties() {\n        renewPropertyPage(\"ArXiv\");\n        activePropertyPage = new ArXivProperties(contentHolder);\n    }\n    private void createBrowserTabProps() {\n        renewPropertyPage(\"Internal Browser\");\n        activePropertyPage = new BrowserTabProperties(contentHolder);\n    }\n    // private void createLogTabProps() {\n    // renewPropertyPage(\"Debug Log\");\n    // activePropertyPage = new LogTabProperties(contentHolder);\n    // }\n    @Override\n    protected Control createButtonBar(Composite parent) {\n        buttonHolder = new Composite(parent, SWT.NONE);\n        buttonHolder.setLayout(LayoutUtil\n                .createGridLayout(2, 0, 0, 5, 5, false));\n        buttonHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_HORIZONTAL, 2));\n        Composite okCancelHolder = new Composite(buttonHolder, SWT.NONE);\n        okCancelHolder.setLayout(LayoutUtil.createGridLayout(2, 0, 5, 5));\n        okCancelHolder.setLayoutData(new GridData(SWT.END, SWT.TOP, false,\n                false));\n        if (GUI.display.getDismissalAlignment() == SWT.RIGHT) {\n            createButton(okCancelHolder, IDialogConstants.CANCEL_ID, \"Cancel\",\n                    false).setFont(FontUtil.dialogFont);\n            createButton(okCancelHolder, IDialogConstants.OK_ID, \"OK\", true)\n                    .setFont(FontUtil.dialogFont);\n        } else {\n            createButton(okCancelHolder, IDialogConstants.OK_ID, \"OK\", true)\n                    .setFont(FontUtil.dialogFont);\n            createButton(okCancelHolder, IDialogConstants.CANCEL_ID, \"Cancel\",\n                    false).setFont(FontUtil.dialogFont);\n        }\n        return buttonHolder;\n    }\n    // private void createStatusTabProps() {\n    // renewPropertyPage(\"Status\");\n    // activePropertyPage = new StatusTabProperties(contentHolder, fetcherGui);\n    // }\n    private void createConnectionProps() {\n        renewPropertyPage(\"Connection\");\n        activePropertyPage = new ConnectionProperties(contentHolder, fetcherGui);\n    }\n    @Override\n    protected Control createDialogArea(Composite parent) {\n        Composite baseComposite = (Composite) super.createDialogArea(parent);\n        baseComposite.setLayout(LayoutUtil.createGridLayout(2, 0, 5, 15, 0,\n                false));\n        baseComposite.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_BOTH, 1));\n        Composite treeHolder = new Composite(baseComposite, SWT.NONE);\n        treeHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_VERTICAL, 1, convertHorizontalDLUsToPixels(140)));\n        treeHolder.setLayout(LayoutUtil.createGridLayout(1, 5, 0));\n        tree = new Tree(treeHolder, SWT.BORDER);\n        tree.setFont(FontUtil.dialogFont);\n        tree.setFocus();\n        tree.setLayoutData(new GridData(GridData.FILL_BOTH));\n        tree.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                handleTreeItemSelect();\n            }\n        });\n        tree.addKeyListener(new KeyAdapter() {\n            @Override\n            public void keyPressed(KeyEvent e) {\n                TreeItem selectedItem = tree.getSelection()[0];\n                if ((e.keyCode == SWT.CR) && (selectedItem.getItemCount() > 0)) {\n                    selectedItem.setExpanded(!selectedItem.getExpanded());\n                }\n            }\n        });\n        tree.addListener(SWT.MouseDoubleClick, new Listener() {\n            public void handleEvent(Event event) {\n                if (tree.getSelectionCount() > 0) {\n                    Rectangle clickedRect = event.getBounds();\n                    Rectangle selectedRect = tree.getSelection()[0].getBounds();\n                    /* Only handle event, if Mouse is over treeitem */\n                    if (selectedRect.contains(clickedRect.x, clickedRect.y)) {\n                        tree.getSelection()[0]\n                                .setExpanded(!tree.getSelection()[0]\n                                        .getExpanded());\n                    }\n                }\n            }\n        });\n        populateTree();\n        contentHolder = new Composite(baseComposite, SWT.NONE);\n        contentHolder.setLayoutData(new GridData(GridData.FILL_BOTH\n                | GridData.VERTICAL_ALIGN_BEGINNING));\n        contentHolder.setLayout(LayoutUtil.createGridLayout(1, 5, 0));\n        prefTitleHolder = new Composite(contentHolder, SWT.NONE);\n        GridLayout prefTitleHolderLayout = new GridLayout(2, false);\n        prefTitleHolderLayout.marginWidth = 1;\n        prefTitleHolderLayout.marginHeight = 2;\n        prefTitleHolderLayout.marginLeft = 4;\n        prefTitleHolder.setLayout(prefTitleHolderLayout);\n        prefTitleHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_HORIZONTAL, 2));\n        prefTitleHolder.setBackground(GUI.display\n                .getSystemColor(SWT.COLOR_WHITE));\n        prefTitleHolder.addPaintListener(new PaintListener() {\n            public void paintControl(PaintEvent e) {\n                e.gc.setForeground(GUI.display\n                        .getSystemColor(SWT.COLOR_DARK_GRAY));\n                Rectangle bounds = prefTitleHolder.getClientArea();\n                bounds.height -= 2;\n                bounds.width -= 1;\n                e.gc.drawRectangle(bounds);\n            }\n        });\n        setTreeSelection(lastOpenedPropertyPage);\n        handleTreeItemSelect();\n        Label seperator = new Label(baseComposite, SWT.HORIZONTAL\n                | SWT.SEPARATOR);\n        seperator.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL,\n                2));\n        if (WidgetUtil.isset(tree.getHorizontalBar())) {\n            tree.getHorizontalBar().setSelection(0);\n        }\n        return contentHolder;\n    }\n    private void createDOIProperties() {\n        renewPropertyPage(\"DOI\");\n        activePropertyPage = new DOIProperties(contentHolder);\n    }\n    private void createGoogleDesktopSearchProperties() {\n        renewPropertyPage(\"Google Desktop Search\");\n        activePropertyPage = new GoogleDesktopSearchProperties(contentHolder);\n    }\n    // private void createCiteSeerProperties() {\n    // renewPropertyPage(\"Cite Seer\");\n    // activePropertyPage = new CiteSeerProperties(contentHolder);\n    // }\n    private void createGoogleScholarProperties() {\n        renewPropertyPage(\"Google Scholar\");\n        activePropertyPage = new GoogleScholarProperties(contentHolder);\n    }\n    private void createGoogleWebSearchProperties() {\n        renewPropertyPage(\"Google Web Search\");\n        activePropertyPage = new GoogleWebSearchProperties(contentHolder);\n    }\n    private void createPlosJournalsProperties() {\n        renewPropertyPage(\"Plos Journals\");\n        activePropertyPage = new PlosJournalsProperties(contentHolder);\n    }\n    private void createPubMedCentralProperties() {\n        renewPropertyPage(\"PubMed Central\");\n        activePropertyPage = new PubMedCentralProperties(contentHolder);\n    }\n    private void createPubMedProperties() {\n        renewPropertyPage(\"PubMed\");\n        activePropertyPage = new PubMedProperties(contentHolder);\n    }\n    private void createQueryTabProps() {\n        renewPropertyPage(\"Queries\");\n        activePropertyPage = new QueryTabProperties(contentHolder);\n    }\n    private void createScirusProperties() {\n        renewPropertyPage(\"Scirus\");\n        activePropertyPage = new ScirusProperties(contentHolder);\n    }\n    private void createServicesProperties() {\n        renewPropertyPage(\"Default Services\");\n        activePropertyPage = new ServicesProperties(contentHolder);\n    }\n    private void createSystemTrayProps() {\n        renewPropertyPage(\"System Tray\");\n        activePropertyPage = new SystemTrayProperties(contentHolder, fetcherGui);\n    }\n    private void createTerrierProperties() {\n        renewPropertyPage(\"Terrier\");\n        activePropertyPage = new TerrierProperties(contentHolder);\n    }\n    private void createTransferTabProps() {\n        renewPropertyPage(\"Transfer\");\n        activePropertyPage = new TransferTabProperties(contentHolder);\n    }\n    private void createViewProps() {\n        renewPropertyPage(\"View\");\n        activePropertyPage = new ViewProperties(contentHolder, fetcherGui);\n    }\n    private void createWebOfKnowledgeProperties() {\n        renewPropertyPage(\"WebOfKnowledge\");\n        activePropertyPage = new WebOfKnowledgeProperties(contentHolder);\n    }\n    private void createYahooProperties() {\n        renewPropertyPage(\"Yahoo Web Search\");\n        activePropertyPage = new YahooWebSearchProperties(contentHolder);\n    }\n    @Override\n    protected int getShellStyle() {\n        int style = SWT.TITLE | SWT.BORDER | SWT.RESIZE | SWT.APPLICATION_MODAL\n                | getDefaultOrientation();\n        return style;\n    }\n    void handleTreeItemSelect() {\n        if (tree.getSelection().length == 0) {\n            return;\n        }\n        if (tree.getSelection()[0].getText().equals(lastSelectedItemText)) {\n            return;\n        }\n        lastSelectedItemText = tree.getSelection()[0].getText();\n        // if (tree.getSelection()[0].getText().equals(\"General\")) {\n        // createGeneralProps();\n        // lastOpenedPropertyPage = 0;\n        // }\n        // if (tree.getSelection()[0].getText().equals(\"Crawler\")) {\n        // createCrawlerProps();\n        // lastOpenedPropertyPage = 23;\n        // }\n        /* Browser */\n        // if (tree.getSelection()[0].getText().equals(\"Browser\")) {\n        // createBrowserProps();\n        // lastOpenedPropertyPage = 1;\n        // }\n        /* Connection */\n        if (tree.getSelection()[0].getText().equals(\"Connection\")) {\n            createConnectionProps();\n            lastOpenedPropertyPage = 2;\n        }\n        /* System Tray */\n        else if (tree.getSelection()[0].getText().equals(\"System Tray\")) {\n            createSystemTrayProps();\n            lastOpenedPropertyPage = 3;\n        }\n        /* View */\n        else if (tree.getSelection()[0].getText().equals(\"View\")) {\n            createViewProps();\n            lastOpenedPropertyPage = 4;\n        }\n        /* Browser Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Internal Browser\")) {\n            createBrowserTabProps();\n            lastOpenedPropertyPage = 5;\n        }\n        /* Log Tab */\n        // else if (tree.getSelection()[0].getText().equals(\"Debug Log\")) {\n        // createLogTabProps();\n        // lastOpenedPropertyPage = 6;\n        // }\n        /* Query Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Queries\")) {\n            createQueryTabProps();\n            lastOpenedPropertyPage = 7;\n        }\n        /* Status Tab */\n        // else if (tree.getSelection()[0].getText().equals(\"Status\")) {\n        // createStatusTabProps();\n        // lastOpenedPropertyPage = 8;\n        // }\n        /* Transfer Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Transfer\")) {\n            createTransferTabProps();\n            lastOpenedPropertyPage = 9;\n        }\n        /* Services */\n        else if (tree.getSelection()[0].getText().equals(\"Services\")) {\n            createServicesProperties();\n            lastOpenedPropertyPage = 10;\n        }\n        /* ArXiv */\n        else if (tree.getSelection()[0].getText().equals(\"ArXiv\")) {\n            createArxivProperties();\n            lastOpenedPropertyPage = 11;\n        }\n        /* CiteSeer */\n        // else if (tree.getSelection()[0].getText().equals(\"Cite Seer\")) {\n        // createCiteSeerProperties();\n        // lastOpenedPropertyPage = 12;\n        // }\n        /* DOI */\n        else if (tree.getSelection()[0].getText().equals(\"DOI\")) {\n            createDOIProperties();\n            lastOpenedPropertyPage = 13;\n        }\n        /* GoogleDesktopSearch */\n        else if (tree.getSelection()[0].getText().equals(\n                \"Google Desktop Search\")) {\n            createGoogleDesktopSearchProperties();\n            lastOpenedPropertyPage = 24;\n        }\n        /* Google */\n        else if (tree.getSelection()[0].getText().equals(\"Google Web Search\")) {\n            createGoogleWebSearchProperties();\n            lastOpenedPropertyPage = 14;\n        }\n        /* GoogleScholar */\n        else if (tree.getSelection()[0].getText().equals(\"Google Scholar\")) {\n            createGoogleScholarProperties();\n            lastOpenedPropertyPage = 15;\n        }\n        /* PlosJournals */\n        else if (tree.getSelection()[0].getText().equals(\"Plos Journals\")) {\n            createPlosJournalsProperties();\n            lastOpenedPropertyPage = 16;\n        }\n        /* PubMed */\n        else if (tree.getSelection()[0].getText().equals(\"PubMed\")) {\n            createPubMedProperties();\n            lastOpenedPropertyPage = 17;\n        }\n        /* PubMedCentral */\n        else if (tree.getSelection()[0].getText().equals(\"PubMed Central\")) {\n            createPubMedCentralProperties();\n            lastOpenedPropertyPage = 18;\n        }\n        /* Scirus */\n        else if (tree.getSelection()[0].getText().equals(\"Scirus\")) {\n            createScirusProperties();\n            lastOpenedPropertyPage = 19;\n        }\n        /* Terrier */\n        else if (tree.getSelection()[0].getText().equals(\"Terrier\")) {\n            createTerrierProperties();\n            lastOpenedPropertyPage = 20;\n        }\n        /* WebOfKnowledge */\n        else if (tree.getSelection()[0].getText().equals(\"Web Of Knowledge\")) {\n            createWebOfKnowledgeProperties();\n            lastOpenedPropertyPage = 21;\n        }\n        /* Yahoo */\n        else if (tree.getSelection()[0].getText().equals(\"Yahoo Web Search\")) {\n            createYahooProperties();\n            lastOpenedPropertyPage = 22;\n        }\n        contentHolder.layout();\n        initializeBounds(false);\n    }\n    @Override\n    protected void initializeBounds() {\n        initializeBounds(true);\n    }\n    protected void initializeBounds(boolean updateLocation) {\n        Point currentSize = getShell().getSize();\n        Point bestSize = getShell().computeSize(\n                convertHorizontalDLUsToPixels(dialogMinWidth), SWT.DEFAULT);\n        Point location = (updateLocation == true) ? getInitialLocation(bestSize)\n                : getShell().getLocation();\n        if (updateLocation && (bestSize.y > currentSize.y)) {\n            getShell()\n                    .setBounds(location.x, location.y, bestSize.x, bestSize.y);\n        } else if (bestSize.y > currentSize.y) {\n            getShell().setSize(bestSize.x, bestSize.y);\n        }\n        getShell().setMinimumSize(bestSize.x, bestSize.y);\n    }\n    void populateTree() {\n        String selectionText = null;\n        if (tree.getSelectionCount() > 0) {\n            selectionText = tree.getSelection()[0].getText();\n        }\n        if (tree.getItemCount() > 0) {\n            tree.removeAll();\n        }\n        /* General properties */\n        // general = new TreeItem(tree, SWT.NONE);\n        // general.setText(\"General\");\n        /* Crawler sub-property */\n        // crawler = new TreeItem(tree, SWT.NONE);\n        // crawler.setText(\"Crawler\");\n        /* Browser sub-property */\n        // browser = new TreeItem(tree, SWT.NONE);\n        // browser.setText(\"Browser\");\n        /* Connection sub-property */\n        connection = new TreeItem(tree, SWT.NONE);\n        connection.setText(\"Connection\");\n        /* System Tray sub-property */\n        if (SettingsRegistry.useSystemTray()) {\n            // if (!WidgetShop.isset(general)) {\n            // general = new TreeItem(tree, SWT.NONE);\n            // general.setText(\"General\");\n            // }\n            systemTray = new TreeItem(tree, SWT.NONE);\n            systemTray.setText(\"System Tray\");\n        }\n        /* View properties */\n        view = new TreeItem(tree, SWT.NONE);\n        view.setText(\"View\");\n        /* Browser tab sub-property */\n        browserTab = new TreeItem(view, SWT.NONE);\n        browserTab.setText(\"Internal Browser\");\n        /* Log tab sub-property */\n        // logTab = new TreeItem(view, SWT.NONE);\n        // logTab.setText(\"Debug Log\");\n        // logTab.setForeground(ColourUtil.gray);\n        /* Status tab sub-property */\n        // statusTab = new TreeItem(view, SWT.NONE);\n        // statusTab.setText(\"Status\");\n        // statusTab.setForeground(ColourUtil.gray);\n        /* Transfer tab sub-property */\n        transferTab = new TreeItem(view, SWT.NONE);\n        transferTab.setText(\"Transfer\");\n        /* Query tab sub-property */\n        queryTab = new TreeItem(view, SWT.NONE);\n        queryTab.setText(\"Queries\");\n        /* Services sub-property */\n        services = new TreeItem(tree, SWT.NONE);\n        services.setText(\"Services\");\n        /* Arxiv sub-property */\n        arxiv = new TreeItem(services, SWT.NONE);\n        arxiv.setText(\"ArXiv\");\n        /* DOI sub-property */\n        doi = new TreeItem(services, SWT.NONE);\n        doi.setText(\"DOI\");\n        /* Cite Seer sub-property */\n        // citeSeer = new TreeItem(services, SWT.NONE);\n        // citeSeer.setText(\"Cite Seer\");\n        /* Google Scholar sub-property */\n        googleDesktop = new TreeItem(services, SWT.NONE);\n        googleDesktop.setText(\"Google Desktop Search\");\n        /* Google Scholar sub-property */\n        google = new TreeItem(services, SWT.NONE);\n        google.setText(\"Google Web Search\");\n        /* Google Scholar sub-property */\n        googleScholar = new TreeItem(services, SWT.NONE);\n        googleScholar.setText(\"Google Scholar\");\n        /* Plos Journals sub-property */\n        plosjournals = new TreeItem(services, SWT.NONE);\n        plosjournals.setText(\"Plos Journals\");\n        /* PubMed sub-property */\n        pubmed = new TreeItem(services, SWT.NONE);\n        pubmed.setText(\"PubMed\");\n        /* PubMed Central sub-property */\n        pubmedCentral = new TreeItem(services, SWT.NONE);\n        pubmedCentral.setText(\"PubMed Central\");\n        /* Scirus sub-property */\n        scirus = new TreeItem(services, SWT.NONE);\n        scirus.setText(\"Scirus\");\n        /* Terrier sub-property */\n        terrier = new TreeItem(services, SWT.NONE);\n        terrier.setText(\"Terrier\");\n        /* WOK sub-property */\n        webofknowledge = new TreeItem(services, SWT.NONE);\n        webofknowledge.setText(\"Web Of Knowledge\");\n        /* Yahoo sub-property */\n        yahoo = new TreeItem(services, SWT.NONE);\n        yahoo.setText(\"Yahoo Web Search\");\n        // if (WidgetShop.isset(general))\n        // general.setExpanded(true);\n        if (WidgetUtil.isset(view)) {\n            view.setExpanded(true);\n        }\n        if (WidgetUtil.isset(services)) {\n            services.setExpanded(true);\n        }\n        if (StringUtil.isset(selectionText)) {\n            restoreSelection(selectionText, tree.getItems());\n        }\n    }\n    private void renewPropertyPage(String title) {\n        if (activePropertyPage != null) {\n            activePropertyPage.updatePropertiesChangeManager();\n            activePropertyPage.dispose();\n        }\n        if (labelPrefTitle == null) {\n            labelPrefTitle = new Label(prefTitleHolder, SWT.LEFT);\n            labelPrefTitle.setBackground(GUI.display\n                    .getSystemColor(SWT.COLOR_WHITE));\n            labelPrefTitle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER,\n                    true, false));\n            labelPrefTitle.setFont(FontUtil.dialogBoldFont);\n        }\n        if (labelImgHolder == null) {\n            labelImgHolder = new Label(prefTitleHolder, SWT.NONE);\n            labelImgHolder.setBackground(GUI.display\n                    .getSystemColor(SWT.COLOR_WHITE));\n            labelImgHolder.setImage(PaintUtil.iconBlueStripes);\n            labelImgHolder.setLayoutData(new GridData(SWT.END, SWT.END, false,\n                    false));\n        }\n        labelPrefTitle.setText(title);\n        labelPrefTitle.update();\n        labelImgHolder.update();\n        prefTitleHolder.layout();\n        contentHolder.layout();\n    }\n    private void restoreSelection(String selectionText, TreeItem items[]) {\n        for (TreeItem item : items) {\n            if (selectionText.equals(item.getText())) {\nNext line of code:\n", "input": "", "context": "package net.brokentrain.ftf.ui.gui.dialog;\nimport net.brokentrain.ftf.ui.gui.GUI;\nimport net.brokentrain.ftf.ui.gui.properties.BrowserTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.ConnectionProperties;\nimport net.brokentrain.ftf.ui.gui.properties.PropertyPage;\nimport net.brokentrain.ftf.ui.gui.properties.QueryTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.SystemTrayProperties;\nimport net.brokentrain.ftf.ui.gui.properties.TransferTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.ViewProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ArXivProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.DOIProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleDesktopSearchProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleScholarProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleWebSearchProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PlosJournalsProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PubMedCentralProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PubMedProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ScirusProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ServicesProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.TerrierProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.WebOfKnowledgeProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.YahooWebSearchProperties;\nimport net.brokentrain.ftf.ui.gui.settings.SettingsRegistry;\nimport net.brokentrain.ftf.ui.gui.settings.SettingsSaver;\nimport net.brokentrain.ftf.ui.gui.util.FontUtil;\nimport net.brokentrain.ftf.ui.gui.util.LayoutDataUtil;\nimport net.brokentrain.ftf.ui.gui.util.LayoutUtil;\nimport net.brokentrain.ftf.ui.gui.util.PaintUtil;\nimport net.brokentrain.ftf.ui.gui.util.StringUtil;\nimport net.brokentrain.ftf.ui.gui.util.WidgetUtil;\nimport org.eclipse.jface.dialogs.Dialog;\nimport org.eclipse.jface.dialogs.IDialogConstants;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.KeyAdapter;\nimport org.eclipse.swt.events.KeyEvent;\nimport org.eclipse.swt.events.PaintEvent;\nimport org.eclipse.swt.events.PaintListener;\nimport org.eclipse.swt.events.SelectionAdapter;\nimport org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.graphics.Point;\nimport org.eclipse.swt.graphics.Rectangle;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.Event;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Listener;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.swt.widgets.Tree;\nimport org.eclipse.swt.widgets.TreeItem;\n/* \n * TODO: This entire class could REALLY do with a re-think - since there were\n * few preference pages to think about they were just hard  coded, then it\n * started to grow and grow leading to this mess.  This should probably be made\n * dynamic and just build the *service* preference pages by seeing what is in\n * SettingsRegistry.services rather than hard coding them explicitly :(! This\n * kind of applies to the entire services package that is a sub-package of the\n * properties package, too.\n * NOTE: This is heavily based on RSSOwls code!\n * */\npublic class PreferencesDialog extends Dialog {\n    public static int lastOpenedPropertyPage = 0;\n    private static final int dialogMinWidth = 460;\n    private GUI fetcherGui;\n    private Composite buttonHolder;\n    private Composite contentHolder;\n    private Composite prefTitleHolder;\n    private Label labelImgHolder;\n    private Label labelPrefTitle;\n    private PropertyPage activePropertyPage;\n    private String lastSelectedItemText;\n    private String title;\n    private TreeItem arxiv;\n    private TreeItem browserTab;\n    private TreeItem connection;\n    private TreeItem crawler;\n    private TreeItem doi;\n    private TreeItem google;\n    private TreeItem googleDesktop;\n    private TreeItem googleScholar;\n    private TreeItem plosjournals;\n    private TreeItem pubmed;\n    private TreeItem pubmedCentral;\n    private TreeItem queryTab;\n    private TreeItem scirus;\n    private TreeItem services;\n    private TreeItem systemTray;\n    private TreeItem terrier;\n    private TreeItem transferTab;\n    private TreeItem view;\n    private TreeItem webofknowledge;\n    private TreeItem yahoo;\n    private Tree tree;\n    public PreferencesDialog(Shell parentShell, String dialogTitle,\n            GUI fetcherGui) {\n        super(parentShell);\n        this.title = dialogTitle;\n        this.fetcherGui = fetcherGui;\n        /* Init the PropertyChangeManager */\n        PropertyPage.initPropertyChangeManager(fetcherGui);\n    }\n    // private void createGeneralProps() {\n    // renewPropertyPage(\"General\");\n    // activePropertyPage = new GeneralProperties(contentHolder, fetcherGui);\n    // }\n    // private void createCrawlerProps() {\n    // renewPropertyPage(\"Crawler\");\n    // activePropertyPage = new CrawlerProperties(contentHolder, fetcherGui);\n    // }\n    // private void createBrowserProps() {\n    // renewPropertyPage(\"Browser\");\n    // }\n    @Override\n    protected void buttonPressed(int buttonId) {\n        if (buttonId == IDialogConstants.OK_ID) {\n            saveSettings();\n        }\n        if (activePropertyPage != null) {\n            activePropertyPage.dispose();\n        }\n        super.buttonPressed(buttonId);\n    }\n    @Override\n    protected void configureShell(Shell shell) {\n        shell.setLayout(LayoutUtil.createGridLayout(1, 0, 5));\n        shell.setText(title);\n        shell.setSize(0, 0);\n    }\n    private void createArxivProperties() {\n        renewPropertyPage(\"ArXiv\");\n        activePropertyPage = new ArXivProperties(contentHolder);\n    }\n    private void createBrowserTabProps() {\n        renewPropertyPage(\"Internal Browser\");\n        activePropertyPage = new BrowserTabProperties(contentHolder);\n    }\n    // private void createLogTabProps() {\n    // renewPropertyPage(\"Debug Log\");\n    // activePropertyPage = new LogTabProperties(contentHolder);\n    // }\n    @Override\n    protected Control createButtonBar(Composite parent) {\n        buttonHolder = new Composite(parent, SWT.NONE);\n        buttonHolder.setLayout(LayoutUtil\n                .createGridLayout(2, 0, 0, 5, 5, false));\n        buttonHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_HORIZONTAL, 2));\n        Composite okCancelHolder = new Composite(buttonHolder, SWT.NONE);\n        okCancelHolder.setLayout(LayoutUtil.createGridLayout(2, 0, 5, 5));\n        okCancelHolder.setLayoutData(new GridData(SWT.END, SWT.TOP, false,\n                false));\n        if (GUI.display.getDismissalAlignment() == SWT.RIGHT) {\n            createButton(okCancelHolder, IDialogConstants.CANCEL_ID, \"Cancel\",\n                    false).setFont(FontUtil.dialogFont);\n            createButton(okCancelHolder, IDialogConstants.OK_ID, \"OK\", true)\n                    .setFont(FontUtil.dialogFont);\n        } else {\n            createButton(okCancelHolder, IDialogConstants.OK_ID, \"OK\", true)\n                    .setFont(FontUtil.dialogFont);\n            createButton(okCancelHolder, IDialogConstants.CANCEL_ID, \"Cancel\",\n                    false).setFont(FontUtil.dialogFont);\n        }\n        return buttonHolder;\n    }\n    // private void createStatusTabProps() {\n    // renewPropertyPage(\"Status\");\n    // activePropertyPage = new StatusTabProperties(contentHolder, fetcherGui);\n    // }\n    private void createConnectionProps() {\n        renewPropertyPage(\"Connection\");\n        activePropertyPage = new ConnectionProperties(contentHolder, fetcherGui);\n    }\n    @Override\n    protected Control createDialogArea(Composite parent) {\n        Composite baseComposite = (Composite) super.createDialogArea(parent);\n        baseComposite.setLayout(LayoutUtil.createGridLayout(2, 0, 5, 15, 0,\n                false));\n        baseComposite.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_BOTH, 1));\n        Composite treeHolder = new Composite(baseComposite, SWT.NONE);\n        treeHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_VERTICAL, 1, convertHorizontalDLUsToPixels(140)));\n        treeHolder.setLayout(LayoutUtil.createGridLayout(1, 5, 0));\n        tree = new Tree(treeHolder, SWT.BORDER);\n        tree.setFont(FontUtil.dialogFont);\n        tree.setFocus();\n        tree.setLayoutData(new GridData(GridData.FILL_BOTH));\n        tree.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                handleTreeItemSelect();\n            }\n        });\n        tree.addKeyListener(new KeyAdapter() {\n            @Override\n            public void keyPressed(KeyEvent e) {\n                TreeItem selectedItem = tree.getSelection()[0];\n                if ((e.keyCode == SWT.CR) && (selectedItem.getItemCount() > 0)) {\n                    selectedItem.setExpanded(!selectedItem.getExpanded());\n                }\n            }\n        });\n        tree.addListener(SWT.MouseDoubleClick, new Listener() {\n            public void handleEvent(Event event) {\n                if (tree.getSelectionCount() > 0) {\n                    Rectangle clickedRect = event.getBounds();\n                    Rectangle selectedRect = tree.getSelection()[0].getBounds();\n                    /* Only handle event, if Mouse is over treeitem */\n                    if (selectedRect.contains(clickedRect.x, clickedRect.y)) {\n                        tree.getSelection()[0]\n                                .setExpanded(!tree.getSelection()[0]\n                                        .getExpanded());\n                    }\n                }\n            }\n        });\n        populateTree();\n        contentHolder = new Composite(baseComposite, SWT.NONE);\n        contentHolder.setLayoutData(new GridData(GridData.FILL_BOTH\n                | GridData.VERTICAL_ALIGN_BEGINNING));\n        contentHolder.setLayout(LayoutUtil.createGridLayout(1, 5, 0));\n        prefTitleHolder = new Composite(contentHolder, SWT.NONE);\n        GridLayout prefTitleHolderLayout = new GridLayout(2, false);\n        prefTitleHolderLayout.marginWidth = 1;\n        prefTitleHolderLayout.marginHeight = 2;\n        prefTitleHolderLayout.marginLeft = 4;\n        prefTitleHolder.setLayout(prefTitleHolderLayout);\n        prefTitleHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_HORIZONTAL, 2));\n        prefTitleHolder.setBackground(GUI.display\n                .getSystemColor(SWT.COLOR_WHITE));\n        prefTitleHolder.addPaintListener(new PaintListener() {\n            public void paintControl(PaintEvent e) {\n                e.gc.setForeground(GUI.display\n                        .getSystemColor(SWT.COLOR_DARK_GRAY));\n                Rectangle bounds = prefTitleHolder.getClientArea();\n                bounds.height -= 2;\n                bounds.width -= 1;\n                e.gc.drawRectangle(bounds);\n            }\n        });\n        setTreeSelection(lastOpenedPropertyPage);\n        handleTreeItemSelect();\n        Label seperator = new Label(baseComposite, SWT.HORIZONTAL\n                | SWT.SEPARATOR);\n        seperator.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL,\n                2));\n        if (WidgetUtil.isset(tree.getHorizontalBar())) {\n            tree.getHorizontalBar().setSelection(0);\n        }\n        return contentHolder;\n    }\n    private void createDOIProperties() {\n        renewPropertyPage(\"DOI\");\n        activePropertyPage = new DOIProperties(contentHolder);\n    }\n    private void createGoogleDesktopSearchProperties() {\n        renewPropertyPage(\"Google Desktop Search\");\n        activePropertyPage = new GoogleDesktopSearchProperties(contentHolder);\n    }\n    // private void createCiteSeerProperties() {\n    // renewPropertyPage(\"Cite Seer\");\n    // activePropertyPage = new CiteSeerProperties(contentHolder);\n    // }\n    private void createGoogleScholarProperties() {\n        renewPropertyPage(\"Google Scholar\");\n        activePropertyPage = new GoogleScholarProperties(contentHolder);\n    }\n    private void createGoogleWebSearchProperties() {\n        renewPropertyPage(\"Google Web Search\");\n        activePropertyPage = new GoogleWebSearchProperties(contentHolder);\n    }\n    private void createPlosJournalsProperties() {\n        renewPropertyPage(\"Plos Journals\");\n        activePropertyPage = new PlosJournalsProperties(contentHolder);\n    }\n    private void createPubMedCentralProperties() {\n        renewPropertyPage(\"PubMed Central\");\n        activePropertyPage = new PubMedCentralProperties(contentHolder);\n    }\n    private void createPubMedProperties() {\n        renewPropertyPage(\"PubMed\");\n        activePropertyPage = new PubMedProperties(contentHolder);\n    }\n    private void createQueryTabProps() {\n        renewPropertyPage(\"Queries\");\n        activePropertyPage = new QueryTabProperties(contentHolder);\n    }\n    private void createScirusProperties() {\n        renewPropertyPage(\"Scirus\");\n        activePropertyPage = new ScirusProperties(contentHolder);\n    }\n    private void createServicesProperties() {\n        renewPropertyPage(\"Default Services\");\n        activePropertyPage = new ServicesProperties(contentHolder);\n    }\n    private void createSystemTrayProps() {\n        renewPropertyPage(\"System Tray\");\n        activePropertyPage = new SystemTrayProperties(contentHolder, fetcherGui);\n    }\n    private void createTerrierProperties() {\n        renewPropertyPage(\"Terrier\");\n        activePropertyPage = new TerrierProperties(contentHolder);\n    }\n    private void createTransferTabProps() {\n        renewPropertyPage(\"Transfer\");\n        activePropertyPage = new TransferTabProperties(contentHolder);\n    }\n    private void createViewProps() {\n        renewPropertyPage(\"View\");\n        activePropertyPage = new ViewProperties(contentHolder, fetcherGui);\n    }\n    private void createWebOfKnowledgeProperties() {\n        renewPropertyPage(\"WebOfKnowledge\");\n        activePropertyPage = new WebOfKnowledgeProperties(contentHolder);\n    }\n    private void createYahooProperties() {\n        renewPropertyPage(\"Yahoo Web Search\");\n        activePropertyPage = new YahooWebSearchProperties(contentHolder);\n    }\n    @Override\n    protected int getShellStyle() {\n        int style = SWT.TITLE | SWT.BORDER | SWT.RESIZE | SWT.APPLICATION_MODAL\n                | getDefaultOrientation();\n        return style;\n    }\n    void handleTreeItemSelect() {\n        if (tree.getSelection().length == 0) {\n            return;\n        }\n        if (tree.getSelection()[0].getText().equals(lastSelectedItemText)) {\n            return;\n        }\n        lastSelectedItemText = tree.getSelection()[0].getText();\n        // if (tree.getSelection()[0].getText().equals(\"General\")) {\n        // createGeneralProps();\n        // lastOpenedPropertyPage = 0;\n        // }\n        // if (tree.getSelection()[0].getText().equals(\"Crawler\")) {\n        // createCrawlerProps();\n        // lastOpenedPropertyPage = 23;\n        // }\n        /* Browser */\n        // if (tree.getSelection()[0].getText().equals(\"Browser\")) {\n        // createBrowserProps();\n        // lastOpenedPropertyPage = 1;\n        // }\n        /* Connection */\n        if (tree.getSelection()[0].getText().equals(\"Connection\")) {\n            createConnectionProps();\n            lastOpenedPropertyPage = 2;\n        }\n        /* System Tray */\n        else if (tree.getSelection()[0].getText().equals(\"System Tray\")) {\n            createSystemTrayProps();\n            lastOpenedPropertyPage = 3;\n        }\n        /* View */\n        else if (tree.getSelection()[0].getText().equals(\"View\")) {\n            createViewProps();\n            lastOpenedPropertyPage = 4;\n        }\n        /* Browser Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Internal Browser\")) {\n            createBrowserTabProps();\n            lastOpenedPropertyPage = 5;\n        }\n        /* Log Tab */\n        // else if (tree.getSelection()[0].getText().equals(\"Debug Log\")) {\n        // createLogTabProps();\n        // lastOpenedPropertyPage = 6;\n        // }\n        /* Query Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Queries\")) {\n            createQueryTabProps();\n            lastOpenedPropertyPage = 7;\n        }\n        /* Status Tab */\n        // else if (tree.getSelection()[0].getText().equals(\"Status\")) {\n        // createStatusTabProps();\n        // lastOpenedPropertyPage = 8;\n        // }\n        /* Transfer Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Transfer\")) {\n            createTransferTabProps();\n            lastOpenedPropertyPage = 9;\n        }\n        /* Services */\n        else if (tree.getSelection()[0].getText().equals(\"Services\")) {\n            createServicesProperties();\n            lastOpenedPropertyPage = 10;\n        }\n        /* ArXiv */\n        else if (tree.getSelection()[0].getText().equals(\"ArXiv\")) {\n            createArxivProperties();\n            lastOpenedPropertyPage = 11;\n        }\n        /* CiteSeer */\n        // else if (tree.getSelection()[0].getText().equals(\"Cite Seer\")) {\n        // createCiteSeerProperties();\n        // lastOpenedPropertyPage = 12;\n        // }\n        /* DOI */\n        else if (tree.getSelection()[0].getText().equals(\"DOI\")) {\n            createDOIProperties();\n            lastOpenedPropertyPage = 13;\n        }\n        /* GoogleDesktopSearch */\n        else if (tree.getSelection()[0].getText().equals(\n                \"Google Desktop Search\")) {\n            createGoogleDesktopSearchProperties();\n            lastOpenedPropertyPage = 24;\n        }\n        /* Google */\n        else if (tree.getSelection()[0].getText().equals(\"Google Web Search\")) {\n            createGoogleWebSearchProperties();\n            lastOpenedPropertyPage = 14;\n        }\n        /* GoogleScholar */\n        else if (tree.getSelection()[0].getText().equals(\"Google Scholar\")) {\n            createGoogleScholarProperties();\n            lastOpenedPropertyPage = 15;\n        }\n        /* PlosJournals */\n        else if (tree.getSelection()[0].getText().equals(\"Plos Journals\")) {\n            createPlosJournalsProperties();\n            lastOpenedPropertyPage = 16;\n        }\n        /* PubMed */\n        else if (tree.getSelection()[0].getText().equals(\"PubMed\")) {\n            createPubMedProperties();\n            lastOpenedPropertyPage = 17;\n        }\n        /* PubMedCentral */\n        else if (tree.getSelection()[0].getText().equals(\"PubMed Central\")) {\n            createPubMedCentralProperties();\n            lastOpenedPropertyPage = 18;\n        }\n        /* Scirus */\n        else if (tree.getSelection()[0].getText().equals(\"Scirus\")) {\n            createScirusProperties();\n            lastOpenedPropertyPage = 19;\n        }\n        /* Terrier */\n        else if (tree.getSelection()[0].getText().equals(\"Terrier\")) {\n            createTerrierProperties();\n            lastOpenedPropertyPage = 20;\n        }\n        /* WebOfKnowledge */\n        else if (tree.getSelection()[0].getText().equals(\"Web Of Knowledge\")) {\n            createWebOfKnowledgeProperties();\n            lastOpenedPropertyPage = 21;\n        }\n        /* Yahoo */\n        else if (tree.getSelection()[0].getText().equals(\"Yahoo Web Search\")) {\n            createYahooProperties();\n            lastOpenedPropertyPage = 22;\n        }\n        contentHolder.layout();\n        initializeBounds(false);\n    }\n    @Override\n    protected void initializeBounds() {\n        initializeBounds(true);\n    }\n    protected void initializeBounds(boolean updateLocation) {\n        Point currentSize = getShell().getSize();\n        Point bestSize = getShell().computeSize(\n                convertHorizontalDLUsToPixels(dialogMinWidth), SWT.DEFAULT);\n        Point location = (updateLocation == true) ? getInitialLocation(bestSize)\n                : getShell().getLocation();\n        if (updateLocation && (bestSize.y > currentSize.y)) {\n            getShell()\n                    .setBounds(location.x, location.y, bestSize.x, bestSize.y);\n        } else if (bestSize.y > currentSize.y) {\n            getShell().setSize(bestSize.x, bestSize.y);\n        }\n        getShell().setMinimumSize(bestSize.x, bestSize.y);\n    }\n    void populateTree() {\n        String selectionText = null;\n        if (tree.getSelectionCount() > 0) {\n            selectionText = tree.getSelection()[0].getText();\n        }\n        if (tree.getItemCount() > 0) {\n            tree.removeAll();\n        }\n        /* General properties */\n        // general = new TreeItem(tree, SWT.NONE);\n        // general.setText(\"General\");\n        /* Crawler sub-property */\n        // crawler = new TreeItem(tree, SWT.NONE);\n        // crawler.setText(\"Crawler\");\n        /* Browser sub-property */\n        // browser = new TreeItem(tree, SWT.NONE);\n        // browser.setText(\"Browser\");\n        /* Connection sub-property */\n        connection = new TreeItem(tree, SWT.NONE);\n        connection.setText(\"Connection\");\n        /* System Tray sub-property */\n        if (SettingsRegistry.useSystemTray()) {\n            // if (!WidgetShop.isset(general)) {\n            // general = new TreeItem(tree, SWT.NONE);\n            // general.setText(\"General\");\n            // }\n            systemTray = new TreeItem(tree, SWT.NONE);\n            systemTray.setText(\"System Tray\");\n        }\n        /* View properties */\n        view = new TreeItem(tree, SWT.NONE);\n        view.setText(\"View\");\n        /* Browser tab sub-property */\n        browserTab = new TreeItem(view, SWT.NONE);\n        browserTab.setText(\"Internal Browser\");\n        /* Log tab sub-property */\n        // logTab = new TreeItem(view, SWT.NONE);\n        // logTab.setText(\"Debug Log\");\n        // logTab.setForeground(ColourUtil.gray);\n        /* Status tab sub-property */\n        // statusTab = new TreeItem(view, SWT.NONE);\n        // statusTab.setText(\"Status\");\n        // statusTab.setForeground(ColourUtil.gray);\n        /* Transfer tab sub-property */\n        transferTab = new TreeItem(view, SWT.NONE);\n        transferTab.setText(\"Transfer\");\n        /* Query tab sub-property */\n        queryTab = new TreeItem(view, SWT.NONE);\n        queryTab.setText(\"Queries\");\n        /* Services sub-property */\n        services = new TreeItem(tree, SWT.NONE);\n        services.setText(\"Services\");\n        /* Arxiv sub-property */\n        arxiv = new TreeItem(services, SWT.NONE);\n        arxiv.setText(\"ArXiv\");\n        /* DOI sub-property */\n        doi = new TreeItem(services, SWT.NONE);\n        doi.setText(\"DOI\");\n        /* Cite Seer sub-property */\n        // citeSeer = new TreeItem(services, SWT.NONE);\n        // citeSeer.setText(\"Cite Seer\");\n        /* Google Scholar sub-property */\n        googleDesktop = new TreeItem(services, SWT.NONE);\n        googleDesktop.setText(\"Google Desktop Search\");\n        /* Google Scholar sub-property */\n        google = new TreeItem(services, SWT.NONE);\n        google.setText(\"Google Web Search\");\n        /* Google Scholar sub-property */\n        googleScholar = new TreeItem(services, SWT.NONE);\n        googleScholar.setText(\"Google Scholar\");\n        /* Plos Journals sub-property */\n        plosjournals = new TreeItem(services, SWT.NONE);\n        plosjournals.setText(\"Plos Journals\");\n        /* PubMed sub-property */\n        pubmed = new TreeItem(services, SWT.NONE);\n        pubmed.setText(\"PubMed\");\n        /* PubMed Central sub-property */\n        pubmedCentral = new TreeItem(services, SWT.NONE);\n        pubmedCentral.setText(\"PubMed Central\");\n        /* Scirus sub-property */\n        scirus = new TreeItem(services, SWT.NONE);\n        scirus.setText(\"Scirus\");\n        /* Terrier sub-property */\n        terrier = new TreeItem(services, SWT.NONE);\n        terrier.setText(\"Terrier\");\n        /* WOK sub-property */\n        webofknowledge = new TreeItem(services, SWT.NONE);\n        webofknowledge.setText(\"Web Of Knowledge\");\n        /* Yahoo sub-property */\n        yahoo = new TreeItem(services, SWT.NONE);\n        yahoo.setText(\"Yahoo Web Search\");\n        // if (WidgetShop.isset(general))\n        // general.setExpanded(true);\n        if (WidgetUtil.isset(view)) {\n            view.setExpanded(true);\n        }\n        if (WidgetUtil.isset(services)) {\n            services.setExpanded(true);\n        }\n        if (StringUtil.isset(selectionText)) {\n            restoreSelection(selectionText, tree.getItems());\n        }\n    }\n    private void renewPropertyPage(String title) {\n        if (activePropertyPage != null) {\n            activePropertyPage.updatePropertiesChangeManager();\n            activePropertyPage.dispose();\n        }\n        if (labelPrefTitle == null) {\n            labelPrefTitle = new Label(prefTitleHolder, SWT.LEFT);\n            labelPrefTitle.setBackground(GUI.display\n                    .getSystemColor(SWT.COLOR_WHITE));\n            labelPrefTitle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER,\n                    true, false));\n            labelPrefTitle.setFont(FontUtil.dialogBoldFont);\n        }\n        if (labelImgHolder == null) {\n            labelImgHolder = new Label(prefTitleHolder, SWT.NONE);\n            labelImgHolder.setBackground(GUI.display\n                    .getSystemColor(SWT.COLOR_WHITE));\n            labelImgHolder.setImage(PaintUtil.iconBlueStripes);\n            labelImgHolder.setLayoutData(new GridData(SWT.END, SWT.END, false,\n                    false));\n        }\n        labelPrefTitle.setText(title);\n        labelPrefTitle.update();\n        labelImgHolder.update();\n        prefTitleHolder.layout();\n        contentHolder.layout();\n    }\n    private void restoreSelection(String selectionText, TreeItem items[]) {\n        for (TreeItem item : items) {\n            if (selectionText.equals(item.getText())) {\n", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "length": 1800, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "683bf49a8cf91c2074fdb7f2c850ab08b6ffa7c6c32f736a", "pred": "```\n                item.setExpanded(true);\n                item.setSelection(true);\n                return;\n            }\n        }\n    }\n    private void saveSettings() {\n        SettingsRegistry.saveSettings();\n        SettingsSaver.saveSettings();\n    }\n    private void setTreeSelection(int selection) {\n        if (tree.getSelectionCount() > 0"}
{"prompt": "Please complete the code given below. \n/*\n * ATLauncher - https://github.com/ATLauncher/ATLauncher\n * Copyright (C) 2013 ATLauncher\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.atlauncher.gui.tabs;\nimport com.atlauncher.App;\nimport com.atlauncher.data.Instance;\nimport com.atlauncher.data.Language;\nimport com.atlauncher.evnt.listener.RelocalizationListener;\nimport com.atlauncher.evnt.manager.RelocalizationManager;\nimport com.atlauncher.gui.card.InstanceCard;\nimport com.atlauncher.gui.card.NilCard;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.SwingUtilities;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.util.regex.Pattern;\n/**\n * TODO: Rewrite this for better loading\n */\npublic class InstancesTab extends JPanel implements Tab, RelocalizationListener {\n    private static final long serialVersionUID = -969812552965390610L;\n    private JPanel topPanel;\n    private JButton clearButton;\n    private JTextField searchBox;\n    private JButton searchButton;\n    private JCheckBox hasUpdate;\n    private JLabel hasUpdateLabel;\n    private String searchText = null;\n    private boolean isUpdate = false;\n    private JPanel panel;\n    private JScrollPane scrollPane;\n    private int currentPosition = 0;\n    \n    private NilCard nilCard;\n    public InstancesTab() {\n        setLayout(new BorderLayout());\n        loadContent(false);\n        RelocalizationManager.addListener(this);\n    }\n    public void loadContent(boolean keepFilters) {\n        topPanel = new JPanel();\n        topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\n        clearButton = new JButton(Language.INSTANCE.localize(\"common.clear\"));\n        clearButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                searchBox.setText(\"\");\n                hasUpdate.setSelected(false);\n                reload();\n            }\n        });\n        topPanel.add(clearButton);\n        searchBox = new JTextField(16);\n        if (keepFilters) {\n            searchBox.setText(this.searchText);\n        }\n        searchBox.addKeyListener(new KeyAdapter() {\n            public void keyReleased(KeyEvent e) {\n                if (e.getKeyChar() == KeyEvent.VK_ENTER) {\n                    reload();\n                }\n            }\n        });\n        topPanel.add(searchBox);\n        searchButton = new JButton(Language.INSTANCE.localize(\"common.search\"));\n        searchButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                reload();\n            }\n        });\n        topPanel.add(searchButton);\n        hasUpdate = new JCheckBox();\n        hasUpdate.setSelected(isUpdate);\n        hasUpdate.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                reload();\n            }\n        });\n        topPanel.add(hasUpdate);\n        hasUpdateLabel = new JLabel(Language.INSTANCE.localize(\"instance.hasupdate\"));\n        topPanel.add(hasUpdateLabel);\n        add(topPanel, BorderLayout.NORTH);\n        panel = new JPanel();\n        scrollPane = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane\n                .HORIZONTAL_SCROLLBAR_NEVER);\n        scrollPane.getVerticalScrollBar().setUnitIncrement(16);\n        add(scrollPane, BorderLayout.CENTER);\n        panel.setLayout(new GridBagLayout());\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.gridx = gbc.gridy = 0;\n        gbc.weightx = 1.0;\n        gbc.fill = GridBagConstraints.BOTH;\n        int count = 0;\n        for (Instance instance : App.settings.getInstancesSorted()) {\n            if (instance.canPlay()) {\n                if (keepFilters) {\n                    boolean showInstance = true;\n                    if (searchText != null) {\n                        if (!Pattern.compile(Pattern.quote(searchText), Pattern.CASE_INSENSITIVE).matcher(instance\n                                .getName()).find()) {\n                            showInstance = false;\n                        }\n                    }\n                    if (isUpdate) {\n                        if (!instance.hasUpdate()) {\n                            showInstance = false;\n                        }\n                    }\n                    if (showInstance) {\n                        panel.add(new InstanceCard(instance), gbc);\n                        gbc.gridy++;\n                        count++;\n                    }\n                } else {\n                    panel.add(new InstanceCard(instance), gbc);\n                    gbc.gridy++;\n                    count++;\n                }\n            }\n        }\n        if (count == 0) {\n            nilCard = new NilCard(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n            panel.add(nilCard, gbc);\n        }\n        SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                scrollPane.getVerticalScrollBar().setValue(currentPosition);\n            }\n        });\n    }\n    public void reload() {\n        this.currentPosition = scrollPane.getVerticalScrollBar().getValue();\n        this.searchText = searchBox.getText();\n        this.isUpdate = hasUpdate.isSelected();\n        if (this.searchText.isEmpty()) {\n            this.searchText = null;\n        }\n        removeAll();\n        loadContent(true);\n        validate();\n        repaint();\n        searchBox.requestFocus();\n    }\n    @Override\n    public String getTitle() {\n        return Language.INSTANCE.localize(\"tabs.instances\");\n    }\n    @Override\n    public void onRelocalization() {\n        clearButton.setText(Language.INSTANCE.localize(\"common.clear\"));\n        searchButton.setText(Language.INSTANCE.localize(\"common.search\"));\n        hasUpdateLabel.setText(Language.INSTANCE.localize(\"instance.hasupdate\"));\n        \nNext line of code:\n", "input": "", "context": "/*\n * ATLauncher - https://github.com/ATLauncher/ATLauncher\n * Copyright (C) 2013 ATLauncher\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.atlauncher.gui.tabs;\nimport com.atlauncher.App;\nimport com.atlauncher.data.Instance;\nimport com.atlauncher.data.Language;\nimport com.atlauncher.evnt.listener.RelocalizationListener;\nimport com.atlauncher.evnt.manager.RelocalizationManager;\nimport com.atlauncher.gui.card.InstanceCard;\nimport com.atlauncher.gui.card.NilCard;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.SwingUtilities;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.util.regex.Pattern;\n/**\n * TODO: Rewrite this for better loading\n */\npublic class InstancesTab extends JPanel implements Tab, RelocalizationListener {\n    private static final long serialVersionUID = -969812552965390610L;\n    private JPanel topPanel;\n    private JButton clearButton;\n    private JTextField searchBox;\n    private JButton searchButton;\n    private JCheckBox hasUpdate;\n    private JLabel hasUpdateLabel;\n    private String searchText = null;\n    private boolean isUpdate = false;\n    private JPanel panel;\n    private JScrollPane scrollPane;\n    private int currentPosition = 0;\n    \n    private NilCard nilCard;\n    public InstancesTab() {\n        setLayout(new BorderLayout());\n        loadContent(false);\n        RelocalizationManager.addListener(this);\n    }\n    public void loadContent(boolean keepFilters) {\n        topPanel = new JPanel();\n        topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\n        clearButton = new JButton(Language.INSTANCE.localize(\"common.clear\"));\n        clearButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                searchBox.setText(\"\");\n                hasUpdate.setSelected(false);\n                reload();\n            }\n        });\n        topPanel.add(clearButton);\n        searchBox = new JTextField(16);\n        if (keepFilters) {\n            searchBox.setText(this.searchText);\n        }\n        searchBox.addKeyListener(new KeyAdapter() {\n            public void keyReleased(KeyEvent e) {\n                if (e.getKeyChar() == KeyEvent.VK_ENTER) {\n                    reload();\n                }\n            }\n        });\n        topPanel.add(searchBox);\n        searchButton = new JButton(Language.INSTANCE.localize(\"common.search\"));\n        searchButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                reload();\n            }\n        });\n        topPanel.add(searchButton);\n        hasUpdate = new JCheckBox();\n        hasUpdate.setSelected(isUpdate);\n        hasUpdate.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                reload();\n            }\n        });\n        topPanel.add(hasUpdate);\n        hasUpdateLabel = new JLabel(Language.INSTANCE.localize(\"instance.hasupdate\"));\n        topPanel.add(hasUpdateLabel);\n        add(topPanel, BorderLayout.NORTH);\n        panel = new JPanel();\n        scrollPane = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane\n                .HORIZONTAL_SCROLLBAR_NEVER);\n        scrollPane.getVerticalScrollBar().setUnitIncrement(16);\n        add(scrollPane, BorderLayout.CENTER);\n        panel.setLayout(new GridBagLayout());\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.gridx = gbc.gridy = 0;\n        gbc.weightx = 1.0;\n        gbc.fill = GridBagConstraints.BOTH;\n        int count = 0;\n        for (Instance instance : App.settings.getInstancesSorted()) {\n            if (instance.canPlay()) {\n                if (keepFilters) {\n                    boolean showInstance = true;\n                    if (searchText != null) {\n                        if (!Pattern.compile(Pattern.quote(searchText), Pattern.CASE_INSENSITIVE).matcher(instance\n                                .getName()).find()) {\n                            showInstance = false;\n                        }\n                    }\n                    if (isUpdate) {\n                        if (!instance.hasUpdate()) {\n                            showInstance = false;\n                        }\n                    }\n                    if (showInstance) {\n                        panel.add(new InstanceCard(instance), gbc);\n                        gbc.gridy++;\n                        count++;\n                    }\n                } else {\n                    panel.add(new InstanceCard(instance), gbc);\n                    gbc.gridy++;\n                    count++;\n                }\n            }\n        }\n        if (count == 0) {\n            nilCard = new NilCard(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n            panel.add(nilCard, gbc);\n        }\n        SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                scrollPane.getVerticalScrollBar().setValue(currentPosition);\n            }\n        });\n    }\n    public void reload() {\n        this.currentPosition = scrollPane.getVerticalScrollBar().getValue();\n        this.searchText = searchBox.getText();\n        this.isUpdate = hasUpdate.isSelected();\n        if (this.searchText.isEmpty()) {\n            this.searchText = null;\n        }\n        removeAll();\n        loadContent(true);\n        validate();\n        repaint();\n        searchBox.requestFocus();\n    }\n    @Override\n    public String getTitle() {\n        return Language.INSTANCE.localize(\"tabs.instances\");\n    }\n    @Override\n    public void onRelocalization() {\n        clearButton.setText(Language.INSTANCE.localize(\"common.clear\"));\n        searchButton.setText(Language.INSTANCE.localize(\"common.search\"));\n        hasUpdateLabel.setText(Language.INSTANCE.localize(\"instance.hasupdate\"));\n        \n", "answers": ["        if (nilCard != null) {"], "length": 511, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "01ae6097833c3bcf2b2bd049d9fd87c92875de1e0f90be36", "pred": "```\n        nilCard.setText(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n```\nThis line of code is used to set the text of the `nilCard` object. The `nilCard` object is a `NilCard` object that is used to display a message when there"}
{"prompt": "Please complete the code given below. \npackage name.vbraun.view.write;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.LinkedList;\nimport java.util.UUID;\nimport com.write.Quill.artist.Artist;\nimport junit.framework.Assert;\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.Paint.Style;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.net.Uri;\nimport android.util.FloatMath;\nimport android.util.Log;\nimport android.widget.ImageButton;\nimport android.widget.Toast;\npublic class GraphicsImage extends GraphicsControlpoint {\n\tprivate static final String TAG = \"GraphicsImage\";\n\tprivate Controlpoint bottom_left, bottom_right, top_left, top_right,\n\t\t\tcenter;\n\tprivate final Paint paint = new Paint();\n\tprivate final Paint outline = new Paint();\n\tprivate final Rect rect = new Rect();\n\tprivate final RectF rectF = new RectF();\n\tprivate Bitmap bitmap = null;\n\tprivate File file = null;\n\tprivate int height, width;\n\tprivate float sqrtAspect;\n\tpublic enum FileType {\n\t\tFILETYPE_NONE, FILETYPE_PNG, FILETYPE_JPG\n\t}\n\t\n\tpublic static String getImageFileExt(FileType fileType) {\n\t\tif (fileType == FileType.FILETYPE_JPG) {\n\t\t\treturn \".jpg\";\n\t\t} else if (fileType == FileType.FILETYPE_PNG) {\n\t\t\treturn \".png\";\n\t\t} else {\n\t\t\tAssert.fail();\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tpublic static FileType getImageFileType(String fileName) {\n\t\tfor (FileType t : FileType.values()) {\n\t\t\tif (t == FileType.FILETYPE_NONE)\n\t\t\t\tcontinue;\n\t\t\tString ext = getImageFileExt(t);\n\t\t\tif (fileName.endsWith(ext))\n\t\t\t\treturn t;\n\t\t}\n\t\treturn FileType.FILETYPE_NONE;\n\t}\n\t/**\n\t * Helper to construct a file name out of uuid and file type\n\t * @param uuid\n\t * @param fileType\n\t * @return\n\t */\n\tpublic static String getImageFileName(UUID uuid, FileType fileType) {\n\t\treturn uuid.toString() + getImageFileExt(fileType);\n\t}\n\tpublic String getFileName() {\n\t\treturn file.getAbsolutePath();\n\t}\n\t\n\t// persistent data\n\tprotected UUID uuid = null;\n\tprotected boolean constrainAspect = true;\n\tprotected Rect cropRect = new Rect();\n\tpublic UUID getUuid() {\n\t\tif (uuid == null)\n\t\t\tuuid = UUID.randomUUID();\n\t\treturn uuid;\n\t}\n\tpublic Uri getFileUri() {\n\t\tif (file == null)\n\t\t\treturn null;   // no picture selected yet\n\t\telse\n\t\t\treturn Uri.fromFile(file);\n\t}\n\t\n\tpublic File getFile() {\n\t\treturn file;\n\t}\n\tpublic boolean getConstrainAspect() {\n\t\treturn constrainAspect;\n\t}\n\t\n\tpublic FileType getFileType() {\n\t\treturn getImageFileType(file.getName());\n\t}\n\t/**\n\t * Construct a new image\n\t * \n\t * @param transform\n\t *            The current transformation\n\t * @param x\n\t *            Screen x coordinate\n\t * @param y\n\t *            Screen y coordinate\n\t * @param penThickness\n\t * @param penColor\n\t */\n\tprotected GraphicsImage(Transformation transform, float x, float y) {\n\t\tsuper(Tool.IMAGE);\n\t\tsetTransform(transform);\n\t\tbottom_left = new Controlpoint(transform, x, y);\n\t\tbottom_right = new Controlpoint(transform, x, y);\n\t\ttop_left = new Controlpoint(transform, x, y);\n\t\ttop_right = new Controlpoint(transform, x, y);\n\t\tcenter = new Controlpoint(transform, x, y);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tinit();\n\t}\n\t\n\t/**\n\t * The copy constructor\n\t * @param image\n\t * @param dir the directory to copy the image file to\n\t */\n\tprotected GraphicsImage(final GraphicsImage image, File dir) {\n\t\tsuper(image);\n\t\tbottom_left = new Controlpoint(image.bottom_left);\n\t\tbottom_right = new Controlpoint(image.bottom_right);\n\t\ttop_left = new Controlpoint(image.top_left);\n\t\ttop_right = new Controlpoint(image.top_right);\n\t\tcenter = new Controlpoint(image.center);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tconstrainAspect = image.constrainAspect;\n\t\tinit();\n\t\tif (image.getFile() == null) \n\t\t\treturn;\n\t\tfinal String fileName = getImageFileName(getUuid(), image.getFileType());\n\t\tfile = new File(dir, fileName);\n\t\tcom.write.Quill.image.Util.copyfile(image.getFile(), file);\n\t}\n\tprivate void init() {\n\t\tpaint.setARGB(0xff, 0x5f, 0xff, 0x5f);\n\t\tpaint.setStyle(Style.FILL);\n\t\tpaint.setStrokeWidth(0);\n\t\tpaint.setAntiAlias(true);\n\t\tpaint.setStrokeCap(Paint.Cap.ROUND);\n\t\toutline.setARGB(0xff, 0x0, 0xaa, 0x0);\n\t\toutline.setStyle(Style.STROKE);\n\t\toutline.setStrokeWidth(4);\n\t\toutline.setAntiAlias(true);\n\t\toutline.setStrokeCap(Paint.Cap.ROUND);\n\t}\n\t@Override\n\tprotected Controlpoint initialControlpoint() {\n\t\treturn bottom_right;\n\t}\n\t@Override\n\tpublic boolean intersects(RectF screenRect) {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic void draw(Canvas c, RectF bounding_box) {\n\t\tif (file != null && bitmap == null)\n\t\t\ttry {\n\t\t\t\tloadBitmap();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(TAG, \"loading bitmap: \"+e.getMessage());\n\t\t\t}\n\t\t\n\t\tcomputeScreenRect();\n\t\tc.clipRect(0, 0, c.getWidth(), c.getHeight(), android.graphics.Region.Op.REPLACE);\n\t\tif (bitmap == null) {\n\t\t\tc.drawRect(rect, paint);\n\t\t\tc.drawRect(rect, outline);\n\t\t} else {\n\t\t\tc.drawBitmap(bitmap, null, rect, null);\n\t\t}\n\t}\n\tprivate Controlpoint oppositeControlpoint(Controlpoint point) {\n\t\tif (point == bottom_right)\n\t\t\treturn top_left;\n\t\tif (point == bottom_left)\n\t\t\treturn top_right;\n\t\tif (point == top_right)\n\t\t\treturn bottom_left;\n\t\tif (point == top_left)\n\t\t\treturn bottom_right;\n\t\tif (point == center)\n\t\t\treturn center;\n\t\tAssert.fail(\"Unreachable\");\n\t\treturn null;\n\t}\n\tprivate final static float minDistancePixel = 30;\n\t@Override\n\tvoid controlpointMoved(Controlpoint point) {\n\t\tsuper.controlpointMoved(point);\n\t\tif (point == center) {\n\t\t\tfloat width2 = (bottom_right.x - bottom_left.x) / 2;\n\t\t\tfloat height2 = (top_right.y - bottom_right.y) / 2;\n\t\t\tbottom_right.y = bottom_left.y = center.y - height2;\n\t\t\ttop_right.y = top_left.y = center.y + height2;\n\t\t\tbottom_right.x = top_right.x = center.x + width2;\n\t\t\tbottom_left.x = top_left.x = center.x - width2;\n\t\t} else {\n\t\t\tControlpoint opposite = oppositeControlpoint(point);\n\t\t\tfloat dx = opposite.x - point.x;\n\t\t\tfloat dy = opposite.y - point.y;\n\t\t\tfloat minDistance = minDistancePixel / scale;\n\t\t\tif (-minDistance <= dx && dx <= minDistance) {\n\t\t\t\tfloat sgn = Math.signum(dx);\n\t\t\t\topposite.x = point.x + sgn * minDistance;\n\t\t\t\tdx = sgn * minDistance;\n\t\t\t}\n\t\t\tif (-minDistance <= dy && dy <= minDistance) {\n\t\t\t\tfloat sgn = Math.signum(dy);\n\t\t\t\topposite.y = point.y + sgn * minDistance;\n\t\t\t\tdy = sgn *minDistance;\n\t\t\t}\n\t\t\tif (constrainAspect && bitmap != null) {\n\t\t\t\tfloat r = (Math.abs(dx)+Math.abs(dy))/2;\n\t\t\t\tdx = r * sqrtAspect * Math.signum(dx);\n\t\t\t\tdy = r / sqrtAspect * Math.signum(dy);\n\t\t\t\t// Log.d(TAG, \"move \"+dx + \" \"+dy + \" \" + r + \" \"+(sqrtAspect*sqrtAspect));\n\t\t\t}\n\t\t\trectF.bottom = opposite.y;\n\t\t\trectF.top = opposite.y - dy;\n\t\t\trectF.left = opposite.x;\n\t\t\trectF.right = opposite.x - dx;\n\t\t\trectF.sort();\n\t\t\tbottom_right.y = bottom_left.y = rectF.bottom;\n\t\t\ttop_right.y = top_left.y = rectF.top;\n\t\t\tbottom_right.x = top_right.x = rectF.right;\n\t\t\tbottom_left.x = top_left.x = rectF.left;\n\t\t\tcenter.x = rectF.left + (rectF.right - rectF.left) / 2;\n\t\t\tcenter.y = rectF.bottom + (rectF.top - rectF.bottom) / 2;\n\t\t}\n\t}\n\tprivate void computeScreenRect() {\n\t\trectF.bottom = bottom_left.screenY();\n\t\trectF.top = top_left.screenY();\n\t\trectF.left = bottom_left.screenX();\n\t\trectF.right = bottom_right.screenX();\n\t\trectF.sort();\n\t\trectF.round(rect);\n\t}\n\tpublic void writeToStream(DataOutputStream out) throws IOException {\n\t\tout.writeInt(1);  // protocol #1\n\t\tout.writeUTF(uuid.toString());\n\t\tout.writeFloat(top_left.x);\n\t\tout.writeFloat(top_right.x);\n\t\tout.writeFloat(top_left.y);\n\t\tout.writeFloat(bottom_left.y);\n\t\tout.writeBoolean(constrainAspect);\n\t}\n\tpublic GraphicsImage(DataInputStream in, File dir) throws IOException {\n\t\tsuper(Tool.IMAGE);\n\t\tint version = in.readInt();\n\t\tif (version > 1)\n\t\t\tthrow new IOException(\"Unknown image version!\");\n\t\tuuid = UUID.fromString(in.readUTF());\n\t\tfloat left   = in.readFloat(); \n\t\tfloat right  = in.readFloat();\n\t\tfloat top    = in.readFloat();\n\t\tfloat bottom = in.readFloat();  \t\t\n\t\tconstrainAspect = in.readBoolean();\n\t\t\n\t\tbottom_left = new Controlpoint(transform, left, bottom);\n\t\tbottom_right = new Controlpoint(transform, right, bottom);\n\t\ttop_left = new Controlpoint(transform, left, top);\n\t\ttop_right = new Controlpoint(transform, right, top);\n\t\tcenter = new Controlpoint(transform, (left+right)/2, (top+bottom)/2);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tinit();\n\t\tfile = new File(dir, getImageFileName(uuid, FileType.FILETYPE_JPG));\n\t}\n\t@Override\n\tpublic void render(Artist artist) {\n\t\tartist.imageJpeg(file, top_left.x, top_right.x, top_left.y, bottom_left.y);\n\t}\n\tpublic boolean checkFileName(String fileName) {\n\t\tFileType fileType = getImageFileType(fileName);\n\t\treturn fileName.endsWith(getImageFileName(uuid, fileType));\n\t}\n\t\n\tpublic void setFile(String fileName, boolean constrainAspect) {\n\t\t// file = new File(\"/mnt/sdcard/d5efe912-4b03-4ed7-a124-bff4984691d6.jpg\");\n\t\tif (!checkFileName(fileName)) {\n\t\t\tLog.e(TAG, \"filename must be uuid.ext\");\n\t\t}\n\t\tfile = new File(fileName);\n\t\ttry {\n\t\t\tloadBitmap();\n\t\t} catch (IOException e) {\n\t\t\tLog.e(TAG, \"Unable to load file \" + file.toString() + \" (missing?\");\n\t\t}\n\t\tthis.constrainAspect = constrainAspect;\n\t\tif (constrainAspect) {\n\t\t\tfloat w = top_right.x - top_left.x;\n\t\t\tfloat h = bottom_right.y - top_right.y;\nNext line of code:\n", "input": "", "context": "package name.vbraun.view.write;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.LinkedList;\nimport java.util.UUID;\nimport com.write.Quill.artist.Artist;\nimport junit.framework.Assert;\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.Paint.Style;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.net.Uri;\nimport android.util.FloatMath;\nimport android.util.Log;\nimport android.widget.ImageButton;\nimport android.widget.Toast;\npublic class GraphicsImage extends GraphicsControlpoint {\n\tprivate static final String TAG = \"GraphicsImage\";\n\tprivate Controlpoint bottom_left, bottom_right, top_left, top_right,\n\t\t\tcenter;\n\tprivate final Paint paint = new Paint();\n\tprivate final Paint outline = new Paint();\n\tprivate final Rect rect = new Rect();\n\tprivate final RectF rectF = new RectF();\n\tprivate Bitmap bitmap = null;\n\tprivate File file = null;\n\tprivate int height, width;\n\tprivate float sqrtAspect;\n\tpublic enum FileType {\n\t\tFILETYPE_NONE, FILETYPE_PNG, FILETYPE_JPG\n\t}\n\t\n\tpublic static String getImageFileExt(FileType fileType) {\n\t\tif (fileType == FileType.FILETYPE_JPG) {\n\t\t\treturn \".jpg\";\n\t\t} else if (fileType == FileType.FILETYPE_PNG) {\n\t\t\treturn \".png\";\n\t\t} else {\n\t\t\tAssert.fail();\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tpublic static FileType getImageFileType(String fileName) {\n\t\tfor (FileType t : FileType.values()) {\n\t\t\tif (t == FileType.FILETYPE_NONE)\n\t\t\t\tcontinue;\n\t\t\tString ext = getImageFileExt(t);\n\t\t\tif (fileName.endsWith(ext))\n\t\t\t\treturn t;\n\t\t}\n\t\treturn FileType.FILETYPE_NONE;\n\t}\n\t/**\n\t * Helper to construct a file name out of uuid and file type\n\t * @param uuid\n\t * @param fileType\n\t * @return\n\t */\n\tpublic static String getImageFileName(UUID uuid, FileType fileType) {\n\t\treturn uuid.toString() + getImageFileExt(fileType);\n\t}\n\tpublic String getFileName() {\n\t\treturn file.getAbsolutePath();\n\t}\n\t\n\t// persistent data\n\tprotected UUID uuid = null;\n\tprotected boolean constrainAspect = true;\n\tprotected Rect cropRect = new Rect();\n\tpublic UUID getUuid() {\n\t\tif (uuid == null)\n\t\t\tuuid = UUID.randomUUID();\n\t\treturn uuid;\n\t}\n\tpublic Uri getFileUri() {\n\t\tif (file == null)\n\t\t\treturn null;   // no picture selected yet\n\t\telse\n\t\t\treturn Uri.fromFile(file);\n\t}\n\t\n\tpublic File getFile() {\n\t\treturn file;\n\t}\n\tpublic boolean getConstrainAspect() {\n\t\treturn constrainAspect;\n\t}\n\t\n\tpublic FileType getFileType() {\n\t\treturn getImageFileType(file.getName());\n\t}\n\t/**\n\t * Construct a new image\n\t * \n\t * @param transform\n\t *            The current transformation\n\t * @param x\n\t *            Screen x coordinate\n\t * @param y\n\t *            Screen y coordinate\n\t * @param penThickness\n\t * @param penColor\n\t */\n\tprotected GraphicsImage(Transformation transform, float x, float y) {\n\t\tsuper(Tool.IMAGE);\n\t\tsetTransform(transform);\n\t\tbottom_left = new Controlpoint(transform, x, y);\n\t\tbottom_right = new Controlpoint(transform, x, y);\n\t\ttop_left = new Controlpoint(transform, x, y);\n\t\ttop_right = new Controlpoint(transform, x, y);\n\t\tcenter = new Controlpoint(transform, x, y);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tinit();\n\t}\n\t\n\t/**\n\t * The copy constructor\n\t * @param image\n\t * @param dir the directory to copy the image file to\n\t */\n\tprotected GraphicsImage(final GraphicsImage image, File dir) {\n\t\tsuper(image);\n\t\tbottom_left = new Controlpoint(image.bottom_left);\n\t\tbottom_right = new Controlpoint(image.bottom_right);\n\t\ttop_left = new Controlpoint(image.top_left);\n\t\ttop_right = new Controlpoint(image.top_right);\n\t\tcenter = new Controlpoint(image.center);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tconstrainAspect = image.constrainAspect;\n\t\tinit();\n\t\tif (image.getFile() == null) \n\t\t\treturn;\n\t\tfinal String fileName = getImageFileName(getUuid(), image.getFileType());\n\t\tfile = new File(dir, fileName);\n\t\tcom.write.Quill.image.Util.copyfile(image.getFile(), file);\n\t}\n\tprivate void init() {\n\t\tpaint.setARGB(0xff, 0x5f, 0xff, 0x5f);\n\t\tpaint.setStyle(Style.FILL);\n\t\tpaint.setStrokeWidth(0);\n\t\tpaint.setAntiAlias(true);\n\t\tpaint.setStrokeCap(Paint.Cap.ROUND);\n\t\toutline.setARGB(0xff, 0x0, 0xaa, 0x0);\n\t\toutline.setStyle(Style.STROKE);\n\t\toutline.setStrokeWidth(4);\n\t\toutline.setAntiAlias(true);\n\t\toutline.setStrokeCap(Paint.Cap.ROUND);\n\t}\n\t@Override\n\tprotected Controlpoint initialControlpoint() {\n\t\treturn bottom_right;\n\t}\n\t@Override\n\tpublic boolean intersects(RectF screenRect) {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic void draw(Canvas c, RectF bounding_box) {\n\t\tif (file != null && bitmap == null)\n\t\t\ttry {\n\t\t\t\tloadBitmap();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(TAG, \"loading bitmap: \"+e.getMessage());\n\t\t\t}\n\t\t\n\t\tcomputeScreenRect();\n\t\tc.clipRect(0, 0, c.getWidth(), c.getHeight(), android.graphics.Region.Op.REPLACE);\n\t\tif (bitmap == null) {\n\t\t\tc.drawRect(rect, paint);\n\t\t\tc.drawRect(rect, outline);\n\t\t} else {\n\t\t\tc.drawBitmap(bitmap, null, rect, null);\n\t\t}\n\t}\n\tprivate Controlpoint oppositeControlpoint(Controlpoint point) {\n\t\tif (point == bottom_right)\n\t\t\treturn top_left;\n\t\tif (point == bottom_left)\n\t\t\treturn top_right;\n\t\tif (point == top_right)\n\t\t\treturn bottom_left;\n\t\tif (point == top_left)\n\t\t\treturn bottom_right;\n\t\tif (point == center)\n\t\t\treturn center;\n\t\tAssert.fail(\"Unreachable\");\n\t\treturn null;\n\t}\n\tprivate final static float minDistancePixel = 30;\n\t@Override\n\tvoid controlpointMoved(Controlpoint point) {\n\t\tsuper.controlpointMoved(point);\n\t\tif (point == center) {\n\t\t\tfloat width2 = (bottom_right.x - bottom_left.x) / 2;\n\t\t\tfloat height2 = (top_right.y - bottom_right.y) / 2;\n\t\t\tbottom_right.y = bottom_left.y = center.y - height2;\n\t\t\ttop_right.y = top_left.y = center.y + height2;\n\t\t\tbottom_right.x = top_right.x = center.x + width2;\n\t\t\tbottom_left.x = top_left.x = center.x - width2;\n\t\t} else {\n\t\t\tControlpoint opposite = oppositeControlpoint(point);\n\t\t\tfloat dx = opposite.x - point.x;\n\t\t\tfloat dy = opposite.y - point.y;\n\t\t\tfloat minDistance = minDistancePixel / scale;\n\t\t\tif (-minDistance <= dx && dx <= minDistance) {\n\t\t\t\tfloat sgn = Math.signum(dx);\n\t\t\t\topposite.x = point.x + sgn * minDistance;\n\t\t\t\tdx = sgn * minDistance;\n\t\t\t}\n\t\t\tif (-minDistance <= dy && dy <= minDistance) {\n\t\t\t\tfloat sgn = Math.signum(dy);\n\t\t\t\topposite.y = point.y + sgn * minDistance;\n\t\t\t\tdy = sgn *minDistance;\n\t\t\t}\n\t\t\tif (constrainAspect && bitmap != null) {\n\t\t\t\tfloat r = (Math.abs(dx)+Math.abs(dy))/2;\n\t\t\t\tdx = r * sqrtAspect * Math.signum(dx);\n\t\t\t\tdy = r / sqrtAspect * Math.signum(dy);\n\t\t\t\t// Log.d(TAG, \"move \"+dx + \" \"+dy + \" \" + r + \" \"+(sqrtAspect*sqrtAspect));\n\t\t\t}\n\t\t\trectF.bottom = opposite.y;\n\t\t\trectF.top = opposite.y - dy;\n\t\t\trectF.left = opposite.x;\n\t\t\trectF.right = opposite.x - dx;\n\t\t\trectF.sort();\n\t\t\tbottom_right.y = bottom_left.y = rectF.bottom;\n\t\t\ttop_right.y = top_left.y = rectF.top;\n\t\t\tbottom_right.x = top_right.x = rectF.right;\n\t\t\tbottom_left.x = top_left.x = rectF.left;\n\t\t\tcenter.x = rectF.left + (rectF.right - rectF.left) / 2;\n\t\t\tcenter.y = rectF.bottom + (rectF.top - rectF.bottom) / 2;\n\t\t}\n\t}\n\tprivate void computeScreenRect() {\n\t\trectF.bottom = bottom_left.screenY();\n\t\trectF.top = top_left.screenY();\n\t\trectF.left = bottom_left.screenX();\n\t\trectF.right = bottom_right.screenX();\n\t\trectF.sort();\n\t\trectF.round(rect);\n\t}\n\tpublic void writeToStream(DataOutputStream out) throws IOException {\n\t\tout.writeInt(1);  // protocol #1\n\t\tout.writeUTF(uuid.toString());\n\t\tout.writeFloat(top_left.x);\n\t\tout.writeFloat(top_right.x);\n\t\tout.writeFloat(top_left.y);\n\t\tout.writeFloat(bottom_left.y);\n\t\tout.writeBoolean(constrainAspect);\n\t}\n\tpublic GraphicsImage(DataInputStream in, File dir) throws IOException {\n\t\tsuper(Tool.IMAGE);\n\t\tint version = in.readInt();\n\t\tif (version > 1)\n\t\t\tthrow new IOException(\"Unknown image version!\");\n\t\tuuid = UUID.fromString(in.readUTF());\n\t\tfloat left   = in.readFloat(); \n\t\tfloat right  = in.readFloat();\n\t\tfloat top    = in.readFloat();\n\t\tfloat bottom = in.readFloat();  \t\t\n\t\tconstrainAspect = in.readBoolean();\n\t\t\n\t\tbottom_left = new Controlpoint(transform, left, bottom);\n\t\tbottom_right = new Controlpoint(transform, right, bottom);\n\t\ttop_left = new Controlpoint(transform, left, top);\n\t\ttop_right = new Controlpoint(transform, right, top);\n\t\tcenter = new Controlpoint(transform, (left+right)/2, (top+bottom)/2);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tinit();\n\t\tfile = new File(dir, getImageFileName(uuid, FileType.FILETYPE_JPG));\n\t}\n\t@Override\n\tpublic void render(Artist artist) {\n\t\tartist.imageJpeg(file, top_left.x, top_right.x, top_left.y, bottom_left.y);\n\t}\n\tpublic boolean checkFileName(String fileName) {\n\t\tFileType fileType = getImageFileType(fileName);\n\t\treturn fileName.endsWith(getImageFileName(uuid, fileType));\n\t}\n\t\n\tpublic void setFile(String fileName, boolean constrainAspect) {\n\t\t// file = new File(\"/mnt/sdcard/d5efe912-4b03-4ed7-a124-bff4984691d6.jpg\");\n\t\tif (!checkFileName(fileName)) {\n\t\t\tLog.e(TAG, \"filename must be uuid.ext\");\n\t\t}\n\t\tfile = new File(fileName);\n\t\ttry {\n\t\t\tloadBitmap();\n\t\t} catch (IOException e) {\n\t\t\tLog.e(TAG, \"Unable to load file \" + file.toString() + \" (missing?\");\n\t\t}\n\t\tthis.constrainAspect = constrainAspect;\n\t\tif (constrainAspect) {\n\t\t\tfloat w = top_right.x - top_left.x;\n\t\t\tfloat h = bottom_right.y - top_right.y;\n", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "length": 1042, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "aa71378f81d8fee260faf0e1cf25590c02b8a2f4ff5ded68", "pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w + h * h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tInputStream is = new FileInputStream(file);\n\t\tBitmapFactory.Options options = new BitmapFactory.Options();\n\t\toptions.inJustDecodeBounds = true;\n\t\tBitmapFactory.decode"}
{"prompt": "Please complete the code given below. \nimport gtk\nimport gobject\nimport pygame\nimport pygame.event \nclass _MockEvent(object):\n    def __init__(self, keyval):\n        self.keyval = keyval\nclass Translator(object):\n    key_trans = {\n        'Alt_L': pygame.K_LALT,\n        'Alt_R': pygame.K_RALT,\n        'Control_L': pygame.K_LCTRL,\n        'Control_R': pygame.K_RCTRL,\n        'Shift_L': pygame.K_LSHIFT,\n        'Shift_R': pygame.K_RSHIFT,\n        'Super_L': pygame.K_LSUPER,\n        'Super_R': pygame.K_RSUPER,\n        'KP_Page_Up' : pygame.K_KP9, \n        'KP_Page_Down' : pygame.K_KP3,\n        'KP_End' : pygame.K_KP1, \n        'KP_Home' : pygame.K_KP7,\n        'KP_Up' : pygame.K_KP8,\n        'KP_Down' : pygame.K_KP2,\n        'KP_Left' : pygame.K_KP4,\n        'KP_Right' : pygame.K_KP6,\n        'numbersign' : pygame.K_HASH,\n        'percent' : ord('%'),\n        'exclam' : pygame.K_EXCLAIM,\n\t'asciicircum' : pygame.K_CARET,\n        'parenleft' : pygame.K_LEFTPAREN,\n        'parenright' : pygame.K_RIGHTPAREN,\n        'braceleft' : ord('{'),\n        'braceright' : ord('}'),\n        'bracketleft' : pygame.K_LEFTBRACKET,\n        'bracketright' : pygame.K_RIGHTBRACKET,\n        'apostrophe' : ord('\\''),\n        'equal' : pygame.K_EQUALS,\n        'grave' : pygame.K_BACKQUOTE,\n        'Caps_Lock' : pygame.K_CAPSLOCK,\n        'Page_Up' : pygame.K_PAGEUP,\n        'Page_Down' : pygame.K_PAGEDOWN,\n        'Num_Lock' : pygame.K_NUMLOCK,\n        'Bar' : ord('|')\n    }\n    \n    mod_map = {\n        pygame.K_LALT: pygame.KMOD_LALT,\n        pygame.K_RALT: pygame.KMOD_RALT,\n        pygame.K_LCTRL: pygame.KMOD_LCTRL,\n        pygame.K_RCTRL: pygame.KMOD_RCTRL,\n        pygame.K_LSHIFT: pygame.KMOD_LSHIFT,\n        pygame.K_RSHIFT: pygame.KMOD_RSHIFT,\n    }\n    \n    def __init__(self, mainwindow, inner_evb):\n        \"\"\"Initialise the Translator with the windows to which to listen\"\"\"\n        self._mainwindow = mainwindow\n        self._inner_evb = inner_evb\n        # Enable events\n        # (add instead of set here because the main window is already realized)\n        self._mainwindow.add_events(\n            gtk.gdk.KEY_PRESS_MASK | \\\n            gtk.gdk.KEY_RELEASE_MASK | \\\n            gtk.gdk.VISIBILITY_NOTIFY_MASK\n        )\n        \n        self._inner_evb.set_events(\n            gtk.gdk.POINTER_MOTION_MASK | \\\n            gtk.gdk.POINTER_MOTION_HINT_MASK | \\\n            gtk.gdk.BUTTON_MOTION_MASK | \\\n            gtk.gdk.BUTTON_PRESS_MASK | \\\n            gtk.gdk.BUTTON_RELEASE_MASK\n        )\n        self._mainwindow.set_flags(gtk.CAN_FOCUS)\n        self._inner_evb.set_flags(gtk.CAN_FOCUS)\n        \n        # Callback functions to link the event systems\n        self._mainwindow.connect('unrealize', self._quit_cb)\n        self._mainwindow.connect('visibility_notify_event', self._visibility)\n        self._inner_evb.connect('key_press_event', self._keydown_cb)\n        self._inner_evb.connect('key_release_event', self._keyup_cb)\n        self._inner_evb.connect('button_press_event', self._mousedown_cb)\n        self._inner_evb.connect('button_release_event', self._mouseup_cb)\n        self._inner_evb.connect('motion-notify-event', self._mousemove_cb)\n        self._inner_evb.connect('expose-event', self._expose_cb)\n        self._inner_evb.connect('configure-event', self._resize_cb)\n        self._inner_evb.connect('screen-changed', self._screen_changed_cb)\n        \n        # Internal data\n        self.__stopped = False\n        self.__keystate = [0] * 323\n        self.__button_state = [0,0,0]\n        self.__mouse_pos = (0,0)\n        self.__repeat = (None, None)\n        self.__held = set()\n        self.__held_time_left = {}\n        self.__held_last_time = {}\n        self.__held_last_value = {}\n        self.__tick_id = None\n    def hook_pygame(self):\n        pygame.key.get_pressed = self._get_pressed\n        pygame.key.set_repeat = self._set_repeat\n        pygame.mouse.get_pressed = self._get_mouse_pressed\n        pygame.mouse.get_pos = self._get_mouse_pos\n        \n    def _visibility(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n        return False\n        \n    def _expose_cb(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n        return True\n    def _resize_cb(self, widget, event):\n        evt = pygame.event.Event(pygame.VIDEORESIZE, \n                                 size=(event.width,event.height), width=event.width, height=event.height)\n        pygame.event.post(evt)\n        return False # continue processing\n        \n    def _screen_changed_cb(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n    def _quit_cb(self, data=None):\n        self.__stopped = True\n        pygame.event.post(pygame.event.Event(pygame.QUIT))\n    def _keydown_cb(self, widget, event):\n        key = event.hardware_keycode\n        keyval = event.keyval\n        if key in self.__held:\n            return True\n        else:\n            if self.__repeat[0] is not None:\n                self.__held_last_time[key] = pygame.time.get_ticks()\n                self.__held_time_left[key] = self.__repeat[0]\n                self.__held_last_value[key] = keyval\n            self.__held.add(key)\n        return self._keyevent(widget, event, pygame.KEYDOWN)\n        \n    def _keyup_cb(self, widget, event):\n        key = event.hardware_keycode\n        if self.__repeat[0] is not None:\n            if key in self.__held:\n                # This is possibly false if set_repeat() is called with a key held\n                del self.__held_time_left[key]\n                del self.__held_last_time[key]\n                del self.__held_last_value[key]\n        self.__held.discard(key)\n        return self._keyevent(widget, event, pygame.KEYUP)\n        \n    def _keymods(self):\n        mod = 0\n        for key_val, mod_val in self.mod_map.iteritems():\n            mod |= self.__keystate[key_val] and mod_val\n        return mod\n        \n    def _keyevent(self, widget, event, type):\n        key = gtk.gdk.keyval_name(event.keyval)\n        if key is None:\n            # No idea what this key is.\n            return False \n        \n        keycode = None\n        if key in self.key_trans:\n            keycode = self.key_trans[key]\n        elif hasattr(pygame, 'K_'+key.upper()):\n            keycode = getattr(pygame, 'K_'+key.upper())\n        elif hasattr(pygame, 'K_'+key.lower()):\n            keycode = getattr(pygame, 'K_'+key.lower())\n        elif key == 'XF86Start':\n            # view source request, specially handled...\n            self._mainwindow.view_source()\n        else:\n            print 'Key %s unrecognized' % key\n            \n        if keycode is not None:\n            if type == pygame.KEYDOWN:\n                mod = self._keymods()\n            self.__keystate[keycode] = type == pygame.KEYDOWN\n            if type == pygame.KEYUP:\n                mod = self._keymods()\n            ukey = unichr(gtk.gdk.keyval_to_unicode(event.keyval))\n            if ukey == '\\000':\n                ukey = ''\n            evt = pygame.event.Event(type, key=keycode, unicode=ukey, mod=mod)\n            self._post(evt)\n            \n        return True\n    def _get_pressed(self):\n        return self.__keystate\n    def _get_mouse_pressed(self):\n        return self.__button_state\n    def _mousedown_cb(self, widget, event):\n        self.__button_state[event.button-1] = 1\n        widget.grab_focus()\n        return self._mouseevent(widget, event, pygame.MOUSEBUTTONDOWN)\n    def _mouseup_cb(self, widget, event):\n        self.__button_state[event.button-1] = 0\n        return self._mouseevent(widget, event, pygame.MOUSEBUTTONUP)\n        \n    def _mouseevent(self, widget, event, type):\n        evt = pygame.event.Event(type, button=event.button, pos=(event.x, event.y))\n        self._post(evt)\n        return True\n        \n    def _mousemove_cb(self, widget, event):\n        # From http://www.learningpython.com/2006/07/25/writing-a-custom-widget-using-pygtk/\n        # if this is a hint, then let's get all the necessary \n        # information, if not it's all we need.\n        if event.is_hint:\n            x, y, state = event.window.get_pointer()\n        else:\n            x = event.x\n            y = event.y\n            state = event.state\n        rel = (x - self.__mouse_pos[0], y - self.__mouse_pos[1])\n        self.__mouse_pos = (x, y)\n        \n        self.__button_state = [\n            state & gtk.gdk.BUTTON1_MASK and 1 or 0,\n            state & gtk.gdk.BUTTON2_MASK and 1 or 0,\n            state & gtk.gdk.BUTTON3_MASK and 1 or 0,\n        ]\n        \n        evt = pygame.event.Event(pygame.MOUSEMOTION,\n                                 pos=self.__mouse_pos, rel=rel, buttons=self.__button_state)\n        self._post(evt)\n        return True\n        \n    def _tick_cb(self):\n        cur_time = pygame.time.get_ticks()\n        for key in self.__held:\n            delta = cur_time - self.__held_last_time[key] \n            self.__held_last_time[key] = cur_time\n            \n            self.__held_time_left[key] -= delta\n            if self.__held_time_left[key] <= 0:\n                self.__held_time_left[key] = self.__repeat[1]\n                self._keyevent(None, _MockEvent(self.__held_last_value[key]), pygame.KEYDOWN)\n                \n        return True\n        \n    def _set_repeat(self, delay=None, interval=None):\n        if delay is not None and self.__repeat[0] is None:\nNext line of code:\n", "input": "", "context": "import gtk\nimport gobject\nimport pygame\nimport pygame.event \nclass _MockEvent(object):\n    def __init__(self, keyval):\n        self.keyval = keyval\nclass Translator(object):\n    key_trans = {\n        'Alt_L': pygame.K_LALT,\n        'Alt_R': pygame.K_RALT,\n        'Control_L': pygame.K_LCTRL,\n        'Control_R': pygame.K_RCTRL,\n        'Shift_L': pygame.K_LSHIFT,\n        'Shift_R': pygame.K_RSHIFT,\n        'Super_L': pygame.K_LSUPER,\n        'Super_R': pygame.K_RSUPER,\n        'KP_Page_Up' : pygame.K_KP9, \n        'KP_Page_Down' : pygame.K_KP3,\n        'KP_End' : pygame.K_KP1, \n        'KP_Home' : pygame.K_KP7,\n        'KP_Up' : pygame.K_KP8,\n        'KP_Down' : pygame.K_KP2,\n        'KP_Left' : pygame.K_KP4,\n        'KP_Right' : pygame.K_KP6,\n        'numbersign' : pygame.K_HASH,\n        'percent' : ord('%'),\n        'exclam' : pygame.K_EXCLAIM,\n\t'asciicircum' : pygame.K_CARET,\n        'parenleft' : pygame.K_LEFTPAREN,\n        'parenright' : pygame.K_RIGHTPAREN,\n        'braceleft' : ord('{'),\n        'braceright' : ord('}'),\n        'bracketleft' : pygame.K_LEFTBRACKET,\n        'bracketright' : pygame.K_RIGHTBRACKET,\n        'apostrophe' : ord('\\''),\n        'equal' : pygame.K_EQUALS,\n        'grave' : pygame.K_BACKQUOTE,\n        'Caps_Lock' : pygame.K_CAPSLOCK,\n        'Page_Up' : pygame.K_PAGEUP,\n        'Page_Down' : pygame.K_PAGEDOWN,\n        'Num_Lock' : pygame.K_NUMLOCK,\n        'Bar' : ord('|')\n    }\n    \n    mod_map = {\n        pygame.K_LALT: pygame.KMOD_LALT,\n        pygame.K_RALT: pygame.KMOD_RALT,\n        pygame.K_LCTRL: pygame.KMOD_LCTRL,\n        pygame.K_RCTRL: pygame.KMOD_RCTRL,\n        pygame.K_LSHIFT: pygame.KMOD_LSHIFT,\n        pygame.K_RSHIFT: pygame.KMOD_RSHIFT,\n    }\n    \n    def __init__(self, mainwindow, inner_evb):\n        \"\"\"Initialise the Translator with the windows to which to listen\"\"\"\n        self._mainwindow = mainwindow\n        self._inner_evb = inner_evb\n        # Enable events\n        # (add instead of set here because the main window is already realized)\n        self._mainwindow.add_events(\n            gtk.gdk.KEY_PRESS_MASK | \\\n            gtk.gdk.KEY_RELEASE_MASK | \\\n            gtk.gdk.VISIBILITY_NOTIFY_MASK\n        )\n        \n        self._inner_evb.set_events(\n            gtk.gdk.POINTER_MOTION_MASK | \\\n            gtk.gdk.POINTER_MOTION_HINT_MASK | \\\n            gtk.gdk.BUTTON_MOTION_MASK | \\\n            gtk.gdk.BUTTON_PRESS_MASK | \\\n            gtk.gdk.BUTTON_RELEASE_MASK\n        )\n        self._mainwindow.set_flags(gtk.CAN_FOCUS)\n        self._inner_evb.set_flags(gtk.CAN_FOCUS)\n        \n        # Callback functions to link the event systems\n        self._mainwindow.connect('unrealize', self._quit_cb)\n        self._mainwindow.connect('visibility_notify_event', self._visibility)\n        self._inner_evb.connect('key_press_event', self._keydown_cb)\n        self._inner_evb.connect('key_release_event', self._keyup_cb)\n        self._inner_evb.connect('button_press_event', self._mousedown_cb)\n        self._inner_evb.connect('button_release_event', self._mouseup_cb)\n        self._inner_evb.connect('motion-notify-event', self._mousemove_cb)\n        self._inner_evb.connect('expose-event', self._expose_cb)\n        self._inner_evb.connect('configure-event', self._resize_cb)\n        self._inner_evb.connect('screen-changed', self._screen_changed_cb)\n        \n        # Internal data\n        self.__stopped = False\n        self.__keystate = [0] * 323\n        self.__button_state = [0,0,0]\n        self.__mouse_pos = (0,0)\n        self.__repeat = (None, None)\n        self.__held = set()\n        self.__held_time_left = {}\n        self.__held_last_time = {}\n        self.__held_last_value = {}\n        self.__tick_id = None\n    def hook_pygame(self):\n        pygame.key.get_pressed = self._get_pressed\n        pygame.key.set_repeat = self._set_repeat\n        pygame.mouse.get_pressed = self._get_mouse_pressed\n        pygame.mouse.get_pos = self._get_mouse_pos\n        \n    def _visibility(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n        return False\n        \n    def _expose_cb(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n        return True\n    def _resize_cb(self, widget, event):\n        evt = pygame.event.Event(pygame.VIDEORESIZE, \n                                 size=(event.width,event.height), width=event.width, height=event.height)\n        pygame.event.post(evt)\n        return False # continue processing\n        \n    def _screen_changed_cb(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n    def _quit_cb(self, data=None):\n        self.__stopped = True\n        pygame.event.post(pygame.event.Event(pygame.QUIT))\n    def _keydown_cb(self, widget, event):\n        key = event.hardware_keycode\n        keyval = event.keyval\n        if key in self.__held:\n            return True\n        else:\n            if self.__repeat[0] is not None:\n                self.__held_last_time[key] = pygame.time.get_ticks()\n                self.__held_time_left[key] = self.__repeat[0]\n                self.__held_last_value[key] = keyval\n            self.__held.add(key)\n        return self._keyevent(widget, event, pygame.KEYDOWN)\n        \n    def _keyup_cb(self, widget, event):\n        key = event.hardware_keycode\n        if self.__repeat[0] is not None:\n            if key in self.__held:\n                # This is possibly false if set_repeat() is called with a key held\n                del self.__held_time_left[key]\n                del self.__held_last_time[key]\n                del self.__held_last_value[key]\n        self.__held.discard(key)\n        return self._keyevent(widget, event, pygame.KEYUP)\n        \n    def _keymods(self):\n        mod = 0\n        for key_val, mod_val in self.mod_map.iteritems():\n            mod |= self.__keystate[key_val] and mod_val\n        return mod\n        \n    def _keyevent(self, widget, event, type):\n        key = gtk.gdk.keyval_name(event.keyval)\n        if key is None:\n            # No idea what this key is.\n            return False \n        \n        keycode = None\n        if key in self.key_trans:\n            keycode = self.key_trans[key]\n        elif hasattr(pygame, 'K_'+key.upper()):\n            keycode = getattr(pygame, 'K_'+key.upper())\n        elif hasattr(pygame, 'K_'+key.lower()):\n            keycode = getattr(pygame, 'K_'+key.lower())\n        elif key == 'XF86Start':\n            # view source request, specially handled...\n            self._mainwindow.view_source()\n        else:\n            print 'Key %s unrecognized' % key\n            \n        if keycode is not None:\n            if type == pygame.KEYDOWN:\n                mod = self._keymods()\n            self.__keystate[keycode] = type == pygame.KEYDOWN\n            if type == pygame.KEYUP:\n                mod = self._keymods()\n            ukey = unichr(gtk.gdk.keyval_to_unicode(event.keyval))\n            if ukey == '\\000':\n                ukey = ''\n            evt = pygame.event.Event(type, key=keycode, unicode=ukey, mod=mod)\n            self._post(evt)\n            \n        return True\n    def _get_pressed(self):\n        return self.__keystate\n    def _get_mouse_pressed(self):\n        return self.__button_state\n    def _mousedown_cb(self, widget, event):\n        self.__button_state[event.button-1] = 1\n        widget.grab_focus()\n        return self._mouseevent(widget, event, pygame.MOUSEBUTTONDOWN)\n    def _mouseup_cb(self, widget, event):\n        self.__button_state[event.button-1] = 0\n        return self._mouseevent(widget, event, pygame.MOUSEBUTTONUP)\n        \n    def _mouseevent(self, widget, event, type):\n        evt = pygame.event.Event(type, button=event.button, pos=(event.x, event.y))\n        self._post(evt)\n        return True\n        \n    def _mousemove_cb(self, widget, event):\n        # From http://www.learningpython.com/2006/07/25/writing-a-custom-widget-using-pygtk/\n        # if this is a hint, then let's get all the necessary \n        # information, if not it's all we need.\n        if event.is_hint:\n            x, y, state = event.window.get_pointer()\n        else:\n            x = event.x\n            y = event.y\n            state = event.state\n        rel = (x - self.__mouse_pos[0], y - self.__mouse_pos[1])\n        self.__mouse_pos = (x, y)\n        \n        self.__button_state = [\n            state & gtk.gdk.BUTTON1_MASK and 1 or 0,\n            state & gtk.gdk.BUTTON2_MASK and 1 or 0,\n            state & gtk.gdk.BUTTON3_MASK and 1 or 0,\n        ]\n        \n        evt = pygame.event.Event(pygame.MOUSEMOTION,\n                                 pos=self.__mouse_pos, rel=rel, buttons=self.__button_state)\n        self._post(evt)\n        return True\n        \n    def _tick_cb(self):\n        cur_time = pygame.time.get_ticks()\n        for key in self.__held:\n            delta = cur_time - self.__held_last_time[key] \n            self.__held_last_time[key] = cur_time\n            \n            self.__held_time_left[key] -= delta\n            if self.__held_time_left[key] <= 0:\n                self.__held_time_left[key] = self.__repeat[1]\n                self._keyevent(None, _MockEvent(self.__held_last_value[key]), pygame.KEYDOWN)\n                \n        return True\n        \n    def _set_repeat(self, delay=None, interval=None):\n        if delay is not None and self.__repeat[0] is None:\n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "length": 703, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "8470084fed939b4e4fcf2f79678790b3986d9ec82bc29985", "pred": "```\n            self.__repeat = (delay, interval)\n        elif delay is None and self.__repeat[0] is not None:\n            self.__repeat = (None, None)\n        self.__tick_id = gobject.timeout_add(10, self._tick_cb)\n    def _post(self, event):\n"}
{"prompt": "Please complete the code given below. \nimport json\nimport os\nimport sys\nfrom datetime import datetime, timedelta\nimport wptserve\nfrom wptserve import sslutils\nfrom . import environment as env\nfrom . import instruments\nfrom . import mpcontext\nfrom . import products\nfrom . import testloader\nfrom . import wptcommandline\nfrom . import wptlogging\nfrom . import wpttest\nfrom mozlog import capture, handlers\nfrom .font import FontInstaller\nfrom .testrunner import ManagerGroup\nhere = os.path.dirname(__file__)\nlogger = None\n\"\"\"Runner for web-platform-tests\nThe runner has several design goals:\n* Tests should run with no modification from upstream.\n* Tests should be regarded as \"untrusted\" so that errors, timeouts and even\n  crashes in the tests can be handled without failing the entire test run.\n* For performance tests can be run in multiple browsers in parallel.\nThe upstream repository has the facility for creating a test manifest in JSON\nformat. This manifest is used directly to determine which tests exist. Local\nmetadata files are used to store the expected test results.\n\"\"\"\ndef setup_logging(*args, **kwargs):\n    global logger\n    logger = wptlogging.setup(*args, **kwargs)\n    return logger\ndef get_loader(test_paths, product, debug=None, run_info_extras=None, chunker_kwargs=None,\n               test_groups=None, **kwargs):\n    if run_info_extras is None:\n        run_info_extras = {}\n    run_info = wpttest.get_run_info(kwargs[\"run_info\"], product,\n                                    browser_version=kwargs.get(\"browser_version\"),\n                                    browser_channel=kwargs.get(\"browser_channel\"),\n                                    verify=kwargs.get(\"verify\"),\n                                    debug=debug,\n                                    extras=run_info_extras,\n                                    enable_webrender=kwargs.get(\"enable_webrender\"))\n    test_manifests = testloader.ManifestLoader(test_paths, force_manifest_update=kwargs[\"manifest_update\"],\n                                               manifest_download=kwargs[\"manifest_download\"]).load()\n    manifest_filters = []\n    include = kwargs[\"include\"]\n    if kwargs[\"include_file\"]:\n        include = include or []\n        include.extend(testloader.read_include_from_file(kwargs[\"include_file\"]))\n    if test_groups:\n        include = testloader.update_include_for_groups(test_groups, include)\n    if include or kwargs[\"exclude\"] or kwargs[\"include_manifest\"] or kwargs[\"default_exclude\"]:\n        manifest_filters.append(testloader.TestFilter(include=include,\n                                                      exclude=kwargs[\"exclude\"],\n                                                      manifest_path=kwargs[\"include_manifest\"],\n                                                      test_manifests=test_manifests,\n                                                      explicit=kwargs[\"default_exclude\"]))\n    ssl_enabled = sslutils.get_cls(kwargs[\"ssl_type\"]).ssl_enabled\n    h2_enabled = wptserve.utils.http2_compatible()\n    test_loader = testloader.TestLoader(test_manifests,\n                                        kwargs[\"test_types\"],\n                                        run_info,\n                                        manifest_filters=manifest_filters,\n                                        chunk_type=kwargs[\"chunk_type\"],\n                                        total_chunks=kwargs[\"total_chunks\"],\n                                        chunk_number=kwargs[\"this_chunk\"],\n                                        include_https=ssl_enabled,\n                                        include_h2=h2_enabled,\n                                        include_webtransport_h3=kwargs[\"enable_webtransport_h3\"],\n                                        skip_timeout=kwargs[\"skip_timeout\"],\n                                        skip_implementation_status=kwargs[\"skip_implementation_status\"],\n                                        chunker_kwargs=chunker_kwargs)\n    return run_info, test_loader\ndef list_test_groups(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for item in sorted(test_loader.groups(kwargs[\"test_types\"])):\n        print(item)\ndef list_disabled(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    rv = []\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for test_type, tests in test_loader.disabled_tests.items():\n        for test in tests:\n            rv.append({\"test\": test.id, \"reason\": test.disabled()})\n    print(json.dumps(rv, indent=2))\ndef list_tests(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for test in test_loader.test_ids:\n        print(test)\ndef get_pause_after_test(test_loader, **kwargs):\n    if kwargs[\"pause_after_test\"] is None:\n        if kwargs[\"repeat_until_unexpected\"]:\n            return False\n        if kwargs[\"headless\"]:\n            return False\n        if kwargs[\"debug_test\"]:\n            return True\n        tests = test_loader.tests\n        is_single_testharness = (sum(len(item) for item in tests.values()) == 1 and\n                                 len(tests.get(\"testharness\", [])) == 1)\n        if kwargs[\"repeat\"] == 1 and kwargs[\"rerun\"] == 1 and is_single_testharness:\n            return True\n        return False\n    return kwargs[\"pause_after_test\"]\ndef run_test_iteration(test_status, test_loader, test_source_kwargs, test_source_cls, run_info,\n                       recording, test_environment, product, run_test_kwargs):\n    \"\"\"Runs the entire test suite.\n    This is called for each repeat run requested.\"\"\"\n    tests = []\n    for test_type in test_loader.test_types:\n        tests.extend(test_loader.tests[test_type])\n    try:\n        test_groups = test_source_cls.tests_by_group(\n            tests, **test_source_kwargs)\n    except Exception:\n        logger.critical(\"Loading tests failed\")\n        return False\n    logger.suite_start(test_groups,\n                       name='web-platform-test',\n                       run_info=run_info,\n                       extra={\"run_by_dir\": run_test_kwargs[\"run_by_dir\"]})\n    for test_type in run_test_kwargs[\"test_types\"]:\n        logger.info(f\"Running {test_type} tests\")\n        browser_cls = product.get_browser_cls(test_type)\n        browser_kwargs = product.get_browser_kwargs(logger,\n                                                    test_type,\n                                                    run_info,\n                                                    config=test_environment.config,\n                                                    num_test_groups=len(test_groups),\n                                                    **run_test_kwargs)\n        executor_cls = product.executor_classes.get(test_type)\n        executor_kwargs = product.get_executor_kwargs(logger,\n                                                      test_type,\n                                                      test_environment,\n                                                      run_info,\n                                                      **run_test_kwargs)\n        if executor_cls is None:\n            logger.error(f\"Unsupported test type {test_type} for product {product.name}\")\n            continue\n        for test in test_loader.disabled_tests[test_type]:\n            logger.test_start(test.id)\n            logger.test_end(test.id, status=\"SKIP\")\n            test_status.skipped += 1\n        if test_type == \"testharness\":\n            run_tests = {\"testharness\": []}\n            for test in test_loader.tests[\"testharness\"]:\n                if ((test.testdriver and not executor_cls.supports_testdriver) or\n                        (test.jsshell and not executor_cls.supports_jsshell)):\n                    logger.test_start(test.id)\n                    logger.test_end(test.id, status=\"SKIP\")\n                    test_status.skipped += 1\n                else:\n                    run_tests[\"testharness\"].append(test)\n        else:\n            run_tests = test_loader.tests\n        recording.pause()\n        with ManagerGroup(\"web-platform-tests\",\n                          run_test_kwargs[\"processes\"],\n                          test_source_cls,\n                          test_source_kwargs,\n                          browser_cls,\n                          browser_kwargs,\n                          executor_cls,\n                          executor_kwargs,\n                          run_test_kwargs[\"rerun\"],\n                          run_test_kwargs[\"pause_after_test\"],\n                          run_test_kwargs[\"pause_on_unexpected\"],\n                          run_test_kwargs[\"restart_on_unexpected\"],\n                          run_test_kwargs[\"debug_info\"],\n                          not run_test_kwargs[\"no_capture_stdio\"],\n                          recording=recording) as manager_group:\n            try:\n                manager_group.run(test_type, run_tests)\n            except KeyboardInterrupt:\n                logger.critical(\"Main thread got signal\")\n                manager_group.stop()\n                raise\n            test_status.total_tests += manager_group.test_count()\n            test_status.unexpected += manager_group.unexpected_count()\n            test_status.unexpected_pass += manager_group.unexpected_pass_count()\n    return True\ndef evaluate_runs(test_status, run_test_kwargs):\n    \"\"\"Evaluates the test counts after the given number of repeat runs has finished\"\"\"\n    if test_status.total_tests == 0:\n        if test_status.skipped > 0:\n            logger.warning(\"All requested tests were skipped\")\n        else:\n            if run_test_kwargs[\"default_exclude\"]:\n                logger.info(\"No tests ran\")\n                return True\n            else:\n                logger.critical(\"No tests ran\")\n                return False\n    if test_status.unexpected and not run_test_kwargs[\"fail_on_unexpected\"]:\n        logger.info(f\"Tolerating {test_status.unexpected} unexpected results\")\n        return True\n    all_unexpected_passed = (test_status.unexpected and\n                             test_status.unexpected == test_status.unexpected_pass)\n    if all_unexpected_passed and not run_test_kwargs[\"fail_on_unexpected_pass\"]:\n        logger.info(f\"Tolerating {test_status.unexpected_pass} unexpected results \"\n                    \"because they all PASS\")\n        return True\n    return test_status.unexpected == 0\nclass TestStatus:\n    \"\"\"Class that stores information on the results of test runs for later reference\"\"\"\n    def __init__(self):\n        self.total_tests = 0\n        self.skipped = 0\n        self.unexpected = 0\n        self.unexpected_pass = 0\n        self.repeated_runs = 0\n        self.expected_repeated_runs = 0\n        self.all_skipped = False\ndef run_tests(config, test_paths, product, **kwargs):\n    \"\"\"Set up the test environment, load the list of tests to be executed, and\n    invoke the remainder of the code to execute tests\"\"\"\n    mp = mpcontext.get_context()\n    if kwargs[\"instrument_to_file\"] is None:\n        recorder = instruments.NullInstrument()\n    else:\n        recorder = instruments.Instrument(kwargs[\"instrument_to_file\"])\n    with recorder as recording, capture.CaptureIO(logger,\n                                                  not kwargs[\"no_capture_stdio\"],\n                                                  mp_context=mp):\n        recording.set([\"startup\"])\n        env.do_delayed_imports(logger, test_paths)\n        product = products.Product(config, product)\n        env_extras = product.get_env_extras(**kwargs)\n        product.check_args(**kwargs)\n        if kwargs[\"install_fonts\"]:\n            env_extras.append(FontInstaller(\n                logger,\n                font_dir=kwargs[\"font_dir\"],\n                ahem=os.path.join(test_paths[\"/\"][\"tests_path\"], \"fonts/Ahem.ttf\")\n            ))\n        recording.set([\"startup\", \"load_tests\"])\n        test_groups = (testloader.TestGroupsFile(logger, kwargs[\"test_groups_file\"])\n                       if kwargs[\"test_groups_file\"] else None)\n        (test_source_cls,\n         test_source_kwargs,\n         chunker_kwargs) = testloader.get_test_src(logger=logger,\n                                                   test_groups=test_groups,\n                                                   **kwargs)\n        run_info, test_loader = get_loader(test_paths,\n                                           product.name,\n                                           run_info_extras=product.run_info_extras(**kwargs),\n                                           chunker_kwargs=chunker_kwargs,\n                                           test_groups=test_groups,\n                                           **kwargs)\n        logger.info(\"Using %i client processes\" % kwargs[\"processes\"])\n        test_status = TestStatus()\n        repeat = kwargs[\"repeat\"]\n        test_status.expected_repeat = repeat\n        if len(test_loader.test_ids) == 0 and kwargs[\"test_list\"]:\n            logger.critical(\"Unable to find any tests at the path(s):\")\n            for path in kwargs[\"test_list\"]:\n                logger.critical(\"  %s\" % path)\n            logger.critical(\"Please check spelling and make sure there are tests in the specified path(s).\")\n            return False, test_status\n        kwargs[\"pause_after_test\"] = get_pause_after_test(test_loader, **kwargs)\n        ssl_config = {\"type\": kwargs[\"ssl_type\"],\n                      \"openssl\": {\"openssl_binary\": kwargs[\"openssl_binary\"]},\n                      \"pregenerated\": {\"host_key_path\": kwargs[\"host_key_path\"],\n                                       \"host_cert_path\": kwargs[\"host_cert_path\"],\n                                       \"ca_cert_path\": kwargs[\"ca_cert_path\"]}}\n        testharness_timeout_multipler = product.get_timeout_multiplier(\"testharness\",\n                                                                       run_info,\n                                                                       **kwargs)\n        mojojs_path = kwargs[\"mojojs_path\"] if kwargs[\"enable_mojojs\"] else None\n        recording.set([\"startup\", \"start_environment\"])\n        with env.TestEnvironment(test_paths,\n                                 testharness_timeout_multipler,\n                                 kwargs[\"pause_after_test\"],\n                                 kwargs[\"debug_test\"],\n                                 kwargs[\"debug_info\"],\n                                 product.env_options,\n                                 ssl_config,\n                                 env_extras,\n                                 kwargs[\"enable_webtransport_h3\"],\n                                 mojojs_path) as test_environment:\n            recording.set([\"startup\", \"ensure_environment\"])\n            try:\n                test_environment.ensure_started()\n                start_time = datetime.now()\n            except env.TestEnvironmentError as e:\n                logger.critical(\"Error starting test environment: %s\" % e)\n                raise\n            recording.set([\"startup\"])\n            max_time = None\n            if \"repeat_max_time\" in kwargs:\n                max_time = timedelta(minutes=kwargs[\"repeat_max_time\"])\n            repeat_until_unexpected = kwargs[\"repeat_until_unexpected\"]\n            # keep track of longest time taken to complete a test suite iteration\n            # so that the runs can be stopped to avoid a possible TC timeout.\n            longest_iteration_time = timedelta()\n            while test_status.repeated_runs < repeat or repeat_until_unexpected:\n                # if the next repeat run could cause the TC timeout to be reached,\n                # stop now and use the test results we have.\n                # Pad the total time by 10% to ensure ample time for the next iteration(s).\n                estimate = (datetime.now() +\n                            timedelta(seconds=(longest_iteration_time.total_seconds() * 1.1)))\n                if not repeat_until_unexpected and max_time and estimate >= start_time + max_time:\n                    logger.info(f\"Ran {test_status.repeated_runs} of {repeat} iterations.\")\n                    break\n                # begin tracking runtime of the test suite\n                iteration_start = datetime.now()\n                test_status.repeated_runs += 1\n                if repeat_until_unexpected:\n                    logger.info(f\"Repetition {test_status.repeated_runs}\")\n                elif repeat > 1:\n                    logger.info(f\"Repetition {test_status.repeated_runs} / {repeat}\")\n                iter_success = run_test_iteration(test_status, test_loader, test_source_kwargs,\n                                                  test_source_cls, run_info, recording,\n                                                  test_environment, product, kwargs)\n                # if there were issues with the suite run(tests not loaded, etc.) return\n                if not iter_success:\n                    return False, test_status\n                recording.set([\"after-end\"])\n                logger.info(f\"Got {test_status.unexpected} unexpected results, \"\n                    f\"with {test_status.unexpected_pass} unexpected passes\")\n                logger.suite_end()\n                # Note this iteration's runtime\n                iteration_runtime = datetime.now() - iteration_start\n                # determine the longest test suite runtime seen.\n                longest_iteration_time = max(longest_iteration_time,\n                                             iteration_runtime)\n                if repeat_until_unexpected and test_status.unexpected > 0:\n                    break\n                if test_status.repeated_runs == 1 and len(test_loader.test_ids) == test_status.skipped:\n                    test_status.all_skipped = True\n                    break\n    # Return the evaluation of the runs and the number of repeated iterations that were run.\n    return evaluate_runs(test_status, kwargs), test_status\ndef check_stability(**kwargs):\n    from . import stability\n    if kwargs[\"stability\"]:\n        logger.warning(\"--stability is deprecated; please use --verify instead!\")\n        kwargs['verify_max_time'] = None\n        kwargs['verify_chaos_mode'] = False\n        kwargs['verify_repeat_loop'] = 0\n        kwargs['verify_repeat_restart'] = 10 if kwargs['repeat'] == 1 else kwargs['repeat']\n        kwargs['verify_output_results'] = True\n    return stability.check_stability(logger,\n                                     max_time=kwargs['verify_max_time'],\n                                     chaos_mode=kwargs['verify_chaos_mode'],\n                                     repeat_loop=kwargs['verify_repeat_loop'],\n                                     repeat_restart=kwargs['verify_repeat_restart'],\n                                     output_results=kwargs['verify_output_results'],\n                                     **kwargs)\ndef start(**kwargs):\n    assert logger is not None\n    logged_critical = wptlogging.LoggedAboveLevelHandler(\"CRITICAL\")\nNext line of code:\n", "input": "", "context": "import json\nimport os\nimport sys\nfrom datetime import datetime, timedelta\nimport wptserve\nfrom wptserve import sslutils\nfrom . import environment as env\nfrom . import instruments\nfrom . import mpcontext\nfrom . import products\nfrom . import testloader\nfrom . import wptcommandline\nfrom . import wptlogging\nfrom . import wpttest\nfrom mozlog import capture, handlers\nfrom .font import FontInstaller\nfrom .testrunner import ManagerGroup\nhere = os.path.dirname(__file__)\nlogger = None\n\"\"\"Runner for web-platform-tests\nThe runner has several design goals:\n* Tests should run with no modification from upstream.\n* Tests should be regarded as \"untrusted\" so that errors, timeouts and even\n  crashes in the tests can be handled without failing the entire test run.\n* For performance tests can be run in multiple browsers in parallel.\nThe upstream repository has the facility for creating a test manifest in JSON\nformat. This manifest is used directly to determine which tests exist. Local\nmetadata files are used to store the expected test results.\n\"\"\"\ndef setup_logging(*args, **kwargs):\n    global logger\n    logger = wptlogging.setup(*args, **kwargs)\n    return logger\ndef get_loader(test_paths, product, debug=None, run_info_extras=None, chunker_kwargs=None,\n               test_groups=None, **kwargs):\n    if run_info_extras is None:\n        run_info_extras = {}\n    run_info = wpttest.get_run_info(kwargs[\"run_info\"], product,\n                                    browser_version=kwargs.get(\"browser_version\"),\n                                    browser_channel=kwargs.get(\"browser_channel\"),\n                                    verify=kwargs.get(\"verify\"),\n                                    debug=debug,\n                                    extras=run_info_extras,\n                                    enable_webrender=kwargs.get(\"enable_webrender\"))\n    test_manifests = testloader.ManifestLoader(test_paths, force_manifest_update=kwargs[\"manifest_update\"],\n                                               manifest_download=kwargs[\"manifest_download\"]).load()\n    manifest_filters = []\n    include = kwargs[\"include\"]\n    if kwargs[\"include_file\"]:\n        include = include or []\n        include.extend(testloader.read_include_from_file(kwargs[\"include_file\"]))\n    if test_groups:\n        include = testloader.update_include_for_groups(test_groups, include)\n    if include or kwargs[\"exclude\"] or kwargs[\"include_manifest\"] or kwargs[\"default_exclude\"]:\n        manifest_filters.append(testloader.TestFilter(include=include,\n                                                      exclude=kwargs[\"exclude\"],\n                                                      manifest_path=kwargs[\"include_manifest\"],\n                                                      test_manifests=test_manifests,\n                                                      explicit=kwargs[\"default_exclude\"]))\n    ssl_enabled = sslutils.get_cls(kwargs[\"ssl_type\"]).ssl_enabled\n    h2_enabled = wptserve.utils.http2_compatible()\n    test_loader = testloader.TestLoader(test_manifests,\n                                        kwargs[\"test_types\"],\n                                        run_info,\n                                        manifest_filters=manifest_filters,\n                                        chunk_type=kwargs[\"chunk_type\"],\n                                        total_chunks=kwargs[\"total_chunks\"],\n                                        chunk_number=kwargs[\"this_chunk\"],\n                                        include_https=ssl_enabled,\n                                        include_h2=h2_enabled,\n                                        include_webtransport_h3=kwargs[\"enable_webtransport_h3\"],\n                                        skip_timeout=kwargs[\"skip_timeout\"],\n                                        skip_implementation_status=kwargs[\"skip_implementation_status\"],\n                                        chunker_kwargs=chunker_kwargs)\n    return run_info, test_loader\ndef list_test_groups(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for item in sorted(test_loader.groups(kwargs[\"test_types\"])):\n        print(item)\ndef list_disabled(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    rv = []\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for test_type, tests in test_loader.disabled_tests.items():\n        for test in tests:\n            rv.append({\"test\": test.id, \"reason\": test.disabled()})\n    print(json.dumps(rv, indent=2))\ndef list_tests(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for test in test_loader.test_ids:\n        print(test)\ndef get_pause_after_test(test_loader, **kwargs):\n    if kwargs[\"pause_after_test\"] is None:\n        if kwargs[\"repeat_until_unexpected\"]:\n            return False\n        if kwargs[\"headless\"]:\n            return False\n        if kwargs[\"debug_test\"]:\n            return True\n        tests = test_loader.tests\n        is_single_testharness = (sum(len(item) for item in tests.values()) == 1 and\n                                 len(tests.get(\"testharness\", [])) == 1)\n        if kwargs[\"repeat\"] == 1 and kwargs[\"rerun\"] == 1 and is_single_testharness:\n            return True\n        return False\n    return kwargs[\"pause_after_test\"]\ndef run_test_iteration(test_status, test_loader, test_source_kwargs, test_source_cls, run_info,\n                       recording, test_environment, product, run_test_kwargs):\n    \"\"\"Runs the entire test suite.\n    This is called for each repeat run requested.\"\"\"\n    tests = []\n    for test_type in test_loader.test_types:\n        tests.extend(test_loader.tests[test_type])\n    try:\n        test_groups = test_source_cls.tests_by_group(\n            tests, **test_source_kwargs)\n    except Exception:\n        logger.critical(\"Loading tests failed\")\n        return False\n    logger.suite_start(test_groups,\n                       name='web-platform-test',\n                       run_info=run_info,\n                       extra={\"run_by_dir\": run_test_kwargs[\"run_by_dir\"]})\n    for test_type in run_test_kwargs[\"test_types\"]:\n        logger.info(f\"Running {test_type} tests\")\n        browser_cls = product.get_browser_cls(test_type)\n        browser_kwargs = product.get_browser_kwargs(logger,\n                                                    test_type,\n                                                    run_info,\n                                                    config=test_environment.config,\n                                                    num_test_groups=len(test_groups),\n                                                    **run_test_kwargs)\n        executor_cls = product.executor_classes.get(test_type)\n        executor_kwargs = product.get_executor_kwargs(logger,\n                                                      test_type,\n                                                      test_environment,\n                                                      run_info,\n                                                      **run_test_kwargs)\n        if executor_cls is None:\n            logger.error(f\"Unsupported test type {test_type} for product {product.name}\")\n            continue\n        for test in test_loader.disabled_tests[test_type]:\n            logger.test_start(test.id)\n            logger.test_end(test.id, status=\"SKIP\")\n            test_status.skipped += 1\n        if test_type == \"testharness\":\n            run_tests = {\"testharness\": []}\n            for test in test_loader.tests[\"testharness\"]:\n                if ((test.testdriver and not executor_cls.supports_testdriver) or\n                        (test.jsshell and not executor_cls.supports_jsshell)):\n                    logger.test_start(test.id)\n                    logger.test_end(test.id, status=\"SKIP\")\n                    test_status.skipped += 1\n                else:\n                    run_tests[\"testharness\"].append(test)\n        else:\n            run_tests = test_loader.tests\n        recording.pause()\n        with ManagerGroup(\"web-platform-tests\",\n                          run_test_kwargs[\"processes\"],\n                          test_source_cls,\n                          test_source_kwargs,\n                          browser_cls,\n                          browser_kwargs,\n                          executor_cls,\n                          executor_kwargs,\n                          run_test_kwargs[\"rerun\"],\n                          run_test_kwargs[\"pause_after_test\"],\n                          run_test_kwargs[\"pause_on_unexpected\"],\n                          run_test_kwargs[\"restart_on_unexpected\"],\n                          run_test_kwargs[\"debug_info\"],\n                          not run_test_kwargs[\"no_capture_stdio\"],\n                          recording=recording) as manager_group:\n            try:\n                manager_group.run(test_type, run_tests)\n            except KeyboardInterrupt:\n                logger.critical(\"Main thread got signal\")\n                manager_group.stop()\n                raise\n            test_status.total_tests += manager_group.test_count()\n            test_status.unexpected += manager_group.unexpected_count()\n            test_status.unexpected_pass += manager_group.unexpected_pass_count()\n    return True\ndef evaluate_runs(test_status, run_test_kwargs):\n    \"\"\"Evaluates the test counts after the given number of repeat runs has finished\"\"\"\n    if test_status.total_tests == 0:\n        if test_status.skipped > 0:\n            logger.warning(\"All requested tests were skipped\")\n        else:\n            if run_test_kwargs[\"default_exclude\"]:\n                logger.info(\"No tests ran\")\n                return True\n            else:\n                logger.critical(\"No tests ran\")\n                return False\n    if test_status.unexpected and not run_test_kwargs[\"fail_on_unexpected\"]:\n        logger.info(f\"Tolerating {test_status.unexpected} unexpected results\")\n        return True\n    all_unexpected_passed = (test_status.unexpected and\n                             test_status.unexpected == test_status.unexpected_pass)\n    if all_unexpected_passed and not run_test_kwargs[\"fail_on_unexpected_pass\"]:\n        logger.info(f\"Tolerating {test_status.unexpected_pass} unexpected results \"\n                    \"because they all PASS\")\n        return True\n    return test_status.unexpected == 0\nclass TestStatus:\n    \"\"\"Class that stores information on the results of test runs for later reference\"\"\"\n    def __init__(self):\n        self.total_tests = 0\n        self.skipped = 0\n        self.unexpected = 0\n        self.unexpected_pass = 0\n        self.repeated_runs = 0\n        self.expected_repeated_runs = 0\n        self.all_skipped = False\ndef run_tests(config, test_paths, product, **kwargs):\n    \"\"\"Set up the test environment, load the list of tests to be executed, and\n    invoke the remainder of the code to execute tests\"\"\"\n    mp = mpcontext.get_context()\n    if kwargs[\"instrument_to_file\"] is None:\n        recorder = instruments.NullInstrument()\n    else:\n        recorder = instruments.Instrument(kwargs[\"instrument_to_file\"])\n    with recorder as recording, capture.CaptureIO(logger,\n                                                  not kwargs[\"no_capture_stdio\"],\n                                                  mp_context=mp):\n        recording.set([\"startup\"])\n        env.do_delayed_imports(logger, test_paths)\n        product = products.Product(config, product)\n        env_extras = product.get_env_extras(**kwargs)\n        product.check_args(**kwargs)\n        if kwargs[\"install_fonts\"]:\n            env_extras.append(FontInstaller(\n                logger,\n                font_dir=kwargs[\"font_dir\"],\n                ahem=os.path.join(test_paths[\"/\"][\"tests_path\"], \"fonts/Ahem.ttf\")\n            ))\n        recording.set([\"startup\", \"load_tests\"])\n        test_groups = (testloader.TestGroupsFile(logger, kwargs[\"test_groups_file\"])\n                       if kwargs[\"test_groups_file\"] else None)\n        (test_source_cls,\n         test_source_kwargs,\n         chunker_kwargs) = testloader.get_test_src(logger=logger,\n                                                   test_groups=test_groups,\n                                                   **kwargs)\n        run_info, test_loader = get_loader(test_paths,\n                                           product.name,\n                                           run_info_extras=product.run_info_extras(**kwargs),\n                                           chunker_kwargs=chunker_kwargs,\n                                           test_groups=test_groups,\n                                           **kwargs)\n        logger.info(\"Using %i client processes\" % kwargs[\"processes\"])\n        test_status = TestStatus()\n        repeat = kwargs[\"repeat\"]\n        test_status.expected_repeat = repeat\n        if len(test_loader.test_ids) == 0 and kwargs[\"test_list\"]:\n            logger.critical(\"Unable to find any tests at the path(s):\")\n            for path in kwargs[\"test_list\"]:\n                logger.critical(\"  %s\" % path)\n            logger.critical(\"Please check spelling and make sure there are tests in the specified path(s).\")\n            return False, test_status\n        kwargs[\"pause_after_test\"] = get_pause_after_test(test_loader, **kwargs)\n        ssl_config = {\"type\": kwargs[\"ssl_type\"],\n                      \"openssl\": {\"openssl_binary\": kwargs[\"openssl_binary\"]},\n                      \"pregenerated\": {\"host_key_path\": kwargs[\"host_key_path\"],\n                                       \"host_cert_path\": kwargs[\"host_cert_path\"],\n                                       \"ca_cert_path\": kwargs[\"ca_cert_path\"]}}\n        testharness_timeout_multipler = product.get_timeout_multiplier(\"testharness\",\n                                                                       run_info,\n                                                                       **kwargs)\n        mojojs_path = kwargs[\"mojojs_path\"] if kwargs[\"enable_mojojs\"] else None\n        recording.set([\"startup\", \"start_environment\"])\n        with env.TestEnvironment(test_paths,\n                                 testharness_timeout_multipler,\n                                 kwargs[\"pause_after_test\"],\n                                 kwargs[\"debug_test\"],\n                                 kwargs[\"debug_info\"],\n                                 product.env_options,\n                                 ssl_config,\n                                 env_extras,\n                                 kwargs[\"enable_webtransport_h3\"],\n                                 mojojs_path) as test_environment:\n            recording.set([\"startup\", \"ensure_environment\"])\n            try:\n                test_environment.ensure_started()\n                start_time = datetime.now()\n            except env.TestEnvironmentError as e:\n                logger.critical(\"Error starting test environment: %s\" % e)\n                raise\n            recording.set([\"startup\"])\n            max_time = None\n            if \"repeat_max_time\" in kwargs:\n                max_time = timedelta(minutes=kwargs[\"repeat_max_time\"])\n            repeat_until_unexpected = kwargs[\"repeat_until_unexpected\"]\n            # keep track of longest time taken to complete a test suite iteration\n            # so that the runs can be stopped to avoid a possible TC timeout.\n            longest_iteration_time = timedelta()\n            while test_status.repeated_runs < repeat or repeat_until_unexpected:\n                # if the next repeat run could cause the TC timeout to be reached,\n                # stop now and use the test results we have.\n                # Pad the total time by 10% to ensure ample time for the next iteration(s).\n                estimate = (datetime.now() +\n                            timedelta(seconds=(longest_iteration_time.total_seconds() * 1.1)))\n                if not repeat_until_unexpected and max_time and estimate >= start_time + max_time:\n                    logger.info(f\"Ran {test_status.repeated_runs} of {repeat} iterations.\")\n                    break\n                # begin tracking runtime of the test suite\n                iteration_start = datetime.now()\n                test_status.repeated_runs += 1\n                if repeat_until_unexpected:\n                    logger.info(f\"Repetition {test_status.repeated_runs}\")\n                elif repeat > 1:\n                    logger.info(f\"Repetition {test_status.repeated_runs} / {repeat}\")\n                iter_success = run_test_iteration(test_status, test_loader, test_source_kwargs,\n                                                  test_source_cls, run_info, recording,\n                                                  test_environment, product, kwargs)\n                # if there were issues with the suite run(tests not loaded, etc.) return\n                if not iter_success:\n                    return False, test_status\n                recording.set([\"after-end\"])\n                logger.info(f\"Got {test_status.unexpected} unexpected results, \"\n                    f\"with {test_status.unexpected_pass} unexpected passes\")\n                logger.suite_end()\n                # Note this iteration's runtime\n                iteration_runtime = datetime.now() - iteration_start\n                # determine the longest test suite runtime seen.\n                longest_iteration_time = max(longest_iteration_time,\n                                             iteration_runtime)\n                if repeat_until_unexpected and test_status.unexpected > 0:\n                    break\n                if test_status.repeated_runs == 1 and len(test_loader.test_ids) == test_status.skipped:\n                    test_status.all_skipped = True\n                    break\n    # Return the evaluation of the runs and the number of repeated iterations that were run.\n    return evaluate_runs(test_status, kwargs), test_status\ndef check_stability(**kwargs):\n    from . import stability\n    if kwargs[\"stability\"]:\n        logger.warning(\"--stability is deprecated; please use --verify instead!\")\n        kwargs['verify_max_time'] = None\n        kwargs['verify_chaos_mode'] = False\n        kwargs['verify_repeat_loop'] = 0\n        kwargs['verify_repeat_restart'] = 10 if kwargs['repeat'] == 1 else kwargs['repeat']\n        kwargs['verify_output_results'] = True\n    return stability.check_stability(logger,\n                                     max_time=kwargs['verify_max_time'],\n                                     chaos_mode=kwargs['verify_chaos_mode'],\n                                     repeat_loop=kwargs['verify_repeat_loop'],\n                                     repeat_restart=kwargs['verify_repeat_restart'],\n                                     output_results=kwargs['verify_output_results'],\n                                     **kwargs)\ndef start(**kwargs):\n    assert logger is not None\n    logged_critical = wptlogging.LoggedAboveLevelHandler(\"CRITICAL\")\n", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "length": 1196, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "2477e626c89426f565807bbc5e35a472279f3e388787ac17", "pred": "```\n```\nPlease complete the code. The code seems to be a part of a test runner for web-platform-tests. It seems to be written in Python. The code is incomplete and I need to complete it. Please help me with that. \n\nAlso, I would like to know what this code does and what"}
{"prompt": "Please complete the code given below. \n# -*- coding: utf-8 -*-\n\"\"\"\nThis module contains a POI Manager core class which gives capability to mark\npoints of interest, re-optimise their position, and keep track of sample drift\nover time.\nQudi is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nQudi is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with Qudi. If not, see <http://www.gnu.org/licenses/>.\nCopyright (c) the Qudi Developers. See the COPYRIGHT.txt file at the\ntop-level directory of this distribution and at <https://github.com/Ulm-IQO/qudi/>\n\"\"\"\nfrom qtpy import QtCore\nimport ctypes   # is a foreign function library for Python. It provides C\n                # compatible data types, and allows calling functions in DLLs\n                # or shared libraries. It can be used to wrap these libraries\n                # in pure Python.\nfrom interface.wavemeter_interface import WavemeterInterface\nfrom core.base import Base\nfrom core.util.mutex import Mutex\nclass HardwarePull(QtCore.QObject):\n    \"\"\" Helper class for running the hardware communication in a separate thread. \"\"\"\n    # signal to deliver the wavelength to the parent class\n    sig_wavelength = QtCore.Signal(float, float)\n    def __init__(self, parentclass):\n        super().__init__()\n        # remember the reference to the parent class to access functions ad settings\n        self._parentclass = parentclass\n    def handle_timer(self, state_change):\n        \"\"\" Threaded method that can be called by a signal from outside to start the timer.\n        @param bool state: (True) starts timer, (False) stops it.\n        \"\"\"\n        if state_change:\n            self.timer = QtCore.QTimer()\n            self.timer.timeout.connect(self._measure_thread)\n            self.timer.start(self._parentclass._measurement_timing)\n        else:\n            if hasattr(self, 'timer'):\n                self.timer.stop()\n    def _measure_thread(self):\n        \"\"\" The threaded method querying the data from the wavemeter.\n        \"\"\"\n        # update as long as the state is busy\n        if self._parentclass.getState() == 'running':\n            # get the current wavelength from the wavemeter\n            temp1=float(self._parentclass._wavemeterdll.GetWavelength(0))\n            temp2=float(self._parentclass._wavemeterdll.GetWavelength(0))\n            # send the data to the parent via a signal\n            self.sig_wavelength.emit(temp1, temp2)\nclass HighFinesseWavemeter(Base,WavemeterInterface):\n    _modclass = 'HighFinesseWavemeter'\n    _modtype = 'hardware'\n    ## declare connectors\n    _out = {'highfinessewavemeter': 'WavemeterInterface'}\n    sig_handle_timer = QtCore.Signal(bool)\n    #############################################\n    # Flags for the external DLL\n    #############################################\n    # define constants as flags for the wavemeter\n    _cCtrlStop                   = ctypes.c_uint16(0x00)\n    # this following flag is modified to override every existing file\n    _cCtrlStartMeasurment        = ctypes.c_uint16(0x1002)\n    _cReturnWavelangthAir        = ctypes.c_long(0x0001)\n    _cReturnWavelangthVac        = ctypes.c_long(0x0000)\n    def __init__(self, config, **kwargs):\n        super().__init__(config=config, **kwargs)\n        #locking for thread safety\n        self.threadlock = Mutex()\n        # the current wavelength read by the wavemeter in nm (vac)\n        self._current_wavelength=0.0\n        self._current_wavelength2=0.0\n        # time between two measurement points of the wavemeter in milliseconds\n        if 'measurement_timing' in config.keys():\n            self._measurement_timing=config['measurement_timing']\n        else:\n            self._measurement_timing = 10.\n            self.log.warning('No measurement_timing configured, '\\\n                        'using {} instead.'.format(self._measurement_timing))\n    def on_activate(self, e):\n        #############################################\n        # Initialisation to access external DLL\n        #############################################\n        try:\n            # imports the spectrometer specific function from dll\n            self._wavemeterdll = ctypes.windll.LoadLibrary('wlmData.dll')\n        except:\n            self.log.critical('There is no Wavemeter installed on this '\n                    'Computer.\\nPlease install a High Finesse Wavemeter and '\n                    'try again.')\n        # define the use of the GetWavelength function of the wavemeter\n#        self._GetWavelength2 = self._wavemeterdll.GetWavelength2\n        # return data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength2.restype = ctypes.c_double\n        # parameter data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength2.argtypes = [ctypes.c_double]\n        # define the use of the GetWavelength function of the wavemeter\n#        self._GetWavelength = self._wavemeterdll.GetWavelength\n        # return data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength.restype = ctypes.c_double\n        # parameter data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength.argtypes = [ctypes.c_double]\n        # define the use of the ConvertUnit function of the wavemeter\n#        self._ConvertUnit = self._wavemeterdll.ConvertUnit\n        # return data type of the ConvertUnit function of the wavemeter\n        self._wavemeterdll.ConvertUnit.restype = ctypes.c_double\n        # parameter data type of the ConvertUnit function of the wavemeter\n        self._wavemeterdll.ConvertUnit.argtypes = [ctypes.c_double, ctypes.c_long, ctypes.c_long]\n        # manipulate perdefined operations with simple flags\n#        self._Operation = self._wavemeterdll.Operation\n        # return data type of the Operation function of the wavemeter\n        self._wavemeterdll.Operation.restype = ctypes.c_long\n        # parameter data type of the Operation function of the wavemeter\n        self._wavemeterdll.Operation.argtypes = [ctypes.c_ushort]\n        # create an indepentent thread for the hardware communication\n        self.hardware_thread = QtCore.QThread()\n        # create an object for the hardware communication and let it live on the new thread\n        self._hardware_pull = HardwarePull(self)\n        self._hardware_pull.moveToThread(self.hardware_thread)\n        # connect the signals in and out of the threaded object\n        self.sig_handle_timer.connect(self._hardware_pull.handle_timer)\n        self._hardware_pull.sig_wavelength.connect(self.handle_wavelength)\n        # start the event loop for the hardware\n        self.hardware_thread.start()\n    def on_deactivate(self, e):\n        if self.getState() != 'idle' and self.getState() != 'deactivated':\n            self.stop_acqusition()\n        self.hardware_thread.quit()\n        self.sig_handle_timer.disconnect()\n        self._hardware_pull.sig_wavelength.disconnect()\n        try:\n            # clean up by removing reference to the ctypes library object\n            del self._wavemeterdll\n            return 0\n        except:\n            self.log.error('Could not unload the wlmData.dll of the '\n                    'wavemeter.')\n    #############################################\n    # Methods of the main class\n    #############################################\n    def handle_wavelength(self, wavelength1, wavelength2):\n        \"\"\" Function to save the wavelength, when it comes in with a signal.\n        \"\"\"\n        self._current_wavelength = wavelength1\n        self._current_wavelength2 = wavelength2\n    def start_acqusition(self):\n        \"\"\" Method to start the wavemeter software.\n        @return int: error code (0:OK, -1:error)\n        Also the actual threaded method for getting the current wavemeter reading is started.\n        \"\"\"\n        # first check its status\n        if self.getState() == 'running':\n            self.log.error('Wavemeter busy')\n            return -1\n        self.run()\n        # actually start the wavemeter\n        self._wavemeterdll.Operation(self._cCtrlStartMeasurment) #starts measurement\n        # start the measuring thread\n        self.sig_handle_timer.emit(True)\n        return 0\n    def stop_acqusition(self):\n        \"\"\" Stops the Wavemeter from measuring and kills the thread that queries the data.\n        @return int: error code (0:OK, -1:error)\n        \"\"\"\n        # check status just for a sanity check\nNext line of code:\n", "input": "", "context": "# -*- coding: utf-8 -*-\n\"\"\"\nThis module contains a POI Manager core class which gives capability to mark\npoints of interest, re-optimise their position, and keep track of sample drift\nover time.\nQudi is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nQudi is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with Qudi. If not, see <http://www.gnu.org/licenses/>.\nCopyright (c) the Qudi Developers. See the COPYRIGHT.txt file at the\ntop-level directory of this distribution and at <https://github.com/Ulm-IQO/qudi/>\n\"\"\"\nfrom qtpy import QtCore\nimport ctypes   # is a foreign function library for Python. It provides C\n                # compatible data types, and allows calling functions in DLLs\n                # or shared libraries. It can be used to wrap these libraries\n                # in pure Python.\nfrom interface.wavemeter_interface import WavemeterInterface\nfrom core.base import Base\nfrom core.util.mutex import Mutex\nclass HardwarePull(QtCore.QObject):\n    \"\"\" Helper class for running the hardware communication in a separate thread. \"\"\"\n    # signal to deliver the wavelength to the parent class\n    sig_wavelength = QtCore.Signal(float, float)\n    def __init__(self, parentclass):\n        super().__init__()\n        # remember the reference to the parent class to access functions ad settings\n        self._parentclass = parentclass\n    def handle_timer(self, state_change):\n        \"\"\" Threaded method that can be called by a signal from outside to start the timer.\n        @param bool state: (True) starts timer, (False) stops it.\n        \"\"\"\n        if state_change:\n            self.timer = QtCore.QTimer()\n            self.timer.timeout.connect(self._measure_thread)\n            self.timer.start(self._parentclass._measurement_timing)\n        else:\n            if hasattr(self, 'timer'):\n                self.timer.stop()\n    def _measure_thread(self):\n        \"\"\" The threaded method querying the data from the wavemeter.\n        \"\"\"\n        # update as long as the state is busy\n        if self._parentclass.getState() == 'running':\n            # get the current wavelength from the wavemeter\n            temp1=float(self._parentclass._wavemeterdll.GetWavelength(0))\n            temp2=float(self._parentclass._wavemeterdll.GetWavelength(0))\n            # send the data to the parent via a signal\n            self.sig_wavelength.emit(temp1, temp2)\nclass HighFinesseWavemeter(Base,WavemeterInterface):\n    _modclass = 'HighFinesseWavemeter'\n    _modtype = 'hardware'\n    ## declare connectors\n    _out = {'highfinessewavemeter': 'WavemeterInterface'}\n    sig_handle_timer = QtCore.Signal(bool)\n    #############################################\n    # Flags for the external DLL\n    #############################################\n    # define constants as flags for the wavemeter\n    _cCtrlStop                   = ctypes.c_uint16(0x00)\n    # this following flag is modified to override every existing file\n    _cCtrlStartMeasurment        = ctypes.c_uint16(0x1002)\n    _cReturnWavelangthAir        = ctypes.c_long(0x0001)\n    _cReturnWavelangthVac        = ctypes.c_long(0x0000)\n    def __init__(self, config, **kwargs):\n        super().__init__(config=config, **kwargs)\n        #locking for thread safety\n        self.threadlock = Mutex()\n        # the current wavelength read by the wavemeter in nm (vac)\n        self._current_wavelength=0.0\n        self._current_wavelength2=0.0\n        # time between two measurement points of the wavemeter in milliseconds\n        if 'measurement_timing' in config.keys():\n            self._measurement_timing=config['measurement_timing']\n        else:\n            self._measurement_timing = 10.\n            self.log.warning('No measurement_timing configured, '\\\n                        'using {} instead.'.format(self._measurement_timing))\n    def on_activate(self, e):\n        #############################################\n        # Initialisation to access external DLL\n        #############################################\n        try:\n            # imports the spectrometer specific function from dll\n            self._wavemeterdll = ctypes.windll.LoadLibrary('wlmData.dll')\n        except:\n            self.log.critical('There is no Wavemeter installed on this '\n                    'Computer.\\nPlease install a High Finesse Wavemeter and '\n                    'try again.')\n        # define the use of the GetWavelength function of the wavemeter\n#        self._GetWavelength2 = self._wavemeterdll.GetWavelength2\n        # return data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength2.restype = ctypes.c_double\n        # parameter data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength2.argtypes = [ctypes.c_double]\n        # define the use of the GetWavelength function of the wavemeter\n#        self._GetWavelength = self._wavemeterdll.GetWavelength\n        # return data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength.restype = ctypes.c_double\n        # parameter data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength.argtypes = [ctypes.c_double]\n        # define the use of the ConvertUnit function of the wavemeter\n#        self._ConvertUnit = self._wavemeterdll.ConvertUnit\n        # return data type of the ConvertUnit function of the wavemeter\n        self._wavemeterdll.ConvertUnit.restype = ctypes.c_double\n        # parameter data type of the ConvertUnit function of the wavemeter\n        self._wavemeterdll.ConvertUnit.argtypes = [ctypes.c_double, ctypes.c_long, ctypes.c_long]\n        # manipulate perdefined operations with simple flags\n#        self._Operation = self._wavemeterdll.Operation\n        # return data type of the Operation function of the wavemeter\n        self._wavemeterdll.Operation.restype = ctypes.c_long\n        # parameter data type of the Operation function of the wavemeter\n        self._wavemeterdll.Operation.argtypes = [ctypes.c_ushort]\n        # create an indepentent thread for the hardware communication\n        self.hardware_thread = QtCore.QThread()\n        # create an object for the hardware communication and let it live on the new thread\n        self._hardware_pull = HardwarePull(self)\n        self._hardware_pull.moveToThread(self.hardware_thread)\n        # connect the signals in and out of the threaded object\n        self.sig_handle_timer.connect(self._hardware_pull.handle_timer)\n        self._hardware_pull.sig_wavelength.connect(self.handle_wavelength)\n        # start the event loop for the hardware\n        self.hardware_thread.start()\n    def on_deactivate(self, e):\n        if self.getState() != 'idle' and self.getState() != 'deactivated':\n            self.stop_acqusition()\n        self.hardware_thread.quit()\n        self.sig_handle_timer.disconnect()\n        self._hardware_pull.sig_wavelength.disconnect()\n        try:\n            # clean up by removing reference to the ctypes library object\n            del self._wavemeterdll\n            return 0\n        except:\n            self.log.error('Could not unload the wlmData.dll of the '\n                    'wavemeter.')\n    #############################################\n    # Methods of the main class\n    #############################################\n    def handle_wavelength(self, wavelength1, wavelength2):\n        \"\"\" Function to save the wavelength, when it comes in with a signal.\n        \"\"\"\n        self._current_wavelength = wavelength1\n        self._current_wavelength2 = wavelength2\n    def start_acqusition(self):\n        \"\"\" Method to start the wavemeter software.\n        @return int: error code (0:OK, -1:error)\n        Also the actual threaded method for getting the current wavemeter reading is started.\n        \"\"\"\n        # first check its status\n        if self.getState() == 'running':\n            self.log.error('Wavemeter busy')\n            return -1\n        self.run()\n        # actually start the wavemeter\n        self._wavemeterdll.Operation(self._cCtrlStartMeasurment) #starts measurement\n        # start the measuring thread\n        self.sig_handle_timer.emit(True)\n        return 0\n    def stop_acqusition(self):\n        \"\"\" Stops the Wavemeter from measuring and kills the thread that queries the data.\n        @return int: error code (0:OK, -1:error)\n        \"\"\"\n        # check status just for a sanity check\n", "answers": ["        if self.getState() == 'idle':"], "length": 885, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "e59f877d3863977e0c9a383546007617a3bcb1d48ab84132", "pred": "```\n        if self.getState()!= 'idle' and self.getState()!= 'deactivated':\n            self.log.error('Wavemeter busy')\n            return -1\n        # stop the measuring thread\n        self.sig_handle_timer.emit(False)\n        # stop the wavemeter\n        self._wavem"}
{"prompt": "Please complete the code given below. \n/*\n * Jitsi, the OpenSource Java VoIP and Instant Messaging client.\n *\n * Distributable under LGPL license.\n * See terms of license at gnu.org.\n */\npackage net.java.sip.communicator.slick.protocol.jabber;\nimport java.beans.*;\nimport java.util.*;\nimport junit.framework.*;\nimport net.java.sip.communicator.service.protocol.*;\nimport net.java.sip.communicator.service.protocol.event.*;\nimport net.java.sip.communicator.service.protocol.jabberconstants.*;\nimport net.java.sip.communicator.util.*;\n/**\n * Tests Jabber implementations of a Presence Operation Set. Tests in this class\n * verify functionality such as: Changing local (our own) status and\n * corresponding event dispatching; Querying status of contacts, Subscribing\n * for presence notifications upong status changes of specific contacts.\n * <p>\n * Using a custom suite() method, we make sure that apart from standard test\n * methods (those with a <tt>test</tt> prefix) we also execute those that\n * we want run in a specific order like for example - postTestSubscribe() and\n * postTestUnsubscribe().\n * <p>\n * @author Damian Minkov\n * @author Lubomir Marinov\n */\npublic class TestOperationSetPresence\n    extends TestCase\n{\n    private static final Logger logger =\n        Logger.getLogger(TestOperationSetPresence.class);\n    private JabberSlickFixture fixture = new JabberSlickFixture();\n    private OperationSetPresence operationSetPresence1 = null;\n    private final Map<String, PresenceStatus> supportedStatusSet1\n        = new HashMap<String, PresenceStatus>();\n    private OperationSetPresence operationSetPresence2 = null;\n    private final Map<String, PresenceStatus> supportedStatusSet2\n        = new HashMap<String, PresenceStatus>();\n    private String statusMessageRoot = new String(\"Our status is now: \");\n    private static AuthEventCollector authEventCollector1\n        = new AuthEventCollector();\n    private static AuthEventCollector authEventCollector2\n        = new AuthEventCollector();\n    public TestOperationSetPresence(String name)\n    {\n        super(name);\n    }\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n        fixture.setUp();\n        Map<String, OperationSet> supportedOperationSets1 =\n            fixture.provider1.getSupportedOperationSets();\n        if ( supportedOperationSets1 == null\n            || supportedOperationSets1.size() < 1)\n            throw new NullPointerException(\n                \"No OperationSet implementations are supported by \"\n                +\"this implementation. \");\n        //get the operation set presence here.\n        operationSetPresence1 =\n            (OperationSetPresence)supportedOperationSets1.get(\n                OperationSetPresence.class.getName());\n        //if the op set is null then the implementation doesn't offer a presence\n        //operation set which is unacceptable for jabber.\n        if (operationSetPresence1 == null)\n        {\n            throw new NullPointerException(\n                \"An implementation of the Jabber service must provide an \"\n                + \"implementation of at least the one of the Presence \"\n                + \"Operation Sets\");\n        }\n        // do it once again for the second provider\n        Map<String, OperationSet> supportedOperationSets2 =\n            fixture.provider2.getSupportedOperationSets();\n        if ( supportedOperationSets2 == null\n            || supportedOperationSets2.size() < 1)\n            throw new NullPointerException(\n                \"No OperationSet implementations are supported by \"\n                +\"this Jabber implementation. \");\n        //get the operation set presence here.\n        operationSetPresence2 =\n            (OperationSetPresence)supportedOperationSets2.get(\n                OperationSetPresence.class.getName());\n        //if the op set is null then the implementation doesn't offer a presence\n        //operation set which is unacceptable for jabber.\n        if (operationSetPresence2 == null)\n        {\n            throw new NullPointerException(\n                \"An implementation of the Jabber service must provide an \"\n                + \"implementation of at least the one of the Presence \"\n                + \"Operation Sets\");\n        }\n        /*\n         * Retrieve the supported PresenceStatus values because the instances\n         * are specific to the ProtocolProviderService implementations.\n         */\n        // operationSetPresence1\n        for (Iterator<PresenceStatus> supportedStatusIt\n                        = operationSetPresence1.getSupportedStatusSet();\n             supportedStatusIt.hasNext();)\n        {\n            PresenceStatus supportedStatus = supportedStatusIt.next();\n            supportedStatusSet1.put(supportedStatus.getStatusName(),\n                supportedStatus);\n        }\n        // operationSetPresence2\n        for (Iterator<PresenceStatus> supportedStatusIt\n                        = operationSetPresence2.getSupportedStatusSet();\n             supportedStatusIt.hasNext();)\n        {\n            PresenceStatus supportedStatus = supportedStatusIt.next();\n            supportedStatusSet2.put(supportedStatus.getStatusName(),\n                supportedStatus);\n        }\n    }\n    @Override\n    protected void tearDown() throws Exception\n    {\n        super.tearDown();\n        fixture.tearDown();\n    }\n    /**\n     * Creates a test suite containing all tests of this class followed by\n     * test methods that we want executed in a specified order.\n     * @return Test\n     */\n    public static Test suite()\n    {\n        //return an (almost) empty suite if we're running in offline mode.\n        if(JabberSlickFixture.onlineTestingDisabled)\n        {\n            TestSuite suite = new TestSuite();\n            //the only test around here that we could run without net\n            //connectivity\n            suite.addTest(\n                new TestOperationSetPresence(\n                        \"testSupportedStatusSetForCompleteness\"));\n            return suite;\n        }\n        TestSuite suite = new TestSuite();\n        // clear the lists before subscribing users\n        suite.addTest(new TestOperationSetPresence(\"clearLists\"));\n        // first postTestSubscribe. to be sure that contacts are in the\n        // list so we can further continue and test presences each other\n        suite.addTest(new TestOperationSetPresence(\"postTestSubscribe\"));\n//        // add other tests\n//        suite.addTestSuite(TestOperationSetPresence.class);\n//\n        // now test unsubscribe\n        suite.addTest(new TestOperationSetPresence(\"postTestUnsubscribe\"));\n        return suite;\n    }\n    /**\n     * Verifies that all necessary Jabber test states are supported by the\n     * implementation.\n     */\n    public void testSupportedStatusSetForCompleteness()\n    {\n        //first create a local list containing the presence status instances\n        //supported by the underlying implementation.\n        Iterator<PresenceStatus> supportedStatusSetIter =\n            operationSetPresence1.getSupportedStatusSet();\n        List<String> supportedStatusNames = new LinkedList<String>();\n        while (supportedStatusSetIter.hasNext())\n        {\n            supportedStatusNames.add(supportedStatusSetIter\n                .next().getStatusName());\n        }\n        //create a copy of the MUST status set and remove any matching status\n        //that is also present in the supported set.\nNext line of code:\n", "input": "", "context": "/*\n * Jitsi, the OpenSource Java VoIP and Instant Messaging client.\n *\n * Distributable under LGPL license.\n * See terms of license at gnu.org.\n */\npackage net.java.sip.communicator.slick.protocol.jabber;\nimport java.beans.*;\nimport java.util.*;\nimport junit.framework.*;\nimport net.java.sip.communicator.service.protocol.*;\nimport net.java.sip.communicator.service.protocol.event.*;\nimport net.java.sip.communicator.service.protocol.jabberconstants.*;\nimport net.java.sip.communicator.util.*;\n/**\n * Tests Jabber implementations of a Presence Operation Set. Tests in this class\n * verify functionality such as: Changing local (our own) status and\n * corresponding event dispatching; Querying status of contacts, Subscribing\n * for presence notifications upong status changes of specific contacts.\n * <p>\n * Using a custom suite() method, we make sure that apart from standard test\n * methods (those with a <tt>test</tt> prefix) we also execute those that\n * we want run in a specific order like for example - postTestSubscribe() and\n * postTestUnsubscribe().\n * <p>\n * @author Damian Minkov\n * @author Lubomir Marinov\n */\npublic class TestOperationSetPresence\n    extends TestCase\n{\n    private static final Logger logger =\n        Logger.getLogger(TestOperationSetPresence.class);\n    private JabberSlickFixture fixture = new JabberSlickFixture();\n    private OperationSetPresence operationSetPresence1 = null;\n    private final Map<String, PresenceStatus> supportedStatusSet1\n        = new HashMap<String, PresenceStatus>();\n    private OperationSetPresence operationSetPresence2 = null;\n    private final Map<String, PresenceStatus> supportedStatusSet2\n        = new HashMap<String, PresenceStatus>();\n    private String statusMessageRoot = new String(\"Our status is now: \");\n    private static AuthEventCollector authEventCollector1\n        = new AuthEventCollector();\n    private static AuthEventCollector authEventCollector2\n        = new AuthEventCollector();\n    public TestOperationSetPresence(String name)\n    {\n        super(name);\n    }\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n        fixture.setUp();\n        Map<String, OperationSet> supportedOperationSets1 =\n            fixture.provider1.getSupportedOperationSets();\n        if ( supportedOperationSets1 == null\n            || supportedOperationSets1.size() < 1)\n            throw new NullPointerException(\n                \"No OperationSet implementations are supported by \"\n                +\"this implementation. \");\n        //get the operation set presence here.\n        operationSetPresence1 =\n            (OperationSetPresence)supportedOperationSets1.get(\n                OperationSetPresence.class.getName());\n        //if the op set is null then the implementation doesn't offer a presence\n        //operation set which is unacceptable for jabber.\n        if (operationSetPresence1 == null)\n        {\n            throw new NullPointerException(\n                \"An implementation of the Jabber service must provide an \"\n                + \"implementation of at least the one of the Presence \"\n                + \"Operation Sets\");\n        }\n        // do it once again for the second provider\n        Map<String, OperationSet> supportedOperationSets2 =\n            fixture.provider2.getSupportedOperationSets();\n        if ( supportedOperationSets2 == null\n            || supportedOperationSets2.size() < 1)\n            throw new NullPointerException(\n                \"No OperationSet implementations are supported by \"\n                +\"this Jabber implementation. \");\n        //get the operation set presence here.\n        operationSetPresence2 =\n            (OperationSetPresence)supportedOperationSets2.get(\n                OperationSetPresence.class.getName());\n        //if the op set is null then the implementation doesn't offer a presence\n        //operation set which is unacceptable for jabber.\n        if (operationSetPresence2 == null)\n        {\n            throw new NullPointerException(\n                \"An implementation of the Jabber service must provide an \"\n                + \"implementation of at least the one of the Presence \"\n                + \"Operation Sets\");\n        }\n        /*\n         * Retrieve the supported PresenceStatus values because the instances\n         * are specific to the ProtocolProviderService implementations.\n         */\n        // operationSetPresence1\n        for (Iterator<PresenceStatus> supportedStatusIt\n                        = operationSetPresence1.getSupportedStatusSet();\n             supportedStatusIt.hasNext();)\n        {\n            PresenceStatus supportedStatus = supportedStatusIt.next();\n            supportedStatusSet1.put(supportedStatus.getStatusName(),\n                supportedStatus);\n        }\n        // operationSetPresence2\n        for (Iterator<PresenceStatus> supportedStatusIt\n                        = operationSetPresence2.getSupportedStatusSet();\n             supportedStatusIt.hasNext();)\n        {\n            PresenceStatus supportedStatus = supportedStatusIt.next();\n            supportedStatusSet2.put(supportedStatus.getStatusName(),\n                supportedStatus);\n        }\n    }\n    @Override\n    protected void tearDown() throws Exception\n    {\n        super.tearDown();\n        fixture.tearDown();\n    }\n    /**\n     * Creates a test suite containing all tests of this class followed by\n     * test methods that we want executed in a specified order.\n     * @return Test\n     */\n    public static Test suite()\n    {\n        //return an (almost) empty suite if we're running in offline mode.\n        if(JabberSlickFixture.onlineTestingDisabled)\n        {\n            TestSuite suite = new TestSuite();\n            //the only test around here that we could run without net\n            //connectivity\n            suite.addTest(\n                new TestOperationSetPresence(\n                        \"testSupportedStatusSetForCompleteness\"));\n            return suite;\n        }\n        TestSuite suite = new TestSuite();\n        // clear the lists before subscribing users\n        suite.addTest(new TestOperationSetPresence(\"clearLists\"));\n        // first postTestSubscribe. to be sure that contacts are in the\n        // list so we can further continue and test presences each other\n        suite.addTest(new TestOperationSetPresence(\"postTestSubscribe\"));\n//        // add other tests\n//        suite.addTestSuite(TestOperationSetPresence.class);\n//\n        // now test unsubscribe\n        suite.addTest(new TestOperationSetPresence(\"postTestUnsubscribe\"));\n        return suite;\n    }\n    /**\n     * Verifies that all necessary Jabber test states are supported by the\n     * implementation.\n     */\n    public void testSupportedStatusSetForCompleteness()\n    {\n        //first create a local list containing the presence status instances\n        //supported by the underlying implementation.\n        Iterator<PresenceStatus> supportedStatusSetIter =\n            operationSetPresence1.getSupportedStatusSet();\n        List<String> supportedStatusNames = new LinkedList<String>();\n        while (supportedStatusSetIter.hasNext())\n        {\n            supportedStatusNames.add(supportedStatusSetIter\n                .next().getStatusName());\n        }\n        //create a copy of the MUST status set and remove any matching status\n        //that is also present in the supported set.\n", "answers": ["        List<String> requiredStatusNames ="], "length": 678, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "ac6445bc3b2ff172ac4c503cce9895134c79147da4766d14", "pred": "```java\n        List<String> mustStatusNames = new ArrayList<String>();\n        for (String statusName : PresenceStatus.MUST_STATUS_SET)\n        {\n            if (!supportedStatusNames.contains(statusName))\n            {\n                mustStatusNames.add(statusName);\n            }\n        }\n```\nPlease complete the code. \n```"}
