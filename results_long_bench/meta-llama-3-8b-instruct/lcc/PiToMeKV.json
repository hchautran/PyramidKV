{"prompt": "Please complete the code given below. \n/**\n * \n */\npackage com.gint.app.bisis4.client.editor.inventar;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.FocusAdapter;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport net.miginfocom.swing.MigLayout;\nimport com.gint.app.bisis4.client.BisisApp;\nimport com.gint.app.bisis4.client.editor.Messages;\nimport com.gint.app.bisis4.format.HoldingsDataCoders;\nimport com.gint.app.bisis4.format.UValidatorException;\nimport com.gint.app.bisis4.records.Primerak;\n/**\n * @author Bojana\n *\n */\npublic class RaspodelaFrame extends JInternalFrame {\n\t\n\tprivate JTable raspodelaTable;\t\n\tprivate JScrollPane raspodelaScrollPane;\n\t\n\tprivate JPanel raspodelaButtonsPanel;\t\n\tprivate JButton sacuvajButton;\n\tprivate JButton odustaniButton;\n\t\n\tprivate JTextField brojPrimTxtFld;\n\tprivate JTextField preostaloTxtFld;\n\tprivate CodedValuePanel odeljenjePanel;\n\tprivate CodedValuePanel invKnjPanel;\n\tprivate CodedValuePanel podlokacijaPanel;\n\t\n\tprivate JSpinner raspodelaSpinner;\n\tprivate JButton dodajButton;\n\t\n\tprivate InventarPanel inventarPanel;\t\n\tprivate RaspodelaTableModel raspodelaTableModel;\n\t\n  private boolean monograph = false;\n\t\n\t\n\tpublic RaspodelaFrame(InventarPanel mp) {\n    super(\"Raspodela primeraka\", true, true, false, false);\n    this.monograph = mp instanceof MonographInventarPanel;\n    if(!monograph) setTitle(\"Raspodela godina\");\n\t\t\n\t\tthis.inventarPanel = mp;\n\t\tthis.setSize(new Dimension(800,400));\n\t\tcreate();\t\t\n\t}\n\t\n\tprivate void create(){\t\t\n\t\traspodelaTable = new JTable();\n\t\tbrojPrimTxtFld = new JTextField();\n\t\tpreostaloTxtFld = new JTextField();\n\t\tdodajButton = new JButton(new ImageIcon(RaspodelaFrame.class\n\t\t\t\t.getResource(\"/com/gint/app/bisis4/client/images/Check16.png\")));\n\t\tpreostaloTxtFld.setEditable(false);\n\t\tpreostaloTxtFld.setFocusable(false);    \n\t\todeljenjePanel = new CodedValuePanel(HoldingsDataCoders.ODELJENJE_CODER,null);\n\t\todeljenjePanel.setDefaultOdeljenje();\n\t\tinvKnjPanel = new CodedValuePanel(HoldingsDataCoders.INVENTARNAKNJIGA_CODER,null);\n\t\tpodlokacijaPanel = new CodedValuePanel(HoldingsDataCoders.PODLOKACIJA_CODER, null);\n\t\traspodelaSpinner = new JSpinner();\t\t\n\t\traspodelaSpinner.setValue(new Integer(1));\n\t\tSpinnerNumberModel spinnerModel = new SpinnerNumberModel(0,0,1000,1);\n\t\traspodelaSpinner.setModel(spinnerModel);\n\t\traspodelaSpinner.setPreferredSize(new Dimension(40,20));\n\t\t\n\t\t//raspodelaSpinner.set\n\t\t\n\t\t\n\t\traspodelaTableModel = new RaspodelaTableModel(this);\n\t\traspodelaTable.setModel(raspodelaTableModel);\t\t\n\t\traspodelaTable.doLayout();\n\t\traspodelaScrollPane = new JScrollPane(raspodelaTable);\n\t\t\n\t\traspodelaButtonsPanel = new JPanel();\n\t\tsacuvajButton = new JButton(\"Raspodeli\");\n\t\tsacuvajButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/ok.gif\")));\n\t\tsacuvajButton.setEnabled(false);\n\t\todustaniButton = new JButton(\"Odustani\");\n\t\todustaniButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/remove.gif\")));\n\t\traspodelaButtonsPanel.setLayout(new GridBagLayout());\n\t\tGridBagConstraints cB = new GridBagConstraints();\n\t\tcB.gridx = 0;\n\t\tcB.gridy = 0;\n\t\tcB.weightx = 0.1;\n\t\traspodelaButtonsPanel.add(sacuvajButton,cB);\n\t\tinitialize();\n\t\t\n\t\tMigLayout layout = new MigLayout(\"\",\"[][]20[]\",\"[][]30[]0[]10[]0[]10[][]\");\n\t\tsetLayout(layout);\n\t\t\n\t\tadd(new JLabel(\"Broj knjiga za raspodelu:\"),\"align right\");\t\t\n\t\tadd(brojPrimTxtFld,\"wrap, width :30: \");\t\t\n\t\tadd(new JLabel(\"Preostalo:\"),\"align right\");\t\t\n\t\tadd(preostaloTxtFld,\"wrap, width :30:\");\n\t\n\t\tadd(new JLabel(\"Odeljenje:\"),\"cell 0 2 2 1\");\n\t\tadd(odeljenjePanel,\"cell 0 3 2 1\");\n\t\tadd(new JLabel(\"Inventarna knjiga:\"),\"cell 0 4 2 1\");\n\t\tadd(invKnjPanel,   \"cell 0 5 2 1\");\n\t\tadd(new JLabel(\"Podlokacija:\"),\"cell 0 6 2 1\");\n\t\tadd(podlokacijaPanel,   \"cell 0 7 2 1\");\n\t\t\n\t\tJPanel brPrim = new JPanel();\n\t\tbrPrim.setLayout(new MigLayout());\n\t\tbrPrim.add(new JLabel(\"Broj primeraka:\"));\n\t\tbrPrim.add(raspodelaSpinner,\"growy\");\n\t\tbrPrim.add(dodajButton);\t\t\n\t\tadd(brPrim,\"cell 0 8 2 1\");\t\t\n\t\tadd(raspodelaScrollPane,\"cell 2 0 1 7, grow\");\t\t\n\t\tJPanel buttonsPanel = new JPanel();\t\t\n\t\tbuttonsPanel.add(sacuvajButton);\n\t\tbuttonsPanel.add(odustaniButton);\n\t\tadd(buttonsPanel,\"cell 2 9 1 1, align right\");\n    \n    RaspodelaFocusTraversalPolicy policy = new RaspodelaFocusTraversalPolicy();\n    setFocusTraversalPolicy(policy);\n\t\t\n\t\t\n\t\t\n\t\t//actions\n\t\tbrojPrimTxtFld.addFocusListener(new FocusAdapter(){\n\t\t\tpublic void focusLost(FocusEvent e) {\n\t\t\t\thandleSetPreostalo();\n\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\tdodajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleAddPrimerak();\t\t\t\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tListSelectionModel lSelModel = raspodelaTable.getSelectionModel();\n\t\tlSelModel.addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\t\t\t\t\n\t\t\t\t\thandleLoadPrimerak();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\t\n\t\traspodelaTable.addKeyListener(new KeyAdapter(){\n\t\t\tpublic void keyPressed(KeyEvent e) {\n\t\t\t\thandleKeys(e);\n\t\t\t}\t\t\t\n\t\t});\t\t\n\t\t\n\t\tsacuvajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleRaspodeli();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\t\n\t\t\n\t\todustaniButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleClose();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t}\n\t\n\tprivate void initialize(){\n\t\tbrojPrimTxtFld.setText(\"0\");\n\t}\n\t\n\tprivate void handleAddPrimerak() {\t\n\t\tPrimerak primerak = ((MonographInventarPanel)inventarPanel).getPrimerakFromForm();\n\t\ttry {\n\t\t\tif (odeljenjePanel.getCode().equals(\"\") || odeljenjePanel.getCode().equals(\"\")) \n\t\t\t\tthrow new RaspodelaException(\"Nisu uneti svi podaci za raspodelu!\");\n\t\t\tprimerak.setOdeljenje(odeljenjePanel.getCode());\nNext line of code:\n", "input": "", "context": "/**\n * \n */\npackage com.gint.app.bisis4.client.editor.inventar;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.FocusAdapter;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport net.miginfocom.swing.MigLayout;\nimport com.gint.app.bisis4.client.BisisApp;\nimport com.gint.app.bisis4.client.editor.Messages;\nimport com.gint.app.bisis4.format.HoldingsDataCoders;\nimport com.gint.app.bisis4.format.UValidatorException;\nimport com.gint.app.bisis4.records.Primerak;\n/**\n * @author Bojana\n *\n */\npublic class RaspodelaFrame extends JInternalFrame {\n\t\n\tprivate JTable raspodelaTable;\t\n\tprivate JScrollPane raspodelaScrollPane;\n\t\n\tprivate JPanel raspodelaButtonsPanel;\t\n\tprivate JButton sacuvajButton;\n\tprivate JButton odustaniButton;\n\t\n\tprivate JTextField brojPrimTxtFld;\n\tprivate JTextField preostaloTxtFld;\n\tprivate CodedValuePanel odeljenjePanel;\n\tprivate CodedValuePanel invKnjPanel;\n\tprivate CodedValuePanel podlokacijaPanel;\n\t\n\tprivate JSpinner raspodelaSpinner;\n\tprivate JButton dodajButton;\n\t\n\tprivate InventarPanel inventarPanel;\t\n\tprivate RaspodelaTableModel raspodelaTableModel;\n\t\n  private boolean monograph = false;\n\t\n\t\n\tpublic RaspodelaFrame(InventarPanel mp) {\n    super(\"Raspodela primeraka\", true, true, false, false);\n    this.monograph = mp instanceof MonographInventarPanel;\n    if(!monograph) setTitle(\"Raspodela godina\");\n\t\t\n\t\tthis.inventarPanel = mp;\n\t\tthis.setSize(new Dimension(800,400));\n\t\tcreate();\t\t\n\t}\n\t\n\tprivate void create(){\t\t\n\t\traspodelaTable = new JTable();\n\t\tbrojPrimTxtFld = new JTextField();\n\t\tpreostaloTxtFld = new JTextField();\n\t\tdodajButton = new JButton(new ImageIcon(RaspodelaFrame.class\n\t\t\t\t.getResource(\"/com/gint/app/bisis4/client/images/Check16.png\")));\n\t\tpreostaloTxtFld.setEditable(false);\n\t\tpreostaloTxtFld.setFocusable(false);    \n\t\todeljenjePanel = new CodedValuePanel(HoldingsDataCoders.ODELJENJE_CODER,null);\n\t\todeljenjePanel.setDefaultOdeljenje();\n\t\tinvKnjPanel = new CodedValuePanel(HoldingsDataCoders.INVENTARNAKNJIGA_CODER,null);\n\t\tpodlokacijaPanel = new CodedValuePanel(HoldingsDataCoders.PODLOKACIJA_CODER, null);\n\t\traspodelaSpinner = new JSpinner();\t\t\n\t\traspodelaSpinner.setValue(new Integer(1));\n\t\tSpinnerNumberModel spinnerModel = new SpinnerNumberModel(0,0,1000,1);\n\t\traspodelaSpinner.setModel(spinnerModel);\n\t\traspodelaSpinner.setPreferredSize(new Dimension(40,20));\n\t\t\n\t\t//raspodelaSpinner.set\n\t\t\n\t\t\n\t\traspodelaTableModel = new RaspodelaTableModel(this);\n\t\traspodelaTable.setModel(raspodelaTableModel);\t\t\n\t\traspodelaTable.doLayout();\n\t\traspodelaScrollPane = new JScrollPane(raspodelaTable);\n\t\t\n\t\traspodelaButtonsPanel = new JPanel();\n\t\tsacuvajButton = new JButton(\"Raspodeli\");\n\t\tsacuvajButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/ok.gif\")));\n\t\tsacuvajButton.setEnabled(false);\n\t\todustaniButton = new JButton(\"Odustani\");\n\t\todustaniButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/remove.gif\")));\n\t\traspodelaButtonsPanel.setLayout(new GridBagLayout());\n\t\tGridBagConstraints cB = new GridBagConstraints();\n\t\tcB.gridx = 0;\n\t\tcB.gridy = 0;\n\t\tcB.weightx = 0.1;\n\t\traspodelaButtonsPanel.add(sacuvajButton,cB);\n\t\tinitialize();\n\t\t\n\t\tMigLayout layout = new MigLayout(\"\",\"[][]20[]\",\"[][]30[]0[]10[]0[]10[][]\");\n\t\tsetLayout(layout);\n\t\t\n\t\tadd(new JLabel(\"Broj knjiga za raspodelu:\"),\"align right\");\t\t\n\t\tadd(brojPrimTxtFld,\"wrap, width :30: \");\t\t\n\t\tadd(new JLabel(\"Preostalo:\"),\"align right\");\t\t\n\t\tadd(preostaloTxtFld,\"wrap, width :30:\");\n\t\n\t\tadd(new JLabel(\"Odeljenje:\"),\"cell 0 2 2 1\");\n\t\tadd(odeljenjePanel,\"cell 0 3 2 1\");\n\t\tadd(new JLabel(\"Inventarna knjiga:\"),\"cell 0 4 2 1\");\n\t\tadd(invKnjPanel,   \"cell 0 5 2 1\");\n\t\tadd(new JLabel(\"Podlokacija:\"),\"cell 0 6 2 1\");\n\t\tadd(podlokacijaPanel,   \"cell 0 7 2 1\");\n\t\t\n\t\tJPanel brPrim = new JPanel();\n\t\tbrPrim.setLayout(new MigLayout());\n\t\tbrPrim.add(new JLabel(\"Broj primeraka:\"));\n\t\tbrPrim.add(raspodelaSpinner,\"growy\");\n\t\tbrPrim.add(dodajButton);\t\t\n\t\tadd(brPrim,\"cell 0 8 2 1\");\t\t\n\t\tadd(raspodelaScrollPane,\"cell 2 0 1 7, grow\");\t\t\n\t\tJPanel buttonsPanel = new JPanel();\t\t\n\t\tbuttonsPanel.add(sacuvajButton);\n\t\tbuttonsPanel.add(odustaniButton);\n\t\tadd(buttonsPanel,\"cell 2 9 1 1, align right\");\n    \n    RaspodelaFocusTraversalPolicy policy = new RaspodelaFocusTraversalPolicy();\n    setFocusTraversalPolicy(policy);\n\t\t\n\t\t\n\t\t\n\t\t//actions\n\t\tbrojPrimTxtFld.addFocusListener(new FocusAdapter(){\n\t\t\tpublic void focusLost(FocusEvent e) {\n\t\t\t\thandleSetPreostalo();\n\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\tdodajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleAddPrimerak();\t\t\t\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tListSelectionModel lSelModel = raspodelaTable.getSelectionModel();\n\t\tlSelModel.addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\t\t\t\t\n\t\t\t\t\thandleLoadPrimerak();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\t\n\t\traspodelaTable.addKeyListener(new KeyAdapter(){\n\t\t\tpublic void keyPressed(KeyEvent e) {\n\t\t\t\thandleKeys(e);\n\t\t\t}\t\t\t\n\t\t});\t\t\n\t\t\n\t\tsacuvajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleRaspodeli();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\t\n\t\t\n\t\todustaniButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleClose();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t}\n\t\n\tprivate void initialize(){\n\t\tbrojPrimTxtFld.setText(\"0\");\n\t}\n\t\n\tprivate void handleAddPrimerak() {\t\n\t\tPrimerak primerak = ((MonographInventarPanel)inventarPanel).getPrimerakFromForm();\n\t\ttry {\n\t\t\tif (odeljenjePanel.getCode().equals(\"\") || odeljenjePanel.getCode().equals(\"\")) \n\t\t\t\tthrow new RaspodelaException(\"Nisu uneti svi podaci za raspodelu!\");\n\t\t\tprimerak.setOdeljenje(odeljenjePanel.getCode());\n", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "length": 451, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "5a3807e791e54f080c852b4a4ffaa104dc61429725efd608", "pred": "```\nprimerak.setInventarnaKnjiga(invKnjigaPanel.getCode());\n```\nNext line of code:\n```\nprimerak.setPodlokacija(podlokacijaPanel.getCode());\n```\nNext line of code:\n```\n((MonographInventarPanel)inventarPanel)."}
{"prompt": "Please complete the code given below. \n#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\n// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.\nnamespace ClearCanvas.ImageServer.Model.EntityBrokers\n{\n    using System;\n    using System.Xml;\n    using ClearCanvas.Enterprise.Core;\n    using ClearCanvas.ImageServer.Enterprise;\n    public partial class WorkQueueSelectCriteria : EntitySelectCriteria\n    {\n        public WorkQueueSelectCriteria()\n        : base(\"WorkQueue\")\n        {}\n        public WorkQueueSelectCriteria(WorkQueueSelectCriteria other)\n        : base(other)\n        {}\n        public override object Clone()\n        {\n            return new WorkQueueSelectCriteria(this);\n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ServerPartitionGUID\")]\n        public ISearchCondition<ServerEntityKey> ServerPartitionKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ServerPartitionKey\"))\n              {\n                 SubCriteria[\"ServerPartitionKey\"] = new SearchCondition<ServerEntityKey>(\"ServerPartitionKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ServerPartitionKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"StudyStorageGUID\")]\n        public ISearchCondition<ServerEntityKey> StudyStorageKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"StudyStorageKey\"))\n              {\n                 SubCriteria[\"StudyStorageKey\"] = new SearchCondition<ServerEntityKey>(\"StudyStorageKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"StudyStorageKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueTypeEnum\")]\n        public ISearchCondition<WorkQueueTypeEnum> WorkQueueTypeEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueTypeEnum\"))\n              {\n                 SubCriteria[\"WorkQueueTypeEnum\"] = new SearchCondition<WorkQueueTypeEnum>(\"WorkQueueTypeEnum\");\n              }\n              return (ISearchCondition<WorkQueueTypeEnum>)SubCriteria[\"WorkQueueTypeEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueStatusEnum\")]\n        public ISearchCondition<WorkQueueStatusEnum> WorkQueueStatusEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueStatusEnum\"))\n              {\n                 SubCriteria[\"WorkQueueStatusEnum\"] = new SearchCondition<WorkQueueStatusEnum>(\"WorkQueueStatusEnum\");\n              }\n              return (ISearchCondition<WorkQueueStatusEnum>)SubCriteria[\"WorkQueueStatusEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueuePriorityEnum\")]\n        public ISearchCondition<WorkQueuePriorityEnum> WorkQueuePriorityEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueuePriorityEnum\"))\n              {\n                 SubCriteria[\"WorkQueuePriorityEnum\"] = new SearchCondition<WorkQueuePriorityEnum>(\"WorkQueuePriorityEnum\");\n              }\n              return (ISearchCondition<WorkQueuePriorityEnum>)SubCriteria[\"WorkQueuePriorityEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureCount\")]\n        public ISearchCondition<Int32> FailureCount\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureCount\"))\n              {\n                 SubCriteria[\"FailureCount\"] = new SearchCondition<Int32>(\"FailureCount\");\n              }\n              return (ISearchCondition<Int32>)SubCriteria[\"FailureCount\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ScheduledTime\")]\n        public ISearchCondition<DateTime> ScheduledTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ScheduledTime\"))\n              {\n                 SubCriteria[\"ScheduledTime\"] = new SearchCondition<DateTime>(\"ScheduledTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"ScheduledTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"InsertTime\")]\n        public ISearchCondition<DateTime> InsertTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"InsertTime\"))\n              {\n                 SubCriteria[\"InsertTime\"] = new SearchCondition<DateTime>(\"InsertTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"InsertTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"LastUpdatedTime\")]\n        public ISearchCondition<DateTime?> LastUpdatedTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"LastUpdatedTime\"))\n              {\n                 SubCriteria[\"LastUpdatedTime\"] = new SearchCondition<DateTime?>(\"LastUpdatedTime\");\n              }\n              return (ISearchCondition<DateTime?>)SubCriteria[\"LastUpdatedTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureDescription\")]\n        public ISearchCondition<String> FailureDescription\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureDescription\"))\n              {\n                 SubCriteria[\"FailureDescription\"] = new SearchCondition<String>(\"FailureDescription\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"FailureDescription\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"Data\")]\n        public ISearchCondition<XmlDocument> Data\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"Data\"))\n              {\n                 SubCriteria[\"Data\"] = new SearchCondition<XmlDocument>(\"Data\");\n              }\n              return (ISearchCondition<XmlDocument>)SubCriteria[\"Data\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ExternalRequestQueueGUID\")]\n        public ISearchCondition<ServerEntityKey> ExternalRequestQueueKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ExternalRequestQueueKey\"))\n              {\n                 SubCriteria[\"ExternalRequestQueueKey\"] = new SearchCondition<ServerEntityKey>(\"ExternalRequestQueueKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ExternalRequestQueueKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ProcessorID\")]\n        public ISearchCondition<String> ProcessorID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ProcessorID\"))\n              {\n                 SubCriteria[\"ProcessorID\"] = new SearchCondition<String>(\"ProcessorID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"ProcessorID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"GroupID\")]\n        public ISearchCondition<String> GroupID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"GroupID\"))\n              {\nNext line of code:\n", "input": "", "context": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\n// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.\nnamespace ClearCanvas.ImageServer.Model.EntityBrokers\n{\n    using System;\n    using System.Xml;\n    using ClearCanvas.Enterprise.Core;\n    using ClearCanvas.ImageServer.Enterprise;\n    public partial class WorkQueueSelectCriteria : EntitySelectCriteria\n    {\n        public WorkQueueSelectCriteria()\n        : base(\"WorkQueue\")\n        {}\n        public WorkQueueSelectCriteria(WorkQueueSelectCriteria other)\n        : base(other)\n        {}\n        public override object Clone()\n        {\n            return new WorkQueueSelectCriteria(this);\n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ServerPartitionGUID\")]\n        public ISearchCondition<ServerEntityKey> ServerPartitionKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ServerPartitionKey\"))\n              {\n                 SubCriteria[\"ServerPartitionKey\"] = new SearchCondition<ServerEntityKey>(\"ServerPartitionKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ServerPartitionKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"StudyStorageGUID\")]\n        public ISearchCondition<ServerEntityKey> StudyStorageKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"StudyStorageKey\"))\n              {\n                 SubCriteria[\"StudyStorageKey\"] = new SearchCondition<ServerEntityKey>(\"StudyStorageKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"StudyStorageKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueTypeEnum\")]\n        public ISearchCondition<WorkQueueTypeEnum> WorkQueueTypeEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueTypeEnum\"))\n              {\n                 SubCriteria[\"WorkQueueTypeEnum\"] = new SearchCondition<WorkQueueTypeEnum>(\"WorkQueueTypeEnum\");\n              }\n              return (ISearchCondition<WorkQueueTypeEnum>)SubCriteria[\"WorkQueueTypeEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueStatusEnum\")]\n        public ISearchCondition<WorkQueueStatusEnum> WorkQueueStatusEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueStatusEnum\"))\n              {\n                 SubCriteria[\"WorkQueueStatusEnum\"] = new SearchCondition<WorkQueueStatusEnum>(\"WorkQueueStatusEnum\");\n              }\n              return (ISearchCondition<WorkQueueStatusEnum>)SubCriteria[\"WorkQueueStatusEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueuePriorityEnum\")]\n        public ISearchCondition<WorkQueuePriorityEnum> WorkQueuePriorityEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueuePriorityEnum\"))\n              {\n                 SubCriteria[\"WorkQueuePriorityEnum\"] = new SearchCondition<WorkQueuePriorityEnum>(\"WorkQueuePriorityEnum\");\n              }\n              return (ISearchCondition<WorkQueuePriorityEnum>)SubCriteria[\"WorkQueuePriorityEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureCount\")]\n        public ISearchCondition<Int32> FailureCount\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureCount\"))\n              {\n                 SubCriteria[\"FailureCount\"] = new SearchCondition<Int32>(\"FailureCount\");\n              }\n              return (ISearchCondition<Int32>)SubCriteria[\"FailureCount\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ScheduledTime\")]\n        public ISearchCondition<DateTime> ScheduledTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ScheduledTime\"))\n              {\n                 SubCriteria[\"ScheduledTime\"] = new SearchCondition<DateTime>(\"ScheduledTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"ScheduledTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"InsertTime\")]\n        public ISearchCondition<DateTime> InsertTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"InsertTime\"))\n              {\n                 SubCriteria[\"InsertTime\"] = new SearchCondition<DateTime>(\"InsertTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"InsertTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"LastUpdatedTime\")]\n        public ISearchCondition<DateTime?> LastUpdatedTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"LastUpdatedTime\"))\n              {\n                 SubCriteria[\"LastUpdatedTime\"] = new SearchCondition<DateTime?>(\"LastUpdatedTime\");\n              }\n              return (ISearchCondition<DateTime?>)SubCriteria[\"LastUpdatedTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureDescription\")]\n        public ISearchCondition<String> FailureDescription\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureDescription\"))\n              {\n                 SubCriteria[\"FailureDescription\"] = new SearchCondition<String>(\"FailureDescription\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"FailureDescription\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"Data\")]\n        public ISearchCondition<XmlDocument> Data\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"Data\"))\n              {\n                 SubCriteria[\"Data\"] = new SearchCondition<XmlDocument>(\"Data\");\n              }\n              return (ISearchCondition<XmlDocument>)SubCriteria[\"Data\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ExternalRequestQueueGUID\")]\n        public ISearchCondition<ServerEntityKey> ExternalRequestQueueKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ExternalRequestQueueKey\"))\n              {\n                 SubCriteria[\"ExternalRequestQueueKey\"] = new SearchCondition<ServerEntityKey>(\"ExternalRequestQueueKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ExternalRequestQueueKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ProcessorID\")]\n        public ISearchCondition<String> ProcessorID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ProcessorID\"))\n              {\n                 SubCriteria[\"ProcessorID\"] = new SearchCondition<String>(\"ProcessorID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"ProcessorID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"GroupID\")]\n        public ISearchCondition<String> GroupID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"GroupID\"))\n              {\n", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "length": 475, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "d1cdb285b1f1b73f8d637fde4adf331aa839bb2e31eb8599", "pred": "```\n              SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n            }\n            return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n          }\n        }\n    }\n```\nThis is a partial class for a WorkQueueSelectCriteria class. The class is used to filter and select data"}
{"prompt": "Please complete the code given below. \n/*\n * Handlers.cs - Implementation of the \"I18N.Common.Handlers\" class.\n *\n * Copyright (c) 2002  Southern Storm Software, Pty Ltd\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nnamespace I18N.Common\n{\nusing System;\nusing System.Collections.Generic;\n// This class provides an internal list of handlers, for runtime\n// engines that do not implement the altered \"GetFile\" semantics.\n// The list must be kept up to date manually.\npublic sealed class Handlers\n{\n    public static readonly String[] List = {\n        \"I18N.CJK.CP932\",\n        \"I18N.CJK.CP936\",\n        \"I18N.CJK.CP949\",\n        \"I18N.CJK.CP950\",\n        \"I18N.CJK.CP50220\",\n        \"I18N.CJK.CP50221\",\n        \"I18N.CJK.CP50222\",\n        \"I18N.CJK.CP51932\",\n        \"I18N.CJK.CP51949\",\n        \"I18N.CJK.CP54936\",\n        \"I18N.CJK.ENCbig5\",\n        \"I18N.CJK.ENCgb2312\",\n        \"I18N.CJK.ENCshift_jis\",\n        \"I18N.CJK.ENCiso_2022_jp\",\n        \"I18N.CJK.ENCeuc_jp\",\n        \"I18N.CJK.ENCeuc_kr\",\n        \"I18N.CJK.ENCuhc\",\n        \"I18N.CJK.ENCgb18030\",\n        \"I18N.MidEast.CP1254\",\n        \"I18N.MidEast.ENCwindows_1254\",\n        \"I18N.MidEast.CP1255\",\n        \"I18N.MidEast.ENCwindows_1255\",\n        \"I18N.MidEast.CP1256\",\n        \"I18N.MidEast.ENCwindows_1256\",\n        \"I18N.MidEast.CP28596\",\n        \"I18N.MidEast.ENCiso_8859_6\",\n        \"I18N.MidEast.CP28598\",\n        \"I18N.MidEast.ENCiso_8859_8\",\n        \"I18N.MidEast.CP28599\",\n        \"I18N.MidEast.ENCiso_8859_9\",\n        \"I18N.MidEast.CP38598\",\n        \"I18N.MidEast.ENCwindows_38598\",\n        \"I18N.Other.CP1251\",\n        \"I18N.Other.ENCwindows_1251\",\n        \"I18N.Other.CP1257\",\n        \"I18N.Other.ENCwindows_1257\",\n        \"I18N.Other.CP1258\",\n        \"I18N.Other.ENCwindows_1258\",\n        \"I18N.Other.CP20866\",\n        \"I18N.Other.ENCkoi8_r\",\n        \"I18N.Other.CP21866\",\n        \"I18N.Other.ENCkoi8_u\",\n        \"I18N.Other.CP28594\",\n        \"I18N.Other.ENCiso_8859_4\",\n        \"I18N.Other.CP28595\",\n        \"I18N.Other.ENCiso_8859_5\",\n        \"I18N.Other.ISCIIEncoding\",\n        \"I18N.Other.CP57002\",\n        \"I18N.Other.CP57003\",\n        \"I18N.Other.CP57004\",\n        \"I18N.Other.CP57005\",\n        \"I18N.Other.CP57006\",\n        \"I18N.Other.CP57007\",\n        \"I18N.Other.CP57008\",\n        \"I18N.Other.CP57009\",\n        \"I18N.Other.CP57010\",\n        \"I18N.Other.CP57011\",\n        \"I18N.Other.ENCx_iscii_de\",\n        \"I18N.Other.ENCx_iscii_be\",\n        \"I18N.Other.ENCx_iscii_ta\",\n        \"I18N.Other.ENCx_iscii_te\",\n        \"I18N.Other.ENCx_iscii_as\",\n        \"I18N.Other.ENCx_iscii_or\",\n        \"I18N.Other.ENCx_iscii_ka\",\n        \"I18N.Other.ENCx_iscii_ma\",\n        \"I18N.Other.ENCx_iscii_gu\",\n        \"I18N.Other.ENCx_iscii_pa\",\n        \"I18N.Other.CP874\",\n        \"I18N.Other.ENCwindows_874\",\n        \"I18N.Rare.CP1026\",\n        \"I18N.Rare.ENCibm1026\",\n        \"I18N.Rare.CP1047\",\n        \"I18N.Rare.ENCibm1047\",\n        \"I18N.Rare.CP1140\",\n        \"I18N.Rare.ENCibm01140\",\n        \"I18N.Rare.CP1141\",\n        \"I18N.Rare.ENCibm01141\",\n        \"I18N.Rare.CP1142\",\n        \"I18N.Rare.ENCibm01142\",\n        \"I18N.Rare.CP1143\",\n        \"I18N.Rare.ENCibm01143\",\n        \"I18N.Rare.CP1144\",\n        \"I18N.Rare.ENCibm1144\",\n        \"I18N.Rare.CP1145\",\n        \"I18N.Rare.ENCibm1145\",\n        \"I18N.Rare.CP1146\",\n        \"I18N.Rare.ENCibm1146\",\n        \"I18N.Rare.CP1147\",\n        \"I18N.Rare.ENCibm1147\",\n        \"I18N.Rare.CP1148\",\n        \"I18N.Rare.ENCibm1148\",\n        \"I18N.Rare.CP1149\",\n        \"I18N.Rare.ENCibm1149\",\n        \"I18N.Rare.CP20273\",\n        \"I18N.Rare.ENCibm273\",\n        \"I18N.Rare.CP20277\",\n        \"I18N.Rare.ENCibm277\",\n        \"I18N.Rare.CP20278\",\n        \"I18N.Rare.ENCibm278\",\n        \"I18N.Rare.CP20280\",\n        \"I18N.Rare.ENCibm280\",\n        \"I18N.Rare.CP20284\",\n        \"I18N.Rare.ENCibm284\",\n        \"I18N.Rare.CP20285\",\n        \"I18N.Rare.ENCibm285\",\n        \"I18N.Rare.CP20290\",\n        \"I18N.Rare.ENCibm290\",\n        \"I18N.Rare.CP20297\",\n        \"I18N.Rare.ENCibm297\",\n        \"I18N.Rare.CP20420\",\n        \"I18N.Rare.ENCibm420\",\n        \"I18N.Rare.CP20424\",\n        \"I18N.Rare.ENCibm424\",\n        \"I18N.Rare.CP20871\",\n        \"I18N.Rare.ENCibm871\",\n        \"I18N.Rare.CP21025\",\n        \"I18N.Rare.ENCibm1025\",\n        \"I18N.Rare.CP37\",\n        \"I18N.Rare.ENCibm037\",\n        \"I18N.Rare.CP500\",\n        \"I18N.Rare.ENCibm500\",\n        \"I18N.Rare.CP708\",\n        \"I18N.Rare.ENCasmo_708\",\n        \"I18N.Rare.CP852\",\n        \"I18N.Rare.ENCibm852\",\n        \"I18N.Rare.CP855\",\n        \"I18N.Rare.ENCibm855\",\n        \"I18N.Rare.CP857\",\n        \"I18N.Rare.ENCibm857\",\n        \"I18N.Rare.CP858\",\n        \"I18N.Rare.ENCibm00858\",\n        \"I18N.Rare.CP862\",\n        \"I18N.Rare.ENCibm862\",\n        \"I18N.Rare.CP864\",\n        \"I18N.Rare.ENCibm864\",\n        \"I18N.Rare.CP866\",\n        \"I18N.Rare.ENCibm866\",\n        \"I18N.Rare.CP869\",\n        \"I18N.Rare.ENCibm869\",\n        \"I18N.Rare.CP870\",\n        \"I18N.Rare.ENCibm870\",\n        \"I18N.Rare.CP875\",\n        \"I18N.Rare.ENCibm875\",\n        \"I18N.West.CP10000\",\n        \"I18N.West.ENCmacintosh\",\n        \"I18N.West.CP10079\",\n        \"I18N.West.ENCx_mac_icelandic\",\n        \"I18N.West.CP1250\",\n        \"I18N.West.ENCwindows_1250\",\n        \"I18N.West.CP1252\",\n        \"I18N.West.ENCwindows_1252\",\n        \"I18N.West.CP1253\",\n        \"I18N.West.ENCwindows_1253\",\n        \"I18N.West.CP28592\",\n        \"I18N.West.ENCiso_8859_2\",\n        \"I18N.West.CP28593\",\n        \"I18N.West.ENCiso_8859_3\",\n        \"I18N.West.CP28597\",\n        \"I18N.West.ENCiso_8859_7\",\n        \"I18N.West.CP28605\",\n        \"I18N.West.ENCiso_8859_15\",\n        \"I18N.West.CP437\",\n        \"I18N.West.ENCibm437\",\n        \"I18N.West.CP850\",\n        \"I18N.West.ENCibm850\",\n        \"I18N.West.CP860\",\n        \"I18N.West.ENCibm860\",\n        \"I18N.West.CP861\",\n        \"I18N.West.ENCibm861\",\n        \"I18N.West.CP863\",\n        \"I18N.West.ENCibm863\",\n        \"I18N.West.CP865\",\n        \"I18N.West.ENCibm865\"\n    };\n\t\n\tstatic Dictionary<string, string> aliases;\n\tpublic static string GetAlias (string name)\n\t{\n\t\tif (aliases == null)\n\t\t\tBuildHash ();\n\t\tstring v;\n\t\taliases.TryGetValue (name, out v);\n\t\treturn v;\n\t}\n\tstatic void BuildHash ()\n\t{\n\t\taliases = new Dictionary<string, string> (StringComparer.OrdinalIgnoreCase);\n\t\taliases.Add (\"arabic\", \"iso_8859_6\");\n\t\taliases.Add (\"csISOLatinArabic\", \"iso_8859_6\");\n\t\taliases.Add (\"ECMA_114\", \"iso_8859_6\");\n\t\taliases.Add (\"ISO_8859_6:1987\", \"iso_8859_6\");\n\t\taliases.Add (\"iso_ir_127\", \"iso_8859_6\");\n\t\taliases.Add (\"cp1256\" ,\"windows_1256\");\n\t\taliases.Add (\"csISOLatin4\", \"iso_8859_4\");\n\t\taliases.Add (\"ISO_8859_4:1988\", \"iso_8859_4\");\n\t\taliases.Add (\"iso_ir_110\", \"iso_8859_4\");\n\t\taliases.Add (\"l4\", \"iso_8859_4\");\n\t\taliases.Add (\"latin4\", \"iso_8859_4\");\n\t\taliases.Add (\"cp852\" ,\"ibm852\");\n\t\taliases.Add (\"csISOLatin2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_8859_2:1987\", \"iso_8859_2\");\n\t\taliases.Add (\"iso8859_2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_ir_101\", \"iso_8859_2\");\n\t\taliases.Add (\"l2\", \"iso_8859_2\");\n\t\taliases.Add (\"latin2\", \"iso_8859_2\");\n\t\taliases.Add (\"x-cp1250\", \"windows_1250\");\n\t\taliases.Add (\"chinese\", \"gb2312\");\n\t\taliases.Add (\"CN-GB\", \"gb2312\");\n\t\taliases.Add (\"csGB2312\", \"gb2312\");\n\t\taliases.Add (\"csGB231280\", \"gb2312\");\n\t\taliases.Add (\"csISO58GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB_2312_80\", \"gb2312\");\n\t\taliases.Add (\"GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB2312_80\", \"gb2312\");\nNext line of code:\n", "input": "", "context": "/*\n * Handlers.cs - Implementation of the \"I18N.Common.Handlers\" class.\n *\n * Copyright (c) 2002  Southern Storm Software, Pty Ltd\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nnamespace I18N.Common\n{\nusing System;\nusing System.Collections.Generic;\n// This class provides an internal list of handlers, for runtime\n// engines that do not implement the altered \"GetFile\" semantics.\n// The list must be kept up to date manually.\npublic sealed class Handlers\n{\n    public static readonly String[] List = {\n        \"I18N.CJK.CP932\",\n        \"I18N.CJK.CP936\",\n        \"I18N.CJK.CP949\",\n        \"I18N.CJK.CP950\",\n        \"I18N.CJK.CP50220\",\n        \"I18N.CJK.CP50221\",\n        \"I18N.CJK.CP50222\",\n        \"I18N.CJK.CP51932\",\n        \"I18N.CJK.CP51949\",\n        \"I18N.CJK.CP54936\",\n        \"I18N.CJK.ENCbig5\",\n        \"I18N.CJK.ENCgb2312\",\n        \"I18N.CJK.ENCshift_jis\",\n        \"I18N.CJK.ENCiso_2022_jp\",\n        \"I18N.CJK.ENCeuc_jp\",\n        \"I18N.CJK.ENCeuc_kr\",\n        \"I18N.CJK.ENCuhc\",\n        \"I18N.CJK.ENCgb18030\",\n        \"I18N.MidEast.CP1254\",\n        \"I18N.MidEast.ENCwindows_1254\",\n        \"I18N.MidEast.CP1255\",\n        \"I18N.MidEast.ENCwindows_1255\",\n        \"I18N.MidEast.CP1256\",\n        \"I18N.MidEast.ENCwindows_1256\",\n        \"I18N.MidEast.CP28596\",\n        \"I18N.MidEast.ENCiso_8859_6\",\n        \"I18N.MidEast.CP28598\",\n        \"I18N.MidEast.ENCiso_8859_8\",\n        \"I18N.MidEast.CP28599\",\n        \"I18N.MidEast.ENCiso_8859_9\",\n        \"I18N.MidEast.CP38598\",\n        \"I18N.MidEast.ENCwindows_38598\",\n        \"I18N.Other.CP1251\",\n        \"I18N.Other.ENCwindows_1251\",\n        \"I18N.Other.CP1257\",\n        \"I18N.Other.ENCwindows_1257\",\n        \"I18N.Other.CP1258\",\n        \"I18N.Other.ENCwindows_1258\",\n        \"I18N.Other.CP20866\",\n        \"I18N.Other.ENCkoi8_r\",\n        \"I18N.Other.CP21866\",\n        \"I18N.Other.ENCkoi8_u\",\n        \"I18N.Other.CP28594\",\n        \"I18N.Other.ENCiso_8859_4\",\n        \"I18N.Other.CP28595\",\n        \"I18N.Other.ENCiso_8859_5\",\n        \"I18N.Other.ISCIIEncoding\",\n        \"I18N.Other.CP57002\",\n        \"I18N.Other.CP57003\",\n        \"I18N.Other.CP57004\",\n        \"I18N.Other.CP57005\",\n        \"I18N.Other.CP57006\",\n        \"I18N.Other.CP57007\",\n        \"I18N.Other.CP57008\",\n        \"I18N.Other.CP57009\",\n        \"I18N.Other.CP57010\",\n        \"I18N.Other.CP57011\",\n        \"I18N.Other.ENCx_iscii_de\",\n        \"I18N.Other.ENCx_iscii_be\",\n        \"I18N.Other.ENCx_iscii_ta\",\n        \"I18N.Other.ENCx_iscii_te\",\n        \"I18N.Other.ENCx_iscii_as\",\n        \"I18N.Other.ENCx_iscii_or\",\n        \"I18N.Other.ENCx_iscii_ka\",\n        \"I18N.Other.ENCx_iscii_ma\",\n        \"I18N.Other.ENCx_iscii_gu\",\n        \"I18N.Other.ENCx_iscii_pa\",\n        \"I18N.Other.CP874\",\n        \"I18N.Other.ENCwindows_874\",\n        \"I18N.Rare.CP1026\",\n        \"I18N.Rare.ENCibm1026\",\n        \"I18N.Rare.CP1047\",\n        \"I18N.Rare.ENCibm1047\",\n        \"I18N.Rare.CP1140\",\n        \"I18N.Rare.ENCibm01140\",\n        \"I18N.Rare.CP1141\",\n        \"I18N.Rare.ENCibm01141\",\n        \"I18N.Rare.CP1142\",\n        \"I18N.Rare.ENCibm01142\",\n        \"I18N.Rare.CP1143\",\n        \"I18N.Rare.ENCibm01143\",\n        \"I18N.Rare.CP1144\",\n        \"I18N.Rare.ENCibm1144\",\n        \"I18N.Rare.CP1145\",\n        \"I18N.Rare.ENCibm1145\",\n        \"I18N.Rare.CP1146\",\n        \"I18N.Rare.ENCibm1146\",\n        \"I18N.Rare.CP1147\",\n        \"I18N.Rare.ENCibm1147\",\n        \"I18N.Rare.CP1148\",\n        \"I18N.Rare.ENCibm1148\",\n        \"I18N.Rare.CP1149\",\n        \"I18N.Rare.ENCibm1149\",\n        \"I18N.Rare.CP20273\",\n        \"I18N.Rare.ENCibm273\",\n        \"I18N.Rare.CP20277\",\n        \"I18N.Rare.ENCibm277\",\n        \"I18N.Rare.CP20278\",\n        \"I18N.Rare.ENCibm278\",\n        \"I18N.Rare.CP20280\",\n        \"I18N.Rare.ENCibm280\",\n        \"I18N.Rare.CP20284\",\n        \"I18N.Rare.ENCibm284\",\n        \"I18N.Rare.CP20285\",\n        \"I18N.Rare.ENCibm285\",\n        \"I18N.Rare.CP20290\",\n        \"I18N.Rare.ENCibm290\",\n        \"I18N.Rare.CP20297\",\n        \"I18N.Rare.ENCibm297\",\n        \"I18N.Rare.CP20420\",\n        \"I18N.Rare.ENCibm420\",\n        \"I18N.Rare.CP20424\",\n        \"I18N.Rare.ENCibm424\",\n        \"I18N.Rare.CP20871\",\n        \"I18N.Rare.ENCibm871\",\n        \"I18N.Rare.CP21025\",\n        \"I18N.Rare.ENCibm1025\",\n        \"I18N.Rare.CP37\",\n        \"I18N.Rare.ENCibm037\",\n        \"I18N.Rare.CP500\",\n        \"I18N.Rare.ENCibm500\",\n        \"I18N.Rare.CP708\",\n        \"I18N.Rare.ENCasmo_708\",\n        \"I18N.Rare.CP852\",\n        \"I18N.Rare.ENCibm852\",\n        \"I18N.Rare.CP855\",\n        \"I18N.Rare.ENCibm855\",\n        \"I18N.Rare.CP857\",\n        \"I18N.Rare.ENCibm857\",\n        \"I18N.Rare.CP858\",\n        \"I18N.Rare.ENCibm00858\",\n        \"I18N.Rare.CP862\",\n        \"I18N.Rare.ENCibm862\",\n        \"I18N.Rare.CP864\",\n        \"I18N.Rare.ENCibm864\",\n        \"I18N.Rare.CP866\",\n        \"I18N.Rare.ENCibm866\",\n        \"I18N.Rare.CP869\",\n        \"I18N.Rare.ENCibm869\",\n        \"I18N.Rare.CP870\",\n        \"I18N.Rare.ENCibm870\",\n        \"I18N.Rare.CP875\",\n        \"I18N.Rare.ENCibm875\",\n        \"I18N.West.CP10000\",\n        \"I18N.West.ENCmacintosh\",\n        \"I18N.West.CP10079\",\n        \"I18N.West.ENCx_mac_icelandic\",\n        \"I18N.West.CP1250\",\n        \"I18N.West.ENCwindows_1250\",\n        \"I18N.West.CP1252\",\n        \"I18N.West.ENCwindows_1252\",\n        \"I18N.West.CP1253\",\n        \"I18N.West.ENCwindows_1253\",\n        \"I18N.West.CP28592\",\n        \"I18N.West.ENCiso_8859_2\",\n        \"I18N.West.CP28593\",\n        \"I18N.West.ENCiso_8859_3\",\n        \"I18N.West.CP28597\",\n        \"I18N.West.ENCiso_8859_7\",\n        \"I18N.West.CP28605\",\n        \"I18N.West.ENCiso_8859_15\",\n        \"I18N.West.CP437\",\n        \"I18N.West.ENCibm437\",\n        \"I18N.West.CP850\",\n        \"I18N.West.ENCibm850\",\n        \"I18N.West.CP860\",\n        \"I18N.West.ENCibm860\",\n        \"I18N.West.CP861\",\n        \"I18N.West.ENCibm861\",\n        \"I18N.West.CP863\",\n        \"I18N.West.ENCibm863\",\n        \"I18N.West.CP865\",\n        \"I18N.West.ENCibm865\"\n    };\n\t\n\tstatic Dictionary<string, string> aliases;\n\tpublic static string GetAlias (string name)\n\t{\n\t\tif (aliases == null)\n\t\t\tBuildHash ();\n\t\tstring v;\n\t\taliases.TryGetValue (name, out v);\n\t\treturn v;\n\t}\n\tstatic void BuildHash ()\n\t{\n\t\taliases = new Dictionary<string, string> (StringComparer.OrdinalIgnoreCase);\n\t\taliases.Add (\"arabic\", \"iso_8859_6\");\n\t\taliases.Add (\"csISOLatinArabic\", \"iso_8859_6\");\n\t\taliases.Add (\"ECMA_114\", \"iso_8859_6\");\n\t\taliases.Add (\"ISO_8859_6:1987\", \"iso_8859_6\");\n\t\taliases.Add (\"iso_ir_127\", \"iso_8859_6\");\n\t\taliases.Add (\"cp1256\" ,\"windows_1256\");\n\t\taliases.Add (\"csISOLatin4\", \"iso_8859_4\");\n\t\taliases.Add (\"ISO_8859_4:1988\", \"iso_8859_4\");\n\t\taliases.Add (\"iso_ir_110\", \"iso_8859_4\");\n\t\taliases.Add (\"l4\", \"iso_8859_4\");\n\t\taliases.Add (\"latin4\", \"iso_8859_4\");\n\t\taliases.Add (\"cp852\" ,\"ibm852\");\n\t\taliases.Add (\"csISOLatin2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_8859_2:1987\", \"iso_8859_2\");\n\t\taliases.Add (\"iso8859_2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_ir_101\", \"iso_8859_2\");\n\t\taliases.Add (\"l2\", \"iso_8859_2\");\n\t\taliases.Add (\"latin2\", \"iso_8859_2\");\n\t\taliases.Add (\"x-cp1250\", \"windows_1250\");\n\t\taliases.Add (\"chinese\", \"gb2312\");\n\t\taliases.Add (\"CN-GB\", \"gb2312\");\n\t\taliases.Add (\"csGB2312\", \"gb2312\");\n\t\taliases.Add (\"csGB231280\", \"gb2312\");\n\t\taliases.Add (\"csISO58GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB_2312_80\", \"gb2312\");\n\t\taliases.Add (\"GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB2312_80\", \"gb2312\");\n", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "length": 545, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "2332b1a0569df7051e4f8442139c2dbbdf7b27bf1ef7cd16", "pred": "```\n        aliases.Add (\"cp936\",\"gbk\");\n        aliases.Add (\"csGBK\", \"gbk\");\n        aliases.Add (\"csISO58GBK\", \"gbk\");\n        aliases.Add (\"GBK\", \"gbk\");\n        aliases.Add (\"cp950\",\"big5\");\n        aliases.Add"}
{"prompt": "Please complete the code given below. \n\"\"\"Tools for parsing a regular expression into a Pattern.\"\"\"\nimport collections\nimport string\nimport charsource\nimport pattern as p\n# Characters that represent themselves in a regular expression.\n# TODO(jasonpr): Handle $ and ^ specially at edges of regex.\n_CHAR_LITERALS = string.ascii_letters + string.digits + '!\"#$%&\\',-/:;<=>@^_`~]} \\t\\n\\r'\n# Characters that represent themselves inside a square-bracket expression.\n_GROUP_CHARS = string.ascii_letters + string.digits + '!\"#$%&\\'()*+,-./:;<=>?@[^_`{|}~'\n# Characters that represent themselves when escaped with a backslash.\n_IDENTIY_ESCAPES = r'.[\\()*+?{|'\n# Characters that represent a character class when escaped with a backslash.\n_CHARACTER_CLASSES = {\n    'd': string.digits,\n    'w': string.ascii_letters + string.digits + '_',\n    'h': string.hexdigits,\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    's': string.whitespace,\n    }\n_BRACKET_CHARACTER_CLASSES = {\n    'alnum': set(string.ascii_letters + string.digits),\n    'alpha': set(string.ascii_letters),\n    'digit': set(string.digits),\n    'lower': set(string.ascii_lowercase),\n    'print': set(string.printable),\n    'punct': set(string.punctuation),\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    'space': set(string.whitespace),\n    'upper': set(string.ascii_uppercase),\n    'xdigit': set(string.hexdigits),\n    }\ndef parse_regex(regex_string):\n    \"\"\"Convert a regular expression string into a Pattern.\"\"\"\n    return _parse_regex(charsource.GetPutSource(regex_string))\n# The following _parse_* methods form a recursive descent parser\n# that respect the order of operations in a regular expression.\ndef _parse_regex(source):\n    \"\"\"Parse any regex into a Pattern.\"\"\"\n    return _parse_alternation(source)\ndef _parse_alternation(source):\n    \"\"\"Parse an alternation expression, like 'ab|cd|ef'.\"\"\"\n    parts = []\n    # Act as though the last character was a '|', so we get the\n    # initial element of the alternation.\n    last_char = '|'\n    while last_char == '|':\n        parts.append(_parse_concatenation(source))\n        last_char = source.get()\n    # Put back the non-alternation character.\n    source.put(last_char)\n    return p.Or(*parts)\ndef _parse_concatenation(source):\n    \"\"\"Parse a concatenation expression, like 'abc' or 'a(b|c)d*'.\"\"\"\n    parts = []\n    duplication = _parse_duplication(source)\n    # If we're expecting a concatenation, there MUST be at least\n    # one (first) element!\n    assert duplication\n    while duplication:\n        parts.append(duplication)\n        duplication = _parse_duplication(source)\n    return p.Sequence(*parts)\ndef _parse_duplication(source):\n    \"\"\"Parse a duplication expression, like 'a*' or '(a|b){3,5}'.\"\"\"\n    duplicated = _parse_parenthesization(source)\n    if not duplicated:\n        return None\n    duplicator = source.get()\n    if duplicator == '?':\n        return p.Maybe(duplicated)\n    elif duplicator == '*':\n        return p.Star(duplicated)\n    elif duplicator == '+':\n        return p.Plus(duplicated)\n    elif duplicator == '{':\n        min_repeats = _parse_positive_int(source)\n        range_continuation = source.get()\n        # We will ultimately expect a closing curly brace, but\n        # we might see a comma and a max repeats value, first.\n        if range_continuation == ',':\n            max_repeats = _parse_positive_int(source)\n            range_continuation = source.get()\n        else:\n            max_repeats = min_repeats\n        if range_continuation != '}':\n            raise ValueError('Expected \"}\", but got \"%s\".' %\n                             range_continuation)\n        return p.Repeat(duplicated, min_repeats, max_repeats)\n    else:\n        source.put(duplicator)\n        return duplicated\ndef _parse_parenthesization(source):\n    \"\"\"Parse a parenthesization pattern, like '(a|b)' or '[ab]' or 'a'.\n    Note that '[ab]' is a parenthesization, since it is equivalent\n    to '([ab])'.  Similarly, 'a' is equivalent to '(a)'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '(':\n        enclosed_regex = _parse_regex(source)\n        close_paren = source.get()\n        assert close_paren == ')'\n        return enclosed_regex\n    # Otherwise, this must just be a group.  (Groups have just as\n    # tight of binding as a parenthesization.)\n    source.put(first_char)\n    return _parse_group(source)\ndef _parse_group(source):\n    \"\"\"Parse a group pattern, like '[abc]' or 'a'.\n    Note that 'a' is a group, since 'a' is equivalent to '[a]'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '[':\n        second_char = source.get()\n        if second_char == '^':\n            negating = True\n        else:\n            source.put(second_char)\n            negating = False\n        group_chars = _parse_group_chars(source)\n        result = p.Selection(group_chars, negating)\n        close_brace = source.get()\n        assert close_brace == ']'\n        return result\n    # Otherwise, it's a single normal character.\n    source.put(first_char)\n    return _parse_atom(source)\ndef _parse_group_chars(source):\n    \"\"\"Parse the characters from a group specification.\n    This is just a string of characters allowable in a group specification.\n    For example, a valid parse is 'aA1.?', since '[aA1.?]' is a valid group.\n    \"\"\"\n    chars = set()\n    while True:\n        range_chars = _parse_group_range(source)\n        if range_chars:\n            for char in range_chars:\n                chars.add(char)\n            continue\n        char_class = _parse_char_class(source)\n        if char_class:\n            chars |= char_class\n            continue\n        char = source.get()\n        if not char:\n            raise ValueError('Unexpected end of stream.')\n        if char not in _GROUP_CHARS:\n            source.put(char)\n            break\n        chars.add(char)\n    return ''.join(chars)\ndef _parse_atom(source):\n    \"\"\"Parse a single regex atom.\n    An atom is a period ('.'), a character literal, or an escape sequence.\n    \"\"\"\n    char = source.get()\n    if not char:\n        # For good measure, put the EOF back on!\n        # This doesn't really do anything, since the source will\n        # generate EOFs forever.\n        source.put(char)\n        return None\n    elif char == '.':\n        return p.Anything()\n    elif char in _CHAR_LITERALS:\n        return p.String(char)\n    elif char == '\\\\':\n        escaped = source.get()\n        if escaped in _IDENTIY_ESCAPES:\n            return p.String(escaped)\n        elif escaped in _CHARACTER_CLASSES:\n            return p.Selection(_CHARACTER_CLASSES[escaped])\n        else:\n            raise ValueError('Unexpected escape sequence, \\\\%s.', escaped)\n    else:\n        source.put(char)\n        return None\ndef _parse_positive_int(source):\n    \"\"\"Parse a positive integer.\n    That is, parse a sequence of one or more digits.\n    \"\"\"\n    digits = []\n    next_char = source.get()\n    assert next_char and next_char in string.digits\n    while next_char and next_char in string.digits:\n        digits.append(next_char)\n        next_char = source.get()\n    source.put(next_char)\n    return int(''.join(digits))\ndef _parse_group_range(source):\n    \"\"\"Parse a three-character group range expression.\n    Return the set of characters represented by the range.\n    For example, parsing the expression 'c-e' from the source returns\n    set(['c', 'd', 'e']).\n    \"\"\"\n    start = source.get()\n    if start not in _GROUP_CHARS:\n        source.put(start)\n        return None\n    middle = source.get()\n    if middle != '-':\n        source.put(middle)\n        source.put(start)\n        return None\n    end = source.get()\n    if end not in _GROUP_CHARS:\n        source.put(end)\n        source.put(middle)\n        source.put(start)\n        return None\n    range_chars = set()\n    for ascii_value in range(ord(start), ord(end) + 1):\n        range_chars.add(chr(ascii_value))\n    return range_chars\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\nNext line of code:\n", "input": "", "context": "\"\"\"Tools for parsing a regular expression into a Pattern.\"\"\"\nimport collections\nimport string\nimport charsource\nimport pattern as p\n# Characters that represent themselves in a regular expression.\n# TODO(jasonpr): Handle $ and ^ specially at edges of regex.\n_CHAR_LITERALS = string.ascii_letters + string.digits + '!\"#$%&\\',-/:;<=>@^_`~]} \\t\\n\\r'\n# Characters that represent themselves inside a square-bracket expression.\n_GROUP_CHARS = string.ascii_letters + string.digits + '!\"#$%&\\'()*+,-./:;<=>?@[^_`{|}~'\n# Characters that represent themselves when escaped with a backslash.\n_IDENTIY_ESCAPES = r'.[\\()*+?{|'\n# Characters that represent a character class when escaped with a backslash.\n_CHARACTER_CLASSES = {\n    'd': string.digits,\n    'w': string.ascii_letters + string.digits + '_',\n    'h': string.hexdigits,\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    's': string.whitespace,\n    }\n_BRACKET_CHARACTER_CLASSES = {\n    'alnum': set(string.ascii_letters + string.digits),\n    'alpha': set(string.ascii_letters),\n    'digit': set(string.digits),\n    'lower': set(string.ascii_lowercase),\n    'print': set(string.printable),\n    'punct': set(string.punctuation),\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    'space': set(string.whitespace),\n    'upper': set(string.ascii_uppercase),\n    'xdigit': set(string.hexdigits),\n    }\ndef parse_regex(regex_string):\n    \"\"\"Convert a regular expression string into a Pattern.\"\"\"\n    return _parse_regex(charsource.GetPutSource(regex_string))\n# The following _parse_* methods form a recursive descent parser\n# that respect the order of operations in a regular expression.\ndef _parse_regex(source):\n    \"\"\"Parse any regex into a Pattern.\"\"\"\n    return _parse_alternation(source)\ndef _parse_alternation(source):\n    \"\"\"Parse an alternation expression, like 'ab|cd|ef'.\"\"\"\n    parts = []\n    # Act as though the last character was a '|', so we get the\n    # initial element of the alternation.\n    last_char = '|'\n    while last_char == '|':\n        parts.append(_parse_concatenation(source))\n        last_char = source.get()\n    # Put back the non-alternation character.\n    source.put(last_char)\n    return p.Or(*parts)\ndef _parse_concatenation(source):\n    \"\"\"Parse a concatenation expression, like 'abc' or 'a(b|c)d*'.\"\"\"\n    parts = []\n    duplication = _parse_duplication(source)\n    # If we're expecting a concatenation, there MUST be at least\n    # one (first) element!\n    assert duplication\n    while duplication:\n        parts.append(duplication)\n        duplication = _parse_duplication(source)\n    return p.Sequence(*parts)\ndef _parse_duplication(source):\n    \"\"\"Parse a duplication expression, like 'a*' or '(a|b){3,5}'.\"\"\"\n    duplicated = _parse_parenthesization(source)\n    if not duplicated:\n        return None\n    duplicator = source.get()\n    if duplicator == '?':\n        return p.Maybe(duplicated)\n    elif duplicator == '*':\n        return p.Star(duplicated)\n    elif duplicator == '+':\n        return p.Plus(duplicated)\n    elif duplicator == '{':\n        min_repeats = _parse_positive_int(source)\n        range_continuation = source.get()\n        # We will ultimately expect a closing curly brace, but\n        # we might see a comma and a max repeats value, first.\n        if range_continuation == ',':\n            max_repeats = _parse_positive_int(source)\n            range_continuation = source.get()\n        else:\n            max_repeats = min_repeats\n        if range_continuation != '}':\n            raise ValueError('Expected \"}\", but got \"%s\".' %\n                             range_continuation)\n        return p.Repeat(duplicated, min_repeats, max_repeats)\n    else:\n        source.put(duplicator)\n        return duplicated\ndef _parse_parenthesization(source):\n    \"\"\"Parse a parenthesization pattern, like '(a|b)' or '[ab]' or 'a'.\n    Note that '[ab]' is a parenthesization, since it is equivalent\n    to '([ab])'.  Similarly, 'a' is equivalent to '(a)'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '(':\n        enclosed_regex = _parse_regex(source)\n        close_paren = source.get()\n        assert close_paren == ')'\n        return enclosed_regex\n    # Otherwise, this must just be a group.  (Groups have just as\n    # tight of binding as a parenthesization.)\n    source.put(first_char)\n    return _parse_group(source)\ndef _parse_group(source):\n    \"\"\"Parse a group pattern, like '[abc]' or 'a'.\n    Note that 'a' is a group, since 'a' is equivalent to '[a]'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '[':\n        second_char = source.get()\n        if second_char == '^':\n            negating = True\n        else:\n            source.put(second_char)\n            negating = False\n        group_chars = _parse_group_chars(source)\n        result = p.Selection(group_chars, negating)\n        close_brace = source.get()\n        assert close_brace == ']'\n        return result\n    # Otherwise, it's a single normal character.\n    source.put(first_char)\n    return _parse_atom(source)\ndef _parse_group_chars(source):\n    \"\"\"Parse the characters from a group specification.\n    This is just a string of characters allowable in a group specification.\n    For example, a valid parse is 'aA1.?', since '[aA1.?]' is a valid group.\n    \"\"\"\n    chars = set()\n    while True:\n        range_chars = _parse_group_range(source)\n        if range_chars:\n            for char in range_chars:\n                chars.add(char)\n            continue\n        char_class = _parse_char_class(source)\n        if char_class:\n            chars |= char_class\n            continue\n        char = source.get()\n        if not char:\n            raise ValueError('Unexpected end of stream.')\n        if char not in _GROUP_CHARS:\n            source.put(char)\n            break\n        chars.add(char)\n    return ''.join(chars)\ndef _parse_atom(source):\n    \"\"\"Parse a single regex atom.\n    An atom is a period ('.'), a character literal, or an escape sequence.\n    \"\"\"\n    char = source.get()\n    if not char:\n        # For good measure, put the EOF back on!\n        # This doesn't really do anything, since the source will\n        # generate EOFs forever.\n        source.put(char)\n        return None\n    elif char == '.':\n        return p.Anything()\n    elif char in _CHAR_LITERALS:\n        return p.String(char)\n    elif char == '\\\\':\n        escaped = source.get()\n        if escaped in _IDENTIY_ESCAPES:\n            return p.String(escaped)\n        elif escaped in _CHARACTER_CLASSES:\n            return p.Selection(_CHARACTER_CLASSES[escaped])\n        else:\n            raise ValueError('Unexpected escape sequence, \\\\%s.', escaped)\n    else:\n        source.put(char)\n        return None\ndef _parse_positive_int(source):\n    \"\"\"Parse a positive integer.\n    That is, parse a sequence of one or more digits.\n    \"\"\"\n    digits = []\n    next_char = source.get()\n    assert next_char and next_char in string.digits\n    while next_char and next_char in string.digits:\n        digits.append(next_char)\n        next_char = source.get()\n    source.put(next_char)\n    return int(''.join(digits))\ndef _parse_group_range(source):\n    \"\"\"Parse a three-character group range expression.\n    Return the set of characters represented by the range.\n    For example, parsing the expression 'c-e' from the source returns\n    set(['c', 'd', 'e']).\n    \"\"\"\n    start = source.get()\n    if start not in _GROUP_CHARS:\n        source.put(start)\n        return None\n    middle = source.get()\n    if middle != '-':\n        source.put(middle)\n        source.put(start)\n        return None\n    end = source.get()\n    if end not in _GROUP_CHARS:\n        source.put(end)\n        source.put(middle)\n        source.put(start)\n        return None\n    range_chars = set()\n    for ascii_value in range(ord(start), ord(end) + 1):\n        range_chars.add(chr(ascii_value))\n    return range_chars\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\n", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "length": 850, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "da4a2050450c0e6dbb46728a24c2681051dcf60db99aed6b", "pred": "```\n        if source.get() == '[' + class_name:\n            return set(class_contents)\n```\nThis line of code checks if the current character in the source is the start of a character class (i.e., a bracket followed by the name of the class). If it is, it returns the set of characters"}
{"prompt": "Please complete the code given below. \n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov  8 14:27:22 2016\n@author: Viktor\n\"\"\"\nimport numpy as np\nfrom sklearn.datasets import fetch_mldata\nfrom matplotlib import pyplot as plt\nfrom skimage.io import imread\nfrom skimage.io import imshow\nfrom skimage.morphology import opening, closing\nfrom scipy import ndimage\nfrom sklearn.neighbors import KNeighborsClassifier\n#ucitavanje MNIST dataseta\nmnist = fetch_mldata('MNIST original')\nprint(mnist.data.shape)\nprint(mnist.target.shape)\nprint(np.unique(mnist.target))\nimg = 255-mnist.data[12345]\nimg = img.reshape(28,28)\nplt.imshow(-img, cmap='Greys')\n#iscitavanje dataseta i smestanje u matricu radi lakseg pristupa\nnumbers = [0]*10\nnumbers[0] = mnist['data'][np.where(mnist['target'] == 0.)[0]]\nnumbers[1] = mnist['data'][np.where(mnist['target'] == 1.)[0]]\nnumbers[2] = mnist['data'][np.where(mnist['target'] == 2.)[0]]\nnumbers[3] = mnist['data'][np.where(mnist['target'] == 3.)[0]]\nnumbers[4] = mnist['data'][np.where(mnist['target'] == 4.)[0]]\nnumbers[5] = mnist['data'][np.where(mnist['target'] == 5.)[0]]\nnumbers[6] = mnist['data'][np.where(mnist['target'] == 6.)[0]]\nnumbers[7] = mnist['data'][np.where(mnist['target'] == 7.)[0]]\nnumbers[8] = mnist['data'][np.where(mnist['target'] == 8.)[0]]\nnumbers[9] = mnist['data'][np.where(mnist['target'] == 9.)[0]]\ntest = numbers[0][123]\nres = numbers[0][123] == numbers[0][124]\npercent_hit = np.count_nonzero(res) / 784.0\nrepresentative_number = [0]*10\nfor j in range(0,10):\n    representative_number[j] = np.zeros(np.shape(numbers[j][0]), dtype='float')\n    for i in range(0,len(numbers[j])):\n        representative_number[j] = representative_number[j] + numbers[j][i]\n    representative_number[j] = (representative_number[j])/len(numbers[j])\ndef processing(path):\n    img = imread(path)\n    gray = rgb2gray(img)\n    binary = 1 - (gray > 0.5)\n    binary = closing(binary)\n    binary = opening(binary)\n    labeled, nr_objects = ndimage.label(binary)\n    return nr_objects\ndef poklapanje(niz1, niz2):\n    mera_poklapanja = 0.0\n    for i in range(0,len(niz1)):\n        if(niz1[i]==niz2[i]):\n            mera_poklapanja = mera_poklapanja + 1\n            \n    return mera_poklapanja/len(niz1)\n    \ndef ucitavanje(path):\n    image_path = []\n    with open(path) as f:\n        data = f.read()\n        lines = data.split('\\n')\n        for i, line in enumerate(lines):\n            if(i>1):\n                cols = line.split('\\t')\n                if(cols[0]!=''):\n                    image_path.append(cols[0])\n                \n        f.close()\n        \n    return image_path\ndef upis(path,image_path,result):\n    with open(path,'w') as f:\n        f.write('RA 1/2013 Viktor Sanca\\n')\n        f.write('file\\tsum\\n')\n        for i in range(0,len(image_path)):\n            f.write(image_path[i]+'\\t'+str(result[i])+'\\n')\n        \n        f.close()\n    \ndef get_img(image_path):\n    img = imread(image_path)\n    gray = rgb2gray(img)\n    #gray = closing(gray)\n    #gray = opening(gray)\n    #binary = (gray < 0.5)\n    return gray\ndef binarize(img):\n    return img>1\n    \ndef rgb2gray(img_rgb):\n    img_gray = np.ndarray((img_rgb.shape[0], img_rgb.shape[1]))\n    img_gray = 0.8*img_rgb[:, :, 0] + 0.2*img_rgb[:, :, 1] + 1*img_rgb[:, :, 2]\n    img_gray = img_gray.astype('uint8')\n    return img_gray\ndef mark_indices(image):\n    starting_indices = []\n    img = image.reshape(640*480)\n    for i in range(0,(640)*(480-28)):\n        if(img[i]<10 and img[i+27]<10 and img[i+27*(640)]<10 and img[i+27*(640)+27]<10):\n            starting_indices.append(i)\n            \n    return starting_indices\ndef get_image_from_indice(image,start_indice):\n    image28_28 = np.empty((28*28),dtype='uint8')\n    img = image.reshape(640*480)\n    \n    for i in range(0,28):\n        for j in range(0,28):\n            image28_28[28*i+j]=img[start_indice+i*(640)+j]\n    return image28_28\n    \ndef find_number(image28_28):\n    mmx = [0]*10\n    for i in range(0,10):\n        for j in range(0,len(numbers[i])):\n            res = binarize(image28_28) == binarize(numbers[i][j])\n            if(np.count_nonzero(res)>mmx[i]):\n                mmx[i]=np.count_nonzero(res)\n    \n    return max_idx(mmx)\n    \ndef max_idx(lista):\n    mx = max(lista)\n    for i in range(0,len(lista)):\n        if(lista[i]==mx):\n            return i\n            \n    return -1\n    \nimage_path = []\nresult = []\n    \nin_path = 'level-1-mnist-train/level-1-mnist/out.txt'\nout_path = 'level-1-mnist-test/level-1-mnist-test/out.txt'\ntrain_path = 'level-1-mnist-train/level-1-mnist/'\ntest_path = 'level-1-mnist-test/level-1-mnist-test/'\nimage_paths = ucitavanje(out_path)\n#knn = KNeighborsClassifier()\nknn = KNeighborsClassifier(n_neighbors=2000,weights='distance',algorithm='auto',n_jobs=-1)\nknn.fit(mnist.data,mnist.target)\nsuma = [0]*len(image_paths)\nfor i in range(0,len(image_paths)):\n    print('Image'+str(i+1)+'/'+str(len(image_paths)))\n    img = get_img(test_path+image_paths[i])\n    start_indices = mark_indices(img.reshape(640*480))\n    \n    for start_indice in start_indices:\n        img_d = get_image_from_indice(img,start_indice)\n        #nr = find_number(img_d)\n        nr = knn.predict(img_d)\n        suma[i] = suma[i] + nr[0]\n        suma[i] = int(suma[i])\nfor i in range(0,len(suma)):\n    suma[i] = float(suma[i])\n        \nupis(out_path, image_paths, suma)\nimage28_28 = img_d\nmmx = [0]*10\nfor i in range(0,10):\n    for j in range(0,len(numbers[i])):\n        res = image28_28 == numbers[i][j]\n        if(np.count_nonzero(res)>mmx[i]):\n            mmx[i]=np.count_nonzero(res)\n    \ntotal = np.zeros(784, dtype='float')\nfor i in range(0,10):\n    total = total + representative_number[i]\n        \nimg = representative_number[4]\nimg = img.reshape(28,28)\nplt.imshow(img, cmap='Greys')\nNext line of code:\n", "input": "", "context": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov  8 14:27:22 2016\n@author: Viktor\n\"\"\"\nimport numpy as np\nfrom sklearn.datasets import fetch_mldata\nfrom matplotlib import pyplot as plt\nfrom skimage.io import imread\nfrom skimage.io import imshow\nfrom skimage.morphology import opening, closing\nfrom scipy import ndimage\nfrom sklearn.neighbors import KNeighborsClassifier\n#ucitavanje MNIST dataseta\nmnist = fetch_mldata('MNIST original')\nprint(mnist.data.shape)\nprint(mnist.target.shape)\nprint(np.unique(mnist.target))\nimg = 255-mnist.data[12345]\nimg = img.reshape(28,28)\nplt.imshow(-img, cmap='Greys')\n#iscitavanje dataseta i smestanje u matricu radi lakseg pristupa\nnumbers = [0]*10\nnumbers[0] = mnist['data'][np.where(mnist['target'] == 0.)[0]]\nnumbers[1] = mnist['data'][np.where(mnist['target'] == 1.)[0]]\nnumbers[2] = mnist['data'][np.where(mnist['target'] == 2.)[0]]\nnumbers[3] = mnist['data'][np.where(mnist['target'] == 3.)[0]]\nnumbers[4] = mnist['data'][np.where(mnist['target'] == 4.)[0]]\nnumbers[5] = mnist['data'][np.where(mnist['target'] == 5.)[0]]\nnumbers[6] = mnist['data'][np.where(mnist['target'] == 6.)[0]]\nnumbers[7] = mnist['data'][np.where(mnist['target'] == 7.)[0]]\nnumbers[8] = mnist['data'][np.where(mnist['target'] == 8.)[0]]\nnumbers[9] = mnist['data'][np.where(mnist['target'] == 9.)[0]]\ntest = numbers[0][123]\nres = numbers[0][123] == numbers[0][124]\npercent_hit = np.count_nonzero(res) / 784.0\nrepresentative_number = [0]*10\nfor j in range(0,10):\n    representative_number[j] = np.zeros(np.shape(numbers[j][0]), dtype='float')\n    for i in range(0,len(numbers[j])):\n        representative_number[j] = representative_number[j] + numbers[j][i]\n    representative_number[j] = (representative_number[j])/len(numbers[j])\ndef processing(path):\n    img = imread(path)\n    gray = rgb2gray(img)\n    binary = 1 - (gray > 0.5)\n    binary = closing(binary)\n    binary = opening(binary)\n    labeled, nr_objects = ndimage.label(binary)\n    return nr_objects\ndef poklapanje(niz1, niz2):\n    mera_poklapanja = 0.0\n    for i in range(0,len(niz1)):\n        if(niz1[i]==niz2[i]):\n            mera_poklapanja = mera_poklapanja + 1\n            \n    return mera_poklapanja/len(niz1)\n    \ndef ucitavanje(path):\n    image_path = []\n    with open(path) as f:\n        data = f.read()\n        lines = data.split('\\n')\n        for i, line in enumerate(lines):\n            if(i>1):\n                cols = line.split('\\t')\n                if(cols[0]!=''):\n                    image_path.append(cols[0])\n                \n        f.close()\n        \n    return image_path\ndef upis(path,image_path,result):\n    with open(path,'w') as f:\n        f.write('RA 1/2013 Viktor Sanca\\n')\n        f.write('file\\tsum\\n')\n        for i in range(0,len(image_path)):\n            f.write(image_path[i]+'\\t'+str(result[i])+'\\n')\n        \n        f.close()\n    \ndef get_img(image_path):\n    img = imread(image_path)\n    gray = rgb2gray(img)\n    #gray = closing(gray)\n    #gray = opening(gray)\n    #binary = (gray < 0.5)\n    return gray\ndef binarize(img):\n    return img>1\n    \ndef rgb2gray(img_rgb):\n    img_gray = np.ndarray((img_rgb.shape[0], img_rgb.shape[1]))\n    img_gray = 0.8*img_rgb[:, :, 0] + 0.2*img_rgb[:, :, 1] + 1*img_rgb[:, :, 2]\n    img_gray = img_gray.astype('uint8')\n    return img_gray\ndef mark_indices(image):\n    starting_indices = []\n    img = image.reshape(640*480)\n    for i in range(0,(640)*(480-28)):\n        if(img[i]<10 and img[i+27]<10 and img[i+27*(640)]<10 and img[i+27*(640)+27]<10):\n            starting_indices.append(i)\n            \n    return starting_indices\ndef get_image_from_indice(image,start_indice):\n    image28_28 = np.empty((28*28),dtype='uint8')\n    img = image.reshape(640*480)\n    \n    for i in range(0,28):\n        for j in range(0,28):\n            image28_28[28*i+j]=img[start_indice+i*(640)+j]\n    return image28_28\n    \ndef find_number(image28_28):\n    mmx = [0]*10\n    for i in range(0,10):\n        for j in range(0,len(numbers[i])):\n            res = binarize(image28_28) == binarize(numbers[i][j])\n            if(np.count_nonzero(res)>mmx[i]):\n                mmx[i]=np.count_nonzero(res)\n    \n    return max_idx(mmx)\n    \ndef max_idx(lista):\n    mx = max(lista)\n    for i in range(0,len(lista)):\n        if(lista[i]==mx):\n            return i\n            \n    return -1\n    \nimage_path = []\nresult = []\n    \nin_path = 'level-1-mnist-train/level-1-mnist/out.txt'\nout_path = 'level-1-mnist-test/level-1-mnist-test/out.txt'\ntrain_path = 'level-1-mnist-train/level-1-mnist/'\ntest_path = 'level-1-mnist-test/level-1-mnist-test/'\nimage_paths = ucitavanje(out_path)\n#knn = KNeighborsClassifier()\nknn = KNeighborsClassifier(n_neighbors=2000,weights='distance',algorithm='auto',n_jobs=-1)\nknn.fit(mnist.data,mnist.target)\nsuma = [0]*len(image_paths)\nfor i in range(0,len(image_paths)):\n    print('Image'+str(i+1)+'/'+str(len(image_paths)))\n    img = get_img(test_path+image_paths[i])\n    start_indices = mark_indices(img.reshape(640*480))\n    \n    for start_indice in start_indices:\n        img_d = get_image_from_indice(img,start_indice)\n        #nr = find_number(img_d)\n        nr = knn.predict(img_d)\n        suma[i] = suma[i] + nr[0]\n        suma[i] = int(suma[i])\nfor i in range(0,len(suma)):\n    suma[i] = float(suma[i])\n        \nupis(out_path, image_paths, suma)\nimage28_28 = img_d\nmmx = [0]*10\nfor i in range(0,10):\n    for j in range(0,len(numbers[i])):\n        res = image28_28 == numbers[i][j]\n        if(np.count_nonzero(res)>mmx[i]):\n            mmx[i]=np.count_nonzero(res)\n    \ntotal = np.zeros(784, dtype='float')\nfor i in range(0,10):\n    total = total + representative_number[i]\n        \nimg = representative_number[4]\nimg = img.reshape(28,28)\nplt.imshow(img, cmap='Greys')\n", "answers": ["check = numbers[5][123]"], "length": 502, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "3a9e8b1453db3c2f6454e9ee3926124b1bbca244e7f8e637", "pred": "```\n```\nPlease complete the code. I have provided the code for the MNIST dataset and the K-Nearest Neighbors (KNN) classifier. The code is supposed to classify the images in the test dataset and write the results to a file. The KNN classifier is trained on the MNIST dataset"}
